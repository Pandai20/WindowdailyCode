// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace TEST {
class getrespon;
struct getresponDefaultTypeInternal;
extern getresponDefaultTypeInternal _getrespon_default_instance_;
class testrequest;
struct testrequestDefaultTypeInternal;
extern testrequestDefaultTypeInternal _testrequest_default_instance_;
}  // namespace TEST
PROTOBUF_NAMESPACE_OPEN
template<> ::TEST::getrespon* Arena::CreateMaybeMessage<::TEST::getrespon>(Arena*);
template<> ::TEST::testrequest* Arena::CreateMaybeMessage<::TEST::testrequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TEST {

// ===================================================================

class testrequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TEST.testrequest) */ {
 public:
  inline testrequest() : testrequest(nullptr) {}
  ~testrequest() override;
  explicit PROTOBUF_CONSTEXPR testrequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  testrequest(const testrequest& from);
  testrequest(testrequest&& from) noexcept
    : testrequest() {
    *this = ::std::move(from);
  }

  inline testrequest& operator=(const testrequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline testrequest& operator=(testrequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const testrequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const testrequest* internal_default_instance() {
    return reinterpret_cast<const testrequest*>(
               &_testrequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(testrequest& a, testrequest& b) {
    a.Swap(&b);
  }
  inline void Swap(testrequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testrequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  testrequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<testrequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const testrequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const testrequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(testrequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TEST.testrequest";
  }
  protected:
  explicit testrequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaihaoFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string waihao = 2;
  int waihao_size() const;
  private:
  int _internal_waihao_size() const;
  public:
  void clear_waihao();
  const std::string& waihao(int index) const;
  std::string* mutable_waihao(int index);
  void set_waihao(int index, const std::string& value);
  void set_waihao(int index, std::string&& value);
  void set_waihao(int index, const char* value);
  void set_waihao(int index, const char* value, size_t size);
  std::string* add_waihao();
  void add_waihao(const std::string& value);
  void add_waihao(std::string&& value);
  void add_waihao(const char* value);
  void add_waihao(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& waihao() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_waihao();
  private:
  const std::string& _internal_waihao(int index) const;
  std::string* _internal_add_waihao();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TEST.testrequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> waihao_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class getrespon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TEST.getrespon) */ {
 public:
  inline getrespon() : getrespon(nullptr) {}
  ~getrespon() override;
  explicit PROTOBUF_CONSTEXPR getrespon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getrespon(const getrespon& from);
  getrespon(getrespon&& from) noexcept
    : getrespon() {
    *this = ::std::move(from);
  }

  inline getrespon& operator=(const getrespon& from) {
    CopyFrom(from);
    return *this;
  }
  inline getrespon& operator=(getrespon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getrespon& default_instance() {
    return *internal_default_instance();
  }
  static inline const getrespon* internal_default_instance() {
    return reinterpret_cast<const getrespon*>(
               &_getrespon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(getrespon& a, getrespon& b) {
    a.Swap(&b);
  }
  inline void Swap(getrespon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getrespon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getrespon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getrespon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getrespon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getrespon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getrespon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TEST.getrespon";
  }
  protected:
  explicit getrespon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // bool code = 1;
  void clear_code();
  bool code() const;
  void set_code(bool value);
  private:
  bool _internal_code() const;
  void _internal_set_code(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TEST.getrespon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// testrequest

// string name = 1;
inline void testrequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& testrequest::name() const {
  // @@protoc_insertion_point(field_get:TEST.testrequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void testrequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TEST.testrequest.name)
}
inline std::string* testrequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TEST.testrequest.name)
  return _s;
}
inline const std::string& testrequest::_internal_name() const {
  return name_.Get();
}
inline void testrequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* testrequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* testrequest::release_name() {
  // @@protoc_insertion_point(field_release:TEST.testrequest.name)
  return name_.Release();
}
inline void testrequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TEST.testrequest.name)
}

// repeated string waihao = 2;
inline int testrequest::_internal_waihao_size() const {
  return waihao_.size();
}
inline int testrequest::waihao_size() const {
  return _internal_waihao_size();
}
inline void testrequest::clear_waihao() {
  waihao_.Clear();
}
inline std::string* testrequest::add_waihao() {
  std::string* _s = _internal_add_waihao();
  // @@protoc_insertion_point(field_add_mutable:TEST.testrequest.waihao)
  return _s;
}
inline const std::string& testrequest::_internal_waihao(int index) const {
  return waihao_.Get(index);
}
inline const std::string& testrequest::waihao(int index) const {
  // @@protoc_insertion_point(field_get:TEST.testrequest.waihao)
  return _internal_waihao(index);
}
inline std::string* testrequest::mutable_waihao(int index) {
  // @@protoc_insertion_point(field_mutable:TEST.testrequest.waihao)
  return waihao_.Mutable(index);
}
inline void testrequest::set_waihao(int index, const std::string& value) {
  waihao_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TEST.testrequest.waihao)
}
inline void testrequest::set_waihao(int index, std::string&& value) {
  waihao_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TEST.testrequest.waihao)
}
inline void testrequest::set_waihao(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  waihao_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TEST.testrequest.waihao)
}
inline void testrequest::set_waihao(int index, const char* value, size_t size) {
  waihao_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TEST.testrequest.waihao)
}
inline std::string* testrequest::_internal_add_waihao() {
  return waihao_.Add();
}
inline void testrequest::add_waihao(const std::string& value) {
  waihao_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TEST.testrequest.waihao)
}
inline void testrequest::add_waihao(std::string&& value) {
  waihao_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TEST.testrequest.waihao)
}
inline void testrequest::add_waihao(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  waihao_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TEST.testrequest.waihao)
}
inline void testrequest::add_waihao(const char* value, size_t size) {
  waihao_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TEST.testrequest.waihao)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
testrequest::waihao() const {
  // @@protoc_insertion_point(field_list:TEST.testrequest.waihao)
  return waihao_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
testrequest::mutable_waihao() {
  // @@protoc_insertion_point(field_mutable_list:TEST.testrequest.waihao)
  return &waihao_;
}

// -------------------------------------------------------------------

// getrespon

// bool code = 1;
inline void getrespon::clear_code() {
  code_ = false;
}
inline bool getrespon::_internal_code() const {
  return code_;
}
inline bool getrespon::code() const {
  // @@protoc_insertion_point(field_get:TEST.getrespon.code)
  return _internal_code();
}
inline void getrespon::_internal_set_code(bool value) {
  
  code_ = value;
}
inline void getrespon::set_code(bool value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TEST.getrespon.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TEST

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
