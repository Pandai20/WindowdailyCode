// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccs_conference_message.proto

#include "ccs_conference_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ccs_msg {
PROTOBUF_CONSTEXPR VideoWindow::VideoWindow(
    ::_pbi::ConstantInitialized)
  : member_id_(0)
  , stream_id_(0u)
  , mode_(0)
{}
struct VideoWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoWindowDefaultTypeInternal() {}
  union {
    VideoWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoWindowDefaultTypeInternal _VideoWindow_default_instance_;
PROTOBUF_CONSTEXPR VideoLayout::VideoLayout(
    ::_pbi::ConstantInitialized)
  : win_list_()
  , layout_id_(0u)
  , windows_(0u){}
struct VideoLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoLayoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoLayoutDefaultTypeInternal() {}
  union {
    VideoLayout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoLayoutDefaultTypeInternal _VideoLayout_default_instance_;
PROTOBUF_CONSTEXPR ITCOSDParams::ITCOSDParams(
    ::_pbi::ConstantInitialized)
  : position_(0u)
  , global_alpha_(0u)
  , font_size_(0u)
  , font_color_(0u)
  , bg_color_(0u)
  , osd_enable_(0u)
  , rolling_times_(0u)
  , show_seconds_(0u)
  , font_type_(0u)
  , en_bold_(0u)
  , pos_x_(0)
  , pos_y_(0){}
struct ITCOSDParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ITCOSDParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ITCOSDParamsDefaultTypeInternal() {}
  union {
    ITCOSDParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ITCOSDParamsDefaultTypeInternal _ITCOSDParams_default_instance_;
PROTOBUF_CONSTEXPR VideoCodec::VideoCodec(
    ::_pbi::ConstantInitialized)
  : codec_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bitrate_(0u)
  , bitrate_control_(0)

  , key_frame_interval_(0u)
  , enable_multi_slice_mode_(false)
  , channel_id_(0u){}
struct VideoCodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoCodecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoCodecDefaultTypeInternal() {}
  union {
    VideoCodec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoCodecDefaultTypeInternal _VideoCodec_default_instance_;
PROTOBUF_CONSTEXPR MixerParams::MixerParams(
    ::_pbi::ConstantInitialized)
  : video_codecs_list_()
  , banner_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rolling_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , osd_name_(nullptr)
  , osd_banner_(nullptr)
  , osd_rolling_msg_(nullptr)
  , osd_logo_(nullptr)
  , osd_subtitles_(nullptr)
  , layout_type_(0)

  , channels_count_(0u){}
struct MixerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MixerParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MixerParamsDefaultTypeInternal() {}
  union {
    MixerParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MixerParamsDefaultTypeInternal _MixerParams_default_instance_;
PROTOBUF_CONSTEXPR VideoParams::VideoParams(
    ::_pbi::ConstantInitialized)
  : mixer_params_list_()
  , codec_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , default_band_width_(0u)
  , max_bandwidth_(0u)
  , video_mixer_count_(0u){}
struct VideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoParamsDefaultTypeInternal() {}
  union {
    VideoParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoParamsDefaultTypeInternal _VideoParams_default_instance_;
PROTOBUF_CONSTEXPR ConfInfo::ConfInfo(
    ::_pbi::ConstantInitialized)
  : meeting_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , room_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creator_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , end_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , conf_pw_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , publish_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rtmp_play_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hls_play_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_interval_(0u)
  , active_members_(0u)
  , max_member_count_(0u)
  , conference_mode_(0)

  , proto_type_(0)

  , is_recording_(false)
  , is_living_(false)
  , is_virtual_(false)
  , enable_vcs_manually_send_h239_(false)
  , invite_mode_(0)

  , max_invite_times_(0u)
  , enterprise_id_(0u)
  , active_linux_members_(0u)
  , active_windows_members_(0u)
  , active_mac_members_(0u)
  , active_android_members_(0u)
  , active_ios_members_(0u)
  , is_external_live_(false){}
struct ConfInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfInfoDefaultTypeInternal() {}
  union {
    ConfInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfInfoDefaultTypeInternal _ConfInfo_default_instance_;
PROTOBUF_CONSTEXPR CreateMeetingReq::CreateMeetingReq(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , meeting_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creator_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , conf_password_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , audio_codec_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , end_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , ex_video_codec_(nullptr)
  , video_params_(nullptr)
  , layout_(nullptr)
  , invite_mode_(0)

  , member_count_limit_(0u)
  , conf_media_type_(0)

  , proto_type_(0)
{}
struct CreateMeetingReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateMeetingReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateMeetingReqDefaultTypeInternal() {}
  union {
    CreateMeetingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateMeetingReqDefaultTypeInternal _CreateMeetingReq_default_instance_;
PROTOBUF_CONSTEXPR CreateMeetingRes::CreateMeetingRes(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , meeting_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr){}
struct CreateMeetingResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateMeetingResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateMeetingResDefaultTypeInternal() {}
  union {
    CreateMeetingRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateMeetingResDefaultTypeInternal _CreateMeetingRes_default_instance_;
PROTOBUF_CONSTEXPR GetMeetingListReq::GetMeetingListReq(
    ::_pbi::ConstantInitialized)
  : header_(nullptr){}
struct GetMeetingListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMeetingListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMeetingListReqDefaultTypeInternal() {}
  union {
    GetMeetingListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMeetingListReqDefaultTypeInternal _GetMeetingListReq_default_instance_;
PROTOBUF_CONSTEXPR ConferenceListRes::ConferenceListRes(
    ::_pbi::ConstantInitialized)
  : conf_info_list_()
  , result_(nullptr){}
struct ConferenceListResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConferenceListResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConferenceListResDefaultTypeInternal() {}
  union {
    ConferenceListRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConferenceListResDefaultTypeInternal _ConferenceListRes_default_instance_;
PROTOBUF_CONSTEXPR InviteMemberReq::InviteMemberReq(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , invitename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , isadd_(false){}
struct InviteMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InviteMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InviteMemberReqDefaultTypeInternal() {}
  union {
    InviteMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InviteMemberReqDefaultTypeInternal _InviteMemberReq_default_instance_;
PROTOBUF_CONSTEXPR InviteMemberRes::InviteMemberRes(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , invitename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr){}
struct InviteMemberResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InviteMemberResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InviteMemberResDefaultTypeInternal() {}
  union {
    InviteMemberRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InviteMemberResDefaultTypeInternal _InviteMemberRes_default_instance_;
PROTOBUF_CONSTEXPR DropMemberReq::DropMemberReq(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , memberid_(uint64_t{0u}){}
struct DropMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropMemberReqDefaultTypeInternal() {}
  union {
    DropMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropMemberReqDefaultTypeInternal _DropMemberReq_default_instance_;
PROTOBUF_CONSTEXPR DropMemberRes::DropMemberRes(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr)
  , memberid_(uint64_t{0u}){}
struct DropMemberResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropMemberResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropMemberResDefaultTypeInternal() {}
  union {
    DropMemberRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropMemberResDefaultTypeInternal _DropMemberRes_default_instance_;
PROTOBUF_CONSTEXPR RemoveConfReq::RemoveConfReq(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr){}
struct RemoveConfReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveConfReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveConfReqDefaultTypeInternal() {}
  union {
    RemoveConfReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveConfReqDefaultTypeInternal _RemoveConfReq_default_instance_;
PROTOBUF_CONSTEXPR RemoveConfRes::RemoveConfRes(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr){}
struct RemoveConfResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveConfResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveConfResDefaultTypeInternal() {}
  union {
    RemoveConfRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveConfResDefaultTypeInternal _RemoveConfRes_default_instance_;
PROTOBUF_CONSTEXPR GetVideoLayoutInfoReq::GetVideoLayoutInfoReq(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mixerid_(0u){}
struct GetVideoLayoutInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVideoLayoutInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVideoLayoutInfoReqDefaultTypeInternal() {}
  union {
    GetVideoLayoutInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVideoLayoutInfoReqDefaultTypeInternal _GetVideoLayoutInfoReq_default_instance_;
PROTOBUF_CONSTEXPR GetVideoLayoutInfoRes::GetVideoLayoutInfoRes(
    ::_pbi::ConstantInitialized)
  : win_list_()
  , result_(nullptr)
  , layout_id_(0u)
  , windows_(0u){}
struct GetVideoLayoutInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVideoLayoutInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVideoLayoutInfoResDefaultTypeInternal() {}
  union {
    GetVideoLayoutInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVideoLayoutInfoResDefaultTypeInternal _GetVideoLayoutInfoRes_default_instance_;
PROTOBUF_CONSTEXPR SetVideoLayoutReq::SetVideoLayoutReq(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mixerid_(0u)
  , layoutid_(0u){}
struct SetVideoLayoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVideoLayoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVideoLayoutReqDefaultTypeInternal() {}
  union {
    SetVideoLayoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVideoLayoutReqDefaultTypeInternal _SetVideoLayoutReq_default_instance_;
PROTOBUF_CONSTEXPR SetVideoLayoutRes::SetVideoLayoutRes(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr)
  , mixerid_(0u)
  , layoutid_(0u){}
struct SetVideoLayoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVideoLayoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVideoLayoutResDefaultTypeInternal() {}
  union {
    SetVideoLayoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVideoLayoutResDefaultTypeInternal _SetVideoLayoutRes_default_instance_;
PROTOBUF_CONSTEXPR GetMembersInfoReq::GetMembersInfoReq(
    ::_pbi::ConstantInitialized)
  : roomid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mixerid_(0u){}
struct GetMembersInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMembersInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMembersInfoReqDefaultTypeInternal() {}
  union {
    GetMembersInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMembersInfoReqDefaultTypeInternal _GetMembersInfoReq_default_instance_;
PROTOBUF_CONSTEXPR MemberInfo::MemberInfo(
    ::_pbi::ConstantInitialized)
  : combin_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vcs_account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , member_id_(0u)
  , role_type_(0)

  , is_active_(false)
  , is_sound_receive_mute_(false)
  , is_sound_transmit_mute_(false)
  , is_video_receive_mute_(false)
  , audio_level_(0u)
  , manual_gain_db_(0u)
  , output_gain_db_(0u)
  , is_video_transmit_mute_(false)
  , enable_vad_(false)
  , is_chairman_(false)
  , is_h239_privilege_(false)
  , window_position_(0u)
  , exwindow_position_(0u)
  , video_channel_id_(0u)
  , is_h239_share_(false)
  , is_h239_permission_(false)
  , is_mcu_(false)
  , is_anonymouse_(false)
  , video_source_id_(0u)
  , connection_status_(0)

  , is_in_blacklist_(false)
  , is_vcs_user_(false)
  , is_recording_(false)
  , network_status_(0)

  , audio_source_id_(0u){}
struct MemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemberInfoDefaultTypeInternal() {}
  union {
    MemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
PROTOBUF_CONSTEXPR GetMembersInfoRes::GetMembersInfoRes(
    ::_pbi::ConstantInitialized)
  : member_info_list_()
  , result_(nullptr){}
struct GetMembersInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMembersInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMembersInfoResDefaultTypeInternal() {}
  union {
    GetMembersInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMembersInfoResDefaultTypeInternal _GetMembersInfoRes_default_instance_;
PROTOBUF_CONSTEXPR RecordReqInfo::RecordReqInfo(
    ::_pbi::ConstantInitialized)
  : recorder_video_src_id_(0u)
  , recorder_video_quality_id_(0u){}
struct RecordReqInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordReqInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordReqInfoDefaultTypeInternal() {}
  union {
    RecordReqInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordReqInfoDefaultTypeInternal _RecordReqInfo_default_instance_;
PROTOBUF_CONSTEXPR StartRecordReq::StartRecordReq(
    ::_pbi::ConstantInitialized)
  : record_info_list_()
  , room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr){}
struct StartRecordReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRecordReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRecordReqDefaultTypeInternal() {}
  union {
    StartRecordReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRecordReqDefaultTypeInternal _StartRecordReq_default_instance_;
PROTOBUF_CONSTEXPR RecordResInfo::RecordResInfo(
    ::_pbi::ConstantInitialized)
  : file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , recorder_video_src_id_(0u){}
struct RecordResInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordResInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordResInfoDefaultTypeInternal() {}
  union {
    RecordResInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordResInfoDefaultTypeInternal _RecordResInfo_default_instance_;
PROTOBUF_CONSTEXPR StartRecordRes::StartRecordRes(
    ::_pbi::ConstantInitialized)
  : record_info_list_()
  , result_(nullptr){}
struct StartRecordResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRecordResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRecordResDefaultTypeInternal() {}
  union {
    StartRecordRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRecordResDefaultTypeInternal _StartRecordRes_default_instance_;
PROTOBUF_CONSTEXPR StopRecordReq::StopRecordReq(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , recordervideosrcid_(0u){}
struct StopRecordReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopRecordReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopRecordReqDefaultTypeInternal() {}
  union {
    StopRecordReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopRecordReqDefaultTypeInternal _StopRecordReq_default_instance_;
PROTOBUF_CONSTEXPR StopRecordRes::StopRecordRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct StopRecordResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopRecordResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopRecordResDefaultTypeInternal() {}
  union {
    StopRecordRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopRecordResDefaultTypeInternal _StopRecordRes_default_instance_;
PROTOBUF_CONSTEXPR MuteMemberReq::MuteMemberReq(
    ::_pbi::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mute_type_(0)
{}
struct MuteMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteMemberReqDefaultTypeInternal() {}
  union {
    MuteMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteMemberReqDefaultTypeInternal _MuteMemberReq_default_instance_;
PROTOBUF_CONSTEXPR MuteMemberRes::MuteMemberRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct MuteMemberResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteMemberResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteMemberResDefaultTypeInternal() {}
  union {
    MuteMemberRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteMemberResDefaultTypeInternal _MuteMemberRes_default_instance_;
PROTOBUF_CONSTEXPR UnmuteMemberReq::UnmuteMemberReq(
    ::_pbi::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mute_type_(0)
{}
struct UnmuteMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteMemberReqDefaultTypeInternal() {}
  union {
    UnmuteMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteMemberReqDefaultTypeInternal _UnmuteMemberReq_default_instance_;
PROTOBUF_CONSTEXPR UnmuteMemberRes::UnmuteMemberRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct UnmuteMemberResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteMemberResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteMemberResDefaultTypeInternal() {}
  union {
    UnmuteMemberRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteMemberResDefaultTypeInternal _UnmuteMemberRes_default_instance_;
PROTOBUF_CONSTEXPR MuteAllMemberReq::MuteAllMemberReq(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mute_type_(0)
{}
struct MuteAllMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteAllMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteAllMemberReqDefaultTypeInternal() {}
  union {
    MuteAllMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteAllMemberReqDefaultTypeInternal _MuteAllMemberReq_default_instance_;
PROTOBUF_CONSTEXPR MuteAllMemberRes::MuteAllMemberRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct MuteAllMemberResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteAllMemberResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteAllMemberResDefaultTypeInternal() {}
  union {
    MuteAllMemberRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteAllMemberResDefaultTypeInternal _MuteAllMemberRes_default_instance_;
PROTOBUF_CONSTEXPR UnmuteAllMemberReq::UnmuteAllMemberReq(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mute_type_(0)
{}
struct UnmuteAllMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteAllMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteAllMemberReqDefaultTypeInternal() {}
  union {
    UnmuteAllMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteAllMemberReqDefaultTypeInternal _UnmuteAllMemberReq_default_instance_;
PROTOBUF_CONSTEXPR UnmuteAllMemberRes::UnmuteAllMemberRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct UnmuteAllMemberResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteAllMemberResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteAllMemberResDefaultTypeInternal() {}
  union {
    UnmuteAllMemberRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteAllMemberResDefaultTypeInternal _UnmuteAllMemberRes_default_instance_;
PROTOBUF_CONSTEXPR AssignChairmanReq::AssignChairmanReq(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , member_id_(0){}
struct AssignChairmanReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignChairmanReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignChairmanReqDefaultTypeInternal() {}
  union {
    AssignChairmanReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignChairmanReqDefaultTypeInternal _AssignChairmanReq_default_instance_;
PROTOBUF_CONSTEXPR AssignChairmanRes::AssignChairmanRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct AssignChairmanResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignChairmanResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignChairmanResDefaultTypeInternal() {}
  union {
    AssignChairmanRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignChairmanResDefaultTypeInternal _AssignChairmanRes_default_instance_;
PROTOBUF_CONSTEXPR TakePhotoReq::TakePhotoReq(
    ::_pbi::ConstantInitialized)
  : room_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , mixer_id_(0u)
  , window_id_(0u){}
struct TakePhotoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakePhotoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakePhotoReqDefaultTypeInternal() {}
  union {
    TakePhotoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakePhotoReqDefaultTypeInternal _TakePhotoReq_default_instance_;
PROTOBUF_CONSTEXPR TakePhotoRes::TakePhotoRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct TakePhotoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakePhotoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakePhotoResDefaultTypeInternal() {}
  union {
    TakePhotoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakePhotoResDefaultTypeInternal _TakePhotoRes_default_instance_;
}  // namespace ccs_msg
static ::_pb::Metadata file_level_metadata_ccs_5fconference_5fmessage_2eproto[42];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ccs_5fconference_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_ccs_5fconference_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoWindow, member_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoWindow, stream_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoWindow, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoLayout, win_list_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoLayout, layout_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoLayout, windows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, position_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, global_alpha_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, font_size_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, font_color_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, bg_color_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, osd_enable_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, rolling_times_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, show_seconds_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, font_type_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, en_bold_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, pos_x_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ITCOSDParams, pos_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, codec_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, bitrate_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, bitrate_control_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, key_frame_interval_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, enable_multi_slice_mode_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoCodec, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, layout_type_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, video_codecs_list_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, osd_name_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, osd_banner_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, osd_rolling_msg_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, osd_logo_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, osd_subtitles_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, banner_text_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, rolling_text_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, ip_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MixerParams, channels_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoParams, codec_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoParams, default_band_width_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoParams, max_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoParams, mixer_params_list_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::VideoParams, video_mixer_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, meeting_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, room_name_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, creator_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, time_interval_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, active_members_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, max_member_count_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, conference_mode_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, is_recording_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, is_living_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, proto_type_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, conf_pw_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, is_virtual_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, invite_mode_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, max_invite_times_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, enable_vcs_manually_send_h239_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, enterprise_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, active_linux_members_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, active_windows_members_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, active_mac_members_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, active_android_members_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, active_ios_members_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, is_external_live_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, publish_path_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, rtmp_play_path_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConfInfo, hls_play_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, meeting_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, name_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, creator_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, conf_password_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, invite_mode_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, audio_codec_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, member_count_limit_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, conf_media_type_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, proto_type_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, start_time_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, end_time_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, ex_video_codec_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, video_params_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingReq, layout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingRes, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CreateMeetingRes, meeting_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMeetingListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMeetingListReq, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConferenceListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConferenceListRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::ConferenceListRes, conf_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberReq, invitename_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberReq, isadd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberRes, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::InviteMemberRes, invitename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberReq, memberid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberRes, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::DropMemberRes, memberid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RemoveConfReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RemoveConfReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RemoveConfReq, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RemoveConfRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RemoveConfRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RemoveConfRes, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoReq, mixerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoRes, win_list_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoRes, layout_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetVideoLayoutInfoRes, windows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutReq, mixerid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutReq, layoutid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutRes, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutRes, mixerid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetVideoLayoutRes, layoutid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoReq, mixerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, combin_name_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, member_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_active_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, role_type_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_sound_receive_mute_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_sound_transmit_mute_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_video_receive_mute_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_video_transmit_mute_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, enable_vad_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, audio_level_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, manual_gain_db_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, output_gain_db_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, window_position_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, exwindow_position_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, video_channel_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_chairman_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_h239_privilege_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_h239_share_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_h239_permission_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_mcu_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_anonymouse_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_in_blacklist_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, video_source_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, connection_status_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_vcs_user_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, vcs_account_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, is_recording_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, network_status_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MemberInfo, audio_source_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::GetMembersInfoRes, member_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RecordReqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RecordReqInfo, recorder_video_src_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RecordReqInfo, recorder_video_quality_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordReq, record_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RecordResInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RecordResInfo, recorder_video_src_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::RecordResInfo, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StartRecordRes, record_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StopRecordReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StopRecordReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StopRecordReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StopRecordReq, recordervideosrcid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StopRecordRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::StopRecordRes, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberReq, member_id_list_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberReq, mute_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteMemberRes, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberReq, member_id_list_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberReq, mute_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteMemberRes, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteAllMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteAllMemberReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteAllMemberReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteAllMemberReq, mute_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteAllMemberRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MuteAllMemberRes, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteAllMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteAllMemberReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteAllMemberReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteAllMemberReq, mute_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteAllMemberRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::UnmuteAllMemberRes, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::AssignChairmanReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::AssignChairmanReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::AssignChairmanReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::AssignChairmanReq, member_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::AssignChairmanRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::AssignChairmanRes, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoReq, room_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoReq, mixer_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoReq, window_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::TakePhotoRes, result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ccs_msg::VideoWindow)},
  { 9, -1, -1, sizeof(::ccs_msg::VideoLayout)},
  { 18, -1, -1, sizeof(::ccs_msg::ITCOSDParams)},
  { 36, -1, -1, sizeof(::ccs_msg::VideoCodec)},
  { 48, -1, -1, sizeof(::ccs_msg::MixerParams)},
  { 65, -1, -1, sizeof(::ccs_msg::VideoParams)},
  { 76, -1, -1, sizeof(::ccs_msg::ConfInfo)},
  { 110, -1, -1, sizeof(::ccs_msg::CreateMeetingReq)},
  { 132, -1, -1, sizeof(::ccs_msg::CreateMeetingRes)},
  { 141, -1, -1, sizeof(::ccs_msg::GetMeetingListReq)},
  { 148, -1, -1, sizeof(::ccs_msg::ConferenceListRes)},
  { 156, -1, -1, sizeof(::ccs_msg::InviteMemberReq)},
  { 166, -1, -1, sizeof(::ccs_msg::InviteMemberRes)},
  { 175, -1, -1, sizeof(::ccs_msg::DropMemberReq)},
  { 184, -1, -1, sizeof(::ccs_msg::DropMemberRes)},
  { 193, -1, -1, sizeof(::ccs_msg::RemoveConfReq)},
  { 201, -1, -1, sizeof(::ccs_msg::RemoveConfRes)},
  { 209, -1, -1, sizeof(::ccs_msg::GetVideoLayoutInfoReq)},
  { 218, -1, -1, sizeof(::ccs_msg::GetVideoLayoutInfoRes)},
  { 228, -1, -1, sizeof(::ccs_msg::SetVideoLayoutReq)},
  { 238, -1, -1, sizeof(::ccs_msg::SetVideoLayoutRes)},
  { 248, -1, -1, sizeof(::ccs_msg::GetMembersInfoReq)},
  { 257, -1, -1, sizeof(::ccs_msg::MemberInfo)},
  { 292, -1, -1, sizeof(::ccs_msg::GetMembersInfoRes)},
  { 300, -1, -1, sizeof(::ccs_msg::RecordReqInfo)},
  { 308, -1, -1, sizeof(::ccs_msg::StartRecordReq)},
  { 317, -1, -1, sizeof(::ccs_msg::RecordResInfo)},
  { 325, -1, -1, sizeof(::ccs_msg::StartRecordRes)},
  { 333, -1, -1, sizeof(::ccs_msg::StopRecordReq)},
  { 342, -1, -1, sizeof(::ccs_msg::StopRecordRes)},
  { 349, -1, -1, sizeof(::ccs_msg::MuteMemberReq)},
  { 359, -1, -1, sizeof(::ccs_msg::MuteMemberRes)},
  { 366, -1, -1, sizeof(::ccs_msg::UnmuteMemberReq)},
  { 376, -1, -1, sizeof(::ccs_msg::UnmuteMemberRes)},
  { 383, -1, -1, sizeof(::ccs_msg::MuteAllMemberReq)},
  { 392, -1, -1, sizeof(::ccs_msg::MuteAllMemberRes)},
  { 399, -1, -1, sizeof(::ccs_msg::UnmuteAllMemberReq)},
  { 408, -1, -1, sizeof(::ccs_msg::UnmuteAllMemberRes)},
  { 415, -1, -1, sizeof(::ccs_msg::AssignChairmanReq)},
  { 424, -1, -1, sizeof(::ccs_msg::AssignChairmanRes)},
  { 431, -1, -1, sizeof(::ccs_msg::TakePhotoReq)},
  { 441, -1, -1, sizeof(::ccs_msg::TakePhotoRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ccs_msg::_VideoWindow_default_instance_._instance,
  &::ccs_msg::_VideoLayout_default_instance_._instance,
  &::ccs_msg::_ITCOSDParams_default_instance_._instance,
  &::ccs_msg::_VideoCodec_default_instance_._instance,
  &::ccs_msg::_MixerParams_default_instance_._instance,
  &::ccs_msg::_VideoParams_default_instance_._instance,
  &::ccs_msg::_ConfInfo_default_instance_._instance,
  &::ccs_msg::_CreateMeetingReq_default_instance_._instance,
  &::ccs_msg::_CreateMeetingRes_default_instance_._instance,
  &::ccs_msg::_GetMeetingListReq_default_instance_._instance,
  &::ccs_msg::_ConferenceListRes_default_instance_._instance,
  &::ccs_msg::_InviteMemberReq_default_instance_._instance,
  &::ccs_msg::_InviteMemberRes_default_instance_._instance,
  &::ccs_msg::_DropMemberReq_default_instance_._instance,
  &::ccs_msg::_DropMemberRes_default_instance_._instance,
  &::ccs_msg::_RemoveConfReq_default_instance_._instance,
  &::ccs_msg::_RemoveConfRes_default_instance_._instance,
  &::ccs_msg::_GetVideoLayoutInfoReq_default_instance_._instance,
  &::ccs_msg::_GetVideoLayoutInfoRes_default_instance_._instance,
  &::ccs_msg::_SetVideoLayoutReq_default_instance_._instance,
  &::ccs_msg::_SetVideoLayoutRes_default_instance_._instance,
  &::ccs_msg::_GetMembersInfoReq_default_instance_._instance,
  &::ccs_msg::_MemberInfo_default_instance_._instance,
  &::ccs_msg::_GetMembersInfoRes_default_instance_._instance,
  &::ccs_msg::_RecordReqInfo_default_instance_._instance,
  &::ccs_msg::_StartRecordReq_default_instance_._instance,
  &::ccs_msg::_RecordResInfo_default_instance_._instance,
  &::ccs_msg::_StartRecordRes_default_instance_._instance,
  &::ccs_msg::_StopRecordReq_default_instance_._instance,
  &::ccs_msg::_StopRecordRes_default_instance_._instance,
  &::ccs_msg::_MuteMemberReq_default_instance_._instance,
  &::ccs_msg::_MuteMemberRes_default_instance_._instance,
  &::ccs_msg::_UnmuteMemberReq_default_instance_._instance,
  &::ccs_msg::_UnmuteMemberRes_default_instance_._instance,
  &::ccs_msg::_MuteAllMemberReq_default_instance_._instance,
  &::ccs_msg::_MuteAllMemberRes_default_instance_._instance,
  &::ccs_msg::_UnmuteAllMemberReq_default_instance_._instance,
  &::ccs_msg::_UnmuteAllMemberRes_default_instance_._instance,
  &::ccs_msg::_AssignChairmanReq_default_instance_._instance,
  &::ccs_msg::_AssignChairmanRes_default_instance_._instance,
  &::ccs_msg::_TakePhotoReq_default_instance_._instance,
  &::ccs_msg::_TakePhotoRes_default_instance_._instance,
};

const char descriptor_table_protodef_ccs_5fconference_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ccs_conference_message.proto\022\007ccs_msg\032"
  "\030ccs_common_message.proto\"S\n\013VideoWindow"
  "\022\021\n\tmember_id\030\001 \001(\005\022\021\n\tstream_id\030\002 \001(\r\022\036"
  "\n\004mode\030\003 \001(\0162\020.ccs_msg.WinMode\"Y\n\013VideoL"
  "ayout\022&\n\010win_list\030\001 \003(\0132\024.ccs_msg.VideoW"
  "indow\022\021\n\tlayout_id\030\002 \001(\r\022\017\n\007windows\030\003 \001("
  "\r\"\362\001\n\014ITCOSDParams\022\020\n\010position\030\001 \001(\r\022\024\n\014"
  "global_alpha\030\002 \001(\r\022\021\n\tfont_size\030\003 \001(\r\022\022\n"
  "\nfont_color\030\004 \001(\r\022\020\n\010bg_color\030\005 \001(\r\022\022\n\no"
  "sd_enable\030\006 \001(\r\022\025\n\rrolling_times\030\007 \001(\r\022\024"
  "\n\014show_seconds\030\010 \001(\r\022\021\n\tfont_type\030\t \001(\r\022"
  "\017\n\007en_bold\030\n \001(\r\022\r\n\005pos_x\030\013 \001(\005\022\r\n\005pos_y"
  "\030\014 \001(\005\"\270\001\n\nVideoCodec\022\r\n\005codec\030\001 \001(\t\022\017\n\007"
  "bitrate\030\002 \001(\r\0229\n\017bitrate_control\030\003 \001(\0162 "
  ".ccs_msg.BitrateControlAlgorithm\022\032\n\022key_"
  "frame_interval\030\004 \001(\r\022\037\n\027enable_multi_sli"
  "ce_mode\030\005 \001(\010\022\022\n\nchannel_id\030\006 \001(\r\"\231\003\n\013Mi"
  "xerParams\0220\n\013layout_type\030\001 \001(\0162\033.ccs_msg"
  ".ITCVideoLayoutType\022.\n\021video_codecs_list"
  "\030\002 \003(\0132\023.ccs_msg.VideoCodec\022\'\n\010osd_name\030"
  "\003 \001(\0132\025.ccs_msg.ITCOSDParams\022)\n\nosd_bann"
  "er\030\004 \001(\0132\025.ccs_msg.ITCOSDParams\022.\n\017osd_r"
  "olling_msg\030\005 \001(\0132\025.ccs_msg.ITCOSDParams\022"
  "\'\n\010osd_logo\030\006 \001(\0132\025.ccs_msg.ITCOSDParams"
  "\022,\n\rosd_subtitles\030\007 \001(\0132\025.ccs_msg.ITCOSD"
  "Params\022\023\n\013banner_text\030\010 \001(\t\022\024\n\014rolling_t"
  "ext\030\t \001(\t\022\n\n\002ip\030\n \001(\t\022\026\n\016channels_count\030"
  "\013 \001(\r\"\233\001\n\013VideoParams\022\r\n\005codec\030\001 \001(\t\022\032\n\022"
  "default_band_width\030\002 \001(\r\022\025\n\rmax_bandwidt"
  "h\030\003 \001(\r\022/\n\021mixer_params_list\030\004 \003(\0132\024.ccs"
  "_msg.MixerParams\022\031\n\021video_mixer_count\030\005 "
  "\001(\r\"\342\005\n\010ConfInfo\022\022\n\nmeeting_id\030\001 \001(\t\022\017\n\007"
  "room_id\030\002 \001(\t\022\021\n\troom_name\030\003 \001(\t\022\017\n\007crea"
  "tor\030\004 \001(\t\022\025\n\rtime_interval\030\005 \001(\r\022\026\n\016acti"
  "ve_members\030\006 \001(\r\022\030\n\020max_member_count\030\007 \001"
  "(\r\0221\n\017conference_mode\030\010 \001(\0162\030.ccs_msg.Co"
  "nfControlMode\022\024\n\014is_recording\030\t \001(\010\022\022\n\ns"
  "tart_time\030\n \001(\t\022\020\n\010end_time\030\013 \001(\t\022\021\n\tis_"
  "living\030\014 \001(\010\022&\n\nproto_type\030\r \001(\0162\022.ccs_m"
  "sg.ProtoType\022\017\n\007conf_pw\030\016 \001(\t\022\022\n\nis_virt"
  "ual\030\017 \001(\010\022(\n\013invite_mode\030\020 \001(\0162\023.ccs_msg"
  ".InviteMode\022\030\n\020max_invite_times\030\021 \001(\r\022%\n"
  "\035enable_VCS_manually_send_H239\030\022 \001(\010\022\025\n\r"
  "enterprise_id\030\023 \001(\r\022\034\n\024active_linux_memb"
  "ers\030\024 \001(\r\022\036\n\026active_windows_members\030\025 \001("
  "\r\022\032\n\022active_mac_members\030\026 \001(\r\022\036\n\026active_"
  "android_members\030\027 \001(\r\022\032\n\022active_IOS_memb"
  "ers\030\030 \001(\r\022\030\n\020is_external_live\030\031 \001(\010\022\024\n\014p"
  "ublish_path\030\032 \001(\t\022\026\n\016rtmp_play_path\030\033 \001("
  "\t\022\025\n\rhls_play_path\030\034 \001(\t\"\360\003\n\020CreateMeeti"
  "ngReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.MsgHeade"
  "r\022\017\n\007room_ID\030\002 \001(\t\022\022\n\nmeeting_ID\030\003 \001(\t\022\014"
  "\n\004name\030\004 \001(\t\022\017\n\007creator\030\005 \001(\t\022\025\n\rconf_Pa"
  "ssword\030\006 \001(\t\022(\n\013invite_mode\030\007 \001(\0162\023.ccs_"
  "msg.InviteMode\022\023\n\013audio_codec\030\010 \001(\t\022\032\n\022m"
  "ember_count_limit\030\t \001(\r\0225\n\017conf_media_ty"
  "pe\030\n \001(\0162\034.ccs_msg.ConferenceMediaType\022&"
  "\n\nproto_type\030\013 \001(\0162\022.ccs_msg.ProtoType\022\022"
  "\n\nstart_time\030\014 \001(\t\022\020\n\010end_time\030\r \001(\t\022+\n\016"
  "ex_video_codec\030\016 \001(\0132\023.ccs_msg.VideoCode"
  "c\022*\n\014video_params\030\017 \001(\0132\024.ccs_msg.VideoP"
  "arams\022$\n\006layout\030\020 \001(\0132\024.ccs_msg.VideoLay"
  "out\"\\\n\020CreateMeetingRes\022#\n\006result\030\001 \001(\0132"
  "\023.ccs_msg.ResultInfo\022\017\n\007room_id\030\002 \001(\t\022\022\n"
  "\nmeeting_id\030\003 \001(\t\"7\n\021GetMeetingListReq\022\""
  "\n\006header\030\001 \001(\0132\022.ccs_msg.MsgHeader\"c\n\021Co"
  "nferenceListRes\022#\n\006result\030\001 \001(\0132\023.ccs_ms"
  "g.ResultInfo\022)\n\016conf_info_list\030\002 \003(\0132\021.c"
  "cs_msg.ConfInfo\"h\n\017InviteMemberReq\022\"\n\006he"
  "ader\030\001 \001(\0132\022.ccs_msg.MsgHeader\022\016\n\006roomID"
  "\030\002 \001(\t\022\022\n\ninviteName\030\003 \001(\t\022\r\n\005isAdd\030\004 \001("
  "\010\"Z\n\017InviteMemberRes\022#\n\006result\030\001 \001(\0132\023.c"
  "cs_msg.ResultInfo\022\016\n\006roomID\030\002 \001(\t\022\022\n\ninv"
  "iteName\030\003 \001(\t\"U\n\rDropMemberReq\022\"\n\006header"
  "\030\001 \001(\0132\022.ccs_msg.MsgHeader\022\016\n\006roomID\030\002 \001"
  "(\t\022\020\n\010memberID\030\003 \001(\004\"V\n\rDropMemberRes\022#\n"
  "\006result\030\001 \001(\0132\023.ccs_msg.ResultInfo\022\016\n\006ro"
  "omID\030\002 \001(\t\022\020\n\010memberID\030\003 \001(\004\"C\n\rRemoveCo"
  "nfReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.MsgHeade"
  "r\022\016\n\006roomID\030\002 \001(\t\"D\n\rRemoveConfRes\022#\n\006re"
  "sult\030\001 \001(\0132\023.ccs_msg.ResultInfo\022\016\n\006roomI"
  "D\030\002 \001(\t\"\\\n\025GetVideoLayoutInfoReq\022\"\n\006head"
  "er\030\001 \001(\0132\022.ccs_msg.MsgHeader\022\016\n\006roomID\030\002"
  " \001(\t\022\017\n\007mixerID\030\003 \001(\r\"\210\001\n\025GetVideoLayout"
  "InfoRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg.Result"
  "Info\022&\n\010win_list\030\002 \003(\0132\024.ccs_msg.VideoWi"
  "ndow\022\021\n\tlayout_id\030\003 \001(\r\022\017\n\007windows\030\004 \001(\r"
  "\"j\n\021SetVideoLayoutReq\022\"\n\006header\030\001 \001(\0132\022."
  "ccs_msg.MsgHeader\022\016\n\006roomID\030\002 \001(\t\022\017\n\007mix"
  "erID\030\003 \001(\r\022\020\n\010layoutID\030\004 \001(\r\"k\n\021SetVideo"
  "LayoutRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg.Resu"
  "ltInfo\022\016\n\006roomID\030\002 \001(\t\022\017\n\007mixerID\030\003 \001(\r\022"
  "\020\n\010layoutID\030\004 \001(\r\"X\n\021GetMembersInfoReq\022\""
  "\n\006header\030\001 \001(\0132\022.ccs_msg.MsgHeader\022\016\n\006ro"
  "omID\030\002 \001(\t\022\017\n\007mixerID\030\003 \001(\r\"\215\006\n\nMemberIn"
  "fo\022\023\n\013combin_name\030\001 \001(\014\022\021\n\tmember_id\030\002 \001"
  "(\r\022\021\n\tis_active\030\003 \001(\010\022$\n\trole_type\030\004 \001(\016"
  "2\021.ccs_msg.RoleType\022\035\n\025is_sound_receive_"
  "mute\030\005 \001(\010\022\036\n\026is_sound_transmit_mute\030\006 \001"
  "(\010\022\035\n\025is_video_receive_mute\030\007 \001(\010\022\036\n\026is_"
  "video_transmit_mute\030\010 \001(\010\022\022\n\nenable_vad\030"
  "\t \001(\010\022\023\n\013audio_level\030\n \001(\r\022\026\n\016manual_gai"
  "n_db\030\013 \001(\r\022\026\n\016output_gain_db\030\014 \001(\r\022\027\n\017wi"
  "ndow_position\030\r \001(\r\022\031\n\021exwindow_position"
  "\030\016 \001(\r\022\030\n\020video_channel_id\030\017 \001(\r\022\023\n\013is_c"
  "hairman\030\020 \001(\010\022\031\n\021is_H239_privilege\030\021 \001(\010"
  "\022\025\n\ris_H239_share\030\022 \001(\010\022\032\n\022is_H239_permi"
  "ssion\030\023 \001(\010\022\016\n\006is_mcu\030\024 \001(\010\022\025\n\ris_anonym"
  "ouse\030\025 \001(\010\022\027\n\017is_in_blacklist\030\026 \001(\010\022\027\n\017v"
  "ideo_source_id\030\027 \001(\r\0224\n\021connection_statu"
  "s\030\030 \001(\0162\031.ccs_msg.ConnectionStatus\022\023\n\013is"
  "_vcs_user\030\031 \001(\010\022\023\n\013vcs_account\030\032 \001(\t\022\024\n\014"
  "is_recording\030\033 \001(\010\022.\n\016network_status\030\034 \001"
  "(\0162\026.ccs_msg.NetworkStatus\022\027\n\017audio_sour"
  "ce_id\030\035 \001(\r\"g\n\021GetMembersInfoRes\022#\n\006resu"
  "lt\030\001 \001(\0132\023.ccs_msg.ResultInfo\022-\n\020member_"
  "info_list\030\002 \003(\0132\023.ccs_msg.MemberInfo\"Q\n\r"
  "RecordReqInfo\022\035\n\025recorder_video_src_id\030\001"
  " \001(\r\022!\n\031recorder_video_quality_id\030\002 \001(\r\""
  "w\n\016StartRecordReq\022\"\n\006header\030\001 \001(\0132\022.ccs_"
  "msg.MsgHeader\022\017\n\007room_id\030\002 \001(\t\0220\n\020record"
  "_info_list\030\003 \003(\0132\026.ccs_msg.RecordReqInfo"
  "\"A\n\rRecordResInfo\022\035\n\025recorder_video_src_"
  "id\030\001 \001(\r\022\021\n\tfile_name\030\002 \001(\t\"g\n\016StartReco"
  "rdRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg.ResultIn"
  "fo\0220\n\020record_info_list\030\002 \003(\0132\026.ccs_msg.R"
  "ecordResInfo\"`\n\rStopRecordReq\022\"\n\006header\030"
  "\001 \001(\0132\022.ccs_msg.MsgHeader\022\017\n\007room_id\030\002 \001"
  "(\t\022\032\n\022recorderVideoSrcId\030\003 \001(\r\"4\n\rStopRe"
  "cordRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg.Result"
  "Info\"\202\001\n\rMuteMemberReq\022\"\n\006header\030\001 \001(\0132\022"
  ".ccs_msg.MsgHeader\022\017\n\007room_id\030\002 \001(\t\022\026\n\016m"
  "ember_id_list\030\003 \003(\005\022$\n\tmute_type\030\004 \001(\0162\021"
  ".ccs_msg.MuteType\"4\n\rMuteMemberRes\022#\n\006re"
  "sult\030\001 \001(\0132\023.ccs_msg.ResultInfo\"\204\001\n\017Unmu"
  "teMemberReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.Ms"
  "gHeader\022\017\n\007room_id\030\002 \001(\t\022\026\n\016member_id_li"
  "st\030\003 \003(\005\022$\n\tmute_type\030\004 \001(\0162\021.ccs_msg.Mu"
  "teType\"6\n\017UnmuteMemberRes\022#\n\006result\030\001 \001("
  "\0132\023.ccs_msg.ResultInfo\"m\n\020MuteAllMemberR"
  "eq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.MsgHeader\022\017"
  "\n\007room_id\030\002 \001(\t\022$\n\tmute_type\030\003 \001(\0162\021.ccs"
  "_msg.MuteType\"7\n\020MuteAllMemberRes\022#\n\006res"
  "ult\030\001 \001(\0132\023.ccs_msg.ResultInfo\"o\n\022Unmute"
  "AllMemberReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.M"
  "sgHeader\022\017\n\007room_id\030\002 \001(\t\022$\n\tmute_type\030\003"
  " \001(\0162\021.ccs_msg.MuteType\"9\n\022UnmuteAllMemb"
  "erRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg.ResultIn"
  "fo\"[\n\021AssignChairmanReq\022\"\n\006header\030\001 \001(\0132"
  "\022.ccs_msg.MsgHeader\022\017\n\007room_id\030\002 \001(\t\022\021\n\t"
  "member_id\030\003 \001(\005\"8\n\021AssignChairmanRes\022#\n\006"
  "result\030\001 \001(\0132\023.ccs_msg.ResultInfo\"h\n\014Tak"
  "ePhotoReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.MsgH"
  "eader\022\017\n\007room_id\030\002 \001(\t\022\020\n\010mixer_id\030\003 \001(\r"
  "\022\021\n\twindow_id\030\004 \001(\r\"3\n\014TakePhotoRes\022#\n\006r"
  "esult\030\001 \001(\0132\023.ccs_msg.ResultInfo*\206\001\n\007Win"
  "Mode\022\017\n\013e_WinNormal\020\000\022\021\n\re_WinExtVideo\020\001"
  "\022\r\n\te_WinPoll\020\002\022\014\n\010e_WinVad\020\003\022\016\n\ne_WinCh"
  "air\020\004\022\024\n\020e_WinAutoFilling\020\005\022\024\n\020e_unkonwn"
  "WinMode\020\006*/\n\027BitrateControlAlgorithm\022\t\n\005"
  "e_VBR\020\000\022\t\n\005e_CBR\020\001*T\n\017ConfControlMode\022\016\n"
  "\ne_FreeMode\020\000\022\026\n\022e_ChairControlMode\020\001\022\031\n"
  "\025e_DirectorControlMode\020\002*<\n\tProtoType\022\016\n"
  "\ne_ProtoVCS\020\000\022\017\n\013e_ProtoH323\020\001\022\016\n\ne_Prot"
  "oSIP\020\002*I\n\nInviteMode\022\022\n\016e_alwaysInvite\020\000"
  "\022\022\n\016e_refuseInvite\020\001\022\023\n\017e_limitedInvite\020"
  "\002*\?\n\023ConferenceMediaType\022\027\n\023e_BothVideoA"
  "ndAudio\020\000\022\017\n\013e_AudioOnly\020\001*G\n\020Connection"
  "Status\022\017\n\013e_Connected\020\000\022\020\n\014e_Connecting\020"
  "\001\022\020\n\014e_Disconnect\020\002*V\n\010RoleType\022\017\n\013e_rol"
  "e_none\020\000\022\022\n\016e_chairmanRole\020\001\022\021\n\re_speake"
  "rRole\020\002\022\022\n\016e_audienceRole\020\003*U\n\rNetworkSt"
  "atus\022\n\n\006e_good\020\000\022\014\n\010e_common\020\001\022\t\n\005e_bad\020"
  "\002\022\016\n\ne_terrible\020\003\022\017\n\013e_max_level\020\004*\320\001\n\010M"
  "uteType\022\022\n\016e_Placeholder1\020\000\022\026\n\022e_MuteAud"
  "ioReceive\020\001\022\027\n\023e_MuteAudioTransmit\020\002\022\022\n\016"
  "e_Placeholder2\020\003\022\026\n\022e_MuteVideoReceive\020\004"
  "\022\022\n\016e_Placeholder3\020\005\022\022\n\016e_Placeholder4\020\006"
  "\022\022\n\016e_Placeholder5\020\007\022\027\n\023e_MuteVideoTrans"
  "mit\020\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ccs_5fconference_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_ccs_5fcommon_5fmessage_2eproto,
};
static ::_pbi::once_flag descriptor_table_ccs_5fconference_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ccs_5fconference_5fmessage_2eproto = {
    false, false, 7173, descriptor_table_protodef_ccs_5fconference_5fmessage_2eproto,
    "ccs_conference_message.proto",
    &descriptor_table_ccs_5fconference_5fmessage_2eproto_once, descriptor_table_ccs_5fconference_5fmessage_2eproto_deps, 1, 42,
    schemas, file_default_instances, TableStruct_ccs_5fconference_5fmessage_2eproto::offsets,
    file_level_metadata_ccs_5fconference_5fmessage_2eproto, file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto,
    file_level_service_descriptors_ccs_5fconference_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ccs_5fconference_5fmessage_2eproto_getter() {
  return &descriptor_table_ccs_5fconference_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ccs_5fconference_5fmessage_2eproto(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
namespace ccs_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[0];
}
bool WinMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BitrateControlAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[1];
}
bool BitrateControlAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[2];
}
bool ConfControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[3];
}
bool ProtoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InviteMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[4];
}
bool InviteMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConferenceMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[5];
}
bool ConferenceMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[6];
}
bool ConnectionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[7];
}
bool RoleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[8];
}
bool NetworkStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MuteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fconference_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fconference_5fmessage_2eproto[9];
}
bool MuteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VideoWindow::_Internal {
 public:
};

VideoWindow::VideoWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.VideoWindow)
}
VideoWindow::VideoWindow(const VideoWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.VideoWindow)
}

inline void VideoWindow::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&member_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(mode_));
}

VideoWindow::~VideoWindow() {
  // @@protoc_insertion_point(destructor:ccs_msg.VideoWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.VideoWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.WinMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::ccs_msg::WinMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.VideoWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 member_id = 1;
  if (this->_internal_member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_member_id(), target);
  }

  // uint32 stream_id = 2;
  if (this->_internal_stream_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stream_id(), target);
  }

  // .ccs_msg.WinMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.VideoWindow)
  return target;
}

size_t VideoWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.VideoWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 member_id = 1;
  if (this->_internal_member_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_member_id());
  }

  // uint32 stream_id = 2;
  if (this->_internal_stream_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_id());
  }

  // .ccs_msg.WinMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoWindow::GetClassData() const { return &_class_data_; }

void VideoWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoWindow *>(to)->MergeFrom(
      static_cast<const VideoWindow &>(from));
}


void VideoWindow::MergeFrom(const VideoWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.VideoWindow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from._internal_stream_id() != 0) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoWindow::CopyFrom(const VideoWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.VideoWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoWindow::IsInitialized() const {
  return true;
}

void VideoWindow::InternalSwap(VideoWindow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoWindow, mode_)
      + sizeof(VideoWindow::mode_)
      - PROTOBUF_FIELD_OFFSET(VideoWindow, member_id_)>(
          reinterpret_cast<char*>(&member_id_),
          reinterpret_cast<char*>(&other->member_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoWindow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[0]);
}

// ===================================================================

class VideoLayout::_Internal {
 public:
};

VideoLayout::VideoLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  win_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.VideoLayout)
}
VideoLayout::VideoLayout(const VideoLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_list_(from.win_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&layout_id_, &from.layout_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&windows_) -
    reinterpret_cast<char*>(&layout_id_)) + sizeof(windows_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.VideoLayout)
}

inline void VideoLayout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layout_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&windows_) -
    reinterpret_cast<char*>(&layout_id_)) + sizeof(windows_));
}

VideoLayout::~VideoLayout() {
  // @@protoc_insertion_point(destructor:ccs_msg.VideoLayout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoLayout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.VideoLayout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_list_.Clear();
  ::memset(&layout_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&windows_) -
      reinterpret_cast<char*>(&layout_id_)) + sizeof(windows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoLayout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ccs_msg.VideoWindow win_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 layout_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          layout_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 windows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          windows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoLayout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.VideoLayout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ccs_msg.VideoWindow win_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_win_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_win_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_layout_id(), target);
  }

  // uint32 windows = 3;
  if (this->_internal_windows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_windows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.VideoLayout)
  return target;
}

size_t VideoLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.VideoLayout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.VideoWindow win_list = 1;
  total_size += 1UL * this->_internal_win_list_size();
  for (const auto& msg : this->win_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layout_id());
  }

  // uint32 windows = 3;
  if (this->_internal_windows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_windows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoLayout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoLayout::GetClassData() const { return &_class_data_; }

void VideoLayout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoLayout *>(to)->MergeFrom(
      static_cast<const VideoLayout &>(from));
}


void VideoLayout::MergeFrom(const VideoLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.VideoLayout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  win_list_.MergeFrom(from.win_list_);
  if (from._internal_layout_id() != 0) {
    _internal_set_layout_id(from._internal_layout_id());
  }
  if (from._internal_windows() != 0) {
    _internal_set_windows(from._internal_windows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoLayout::CopyFrom(const VideoLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.VideoLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoLayout::IsInitialized() const {
  return true;
}

void VideoLayout::InternalSwap(VideoLayout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  win_list_.InternalSwap(&other->win_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoLayout, windows_)
      + sizeof(VideoLayout::windows_)
      - PROTOBUF_FIELD_OFFSET(VideoLayout, layout_id_)>(
          reinterpret_cast<char*>(&layout_id_),
          reinterpret_cast<char*>(&other->layout_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[1]);
}

// ===================================================================

class ITCOSDParams::_Internal {
 public:
};

ITCOSDParams::ITCOSDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.ITCOSDParams)
}
ITCOSDParams::ITCOSDParams(const ITCOSDParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&position_)) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.ITCOSDParams)
}

inline void ITCOSDParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&position_)) + sizeof(pos_y_));
}

ITCOSDParams::~ITCOSDParams() {
  // @@protoc_insertion_point(destructor:ccs_msg.ITCOSDParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ITCOSDParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ITCOSDParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ITCOSDParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.ITCOSDParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&position_)) + sizeof(pos_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ITCOSDParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 global_alpha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          global_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 font_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 font_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          font_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bg_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bg_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 osd_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          osd_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rolling_times = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rolling_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 show_seconds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          show_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 font_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          font_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 en_bold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          en_bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ITCOSDParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.ITCOSDParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // uint32 global_alpha = 2;
  if (this->_internal_global_alpha() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_global_alpha(), target);
  }

  // uint32 font_size = 3;
  if (this->_internal_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_font_size(), target);
  }

  // uint32 font_color = 4;
  if (this->_internal_font_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_font_color(), target);
  }

  // uint32 bg_color = 5;
  if (this->_internal_bg_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bg_color(), target);
  }

  // uint32 osd_enable = 6;
  if (this->_internal_osd_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_osd_enable(), target);
  }

  // uint32 rolling_times = 7;
  if (this->_internal_rolling_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rolling_times(), target);
  }

  // uint32 show_seconds = 8;
  if (this->_internal_show_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_show_seconds(), target);
  }

  // uint32 font_type = 9;
  if (this->_internal_font_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_font_type(), target);
  }

  // uint32 en_bold = 10;
  if (this->_internal_en_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_en_bold(), target);
  }

  // int32 pos_x = 11;
  if (this->_internal_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_pos_x(), target);
  }

  // int32 pos_y = 12;
  if (this->_internal_pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_pos_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.ITCOSDParams)
  return target;
}

size_t ITCOSDParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.ITCOSDParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position());
  }

  // uint32 global_alpha = 2;
  if (this->_internal_global_alpha() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_global_alpha());
  }

  // uint32 font_size = 3;
  if (this->_internal_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_font_size());
  }

  // uint32 font_color = 4;
  if (this->_internal_font_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_font_color());
  }

  // uint32 bg_color = 5;
  if (this->_internal_bg_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bg_color());
  }

  // uint32 osd_enable = 6;
  if (this->_internal_osd_enable() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_osd_enable());
  }

  // uint32 rolling_times = 7;
  if (this->_internal_rolling_times() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rolling_times());
  }

  // uint32 show_seconds = 8;
  if (this->_internal_show_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_show_seconds());
  }

  // uint32 font_type = 9;
  if (this->_internal_font_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_font_type());
  }

  // uint32 en_bold = 10;
  if (this->_internal_en_bold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_en_bold());
  }

  // int32 pos_x = 11;
  if (this->_internal_pos_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos_x());
  }

  // int32 pos_y = 12;
  if (this->_internal_pos_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ITCOSDParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ITCOSDParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ITCOSDParams::GetClassData() const { return &_class_data_; }

void ITCOSDParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ITCOSDParams *>(to)->MergeFrom(
      static_cast<const ITCOSDParams &>(from));
}


void ITCOSDParams::MergeFrom(const ITCOSDParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.ITCOSDParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_global_alpha() != 0) {
    _internal_set_global_alpha(from._internal_global_alpha());
  }
  if (from._internal_font_size() != 0) {
    _internal_set_font_size(from._internal_font_size());
  }
  if (from._internal_font_color() != 0) {
    _internal_set_font_color(from._internal_font_color());
  }
  if (from._internal_bg_color() != 0) {
    _internal_set_bg_color(from._internal_bg_color());
  }
  if (from._internal_osd_enable() != 0) {
    _internal_set_osd_enable(from._internal_osd_enable());
  }
  if (from._internal_rolling_times() != 0) {
    _internal_set_rolling_times(from._internal_rolling_times());
  }
  if (from._internal_show_seconds() != 0) {
    _internal_set_show_seconds(from._internal_show_seconds());
  }
  if (from._internal_font_type() != 0) {
    _internal_set_font_type(from._internal_font_type());
  }
  if (from._internal_en_bold() != 0) {
    _internal_set_en_bold(from._internal_en_bold());
  }
  if (from._internal_pos_x() != 0) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (from._internal_pos_y() != 0) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ITCOSDParams::CopyFrom(const ITCOSDParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.ITCOSDParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ITCOSDParams::IsInitialized() const {
  return true;
}

void ITCOSDParams::InternalSwap(ITCOSDParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ITCOSDParams, pos_y_)
      + sizeof(ITCOSDParams::pos_y_)
      - PROTOBUF_FIELD_OFFSET(ITCOSDParams, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ITCOSDParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[2]);
}

// ===================================================================

class VideoCodec::_Internal {
 public:
};

VideoCodec::VideoCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.VideoCodec)
}
VideoCodec::VideoCodec(const VideoCodec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    codec_.Set(from._internal_codec(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bitrate_, &from.bitrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&bitrate_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.VideoCodec)
}

inline void VideoCodec::SharedCtor() {
codec_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bitrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&bitrate_)) + sizeof(channel_id_));
}

VideoCodec::~VideoCodec() {
  // @@protoc_insertion_point(destructor:ccs_msg.VideoCodec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoCodec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codec_.Destroy();
}

void VideoCodec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.VideoCodec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codec_.ClearToEmpty();
  ::memset(&bitrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&bitrate_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoCodec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.VideoCodec.codec"));
        } else
          goto handle_unusual;
        continue;
      // uint32 bitrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.BitrateControlAlgorithm bitrate_control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bitrate_control(static_cast<::ccs_msg::BitrateControlAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 key_frame_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          key_frame_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_multi_slice_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          enable_multi_slice_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoCodec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.VideoCodec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.VideoCodec.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // uint32 bitrate = 2;
  if (this->_internal_bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bitrate(), target);
  }

  // .ccs_msg.BitrateControlAlgorithm bitrate_control = 3;
  if (this->_internal_bitrate_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bitrate_control(), target);
  }

  // uint32 key_frame_interval = 4;
  if (this->_internal_key_frame_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_key_frame_interval(), target);
  }

  // bool enable_multi_slice_mode = 5;
  if (this->_internal_enable_multi_slice_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_multi_slice_mode(), target);
  }

  // uint32 channel_id = 6;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.VideoCodec)
  return target;
}

size_t VideoCodec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.VideoCodec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  // uint32 bitrate = 2;
  if (this->_internal_bitrate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bitrate());
  }

  // .ccs_msg.BitrateControlAlgorithm bitrate_control = 3;
  if (this->_internal_bitrate_control() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bitrate_control());
  }

  // uint32 key_frame_interval = 4;
  if (this->_internal_key_frame_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_frame_interval());
  }

  // bool enable_multi_slice_mode = 5;
  if (this->_internal_enable_multi_slice_mode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 channel_id = 6;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoCodec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoCodec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoCodec::GetClassData() const { return &_class_data_; }

void VideoCodec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoCodec *>(to)->MergeFrom(
      static_cast<const VideoCodec &>(from));
}


void VideoCodec::MergeFrom(const VideoCodec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.VideoCodec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_codec().empty()) {
    _internal_set_codec(from._internal_codec());
  }
  if (from._internal_bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
  if (from._internal_bitrate_control() != 0) {
    _internal_set_bitrate_control(from._internal_bitrate_control());
  }
  if (from._internal_key_frame_interval() != 0) {
    _internal_set_key_frame_interval(from._internal_key_frame_interval());
  }
  if (from._internal_enable_multi_slice_mode() != 0) {
    _internal_set_enable_multi_slice_mode(from._internal_enable_multi_slice_mode());
  }
  if (from._internal_channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoCodec::CopyFrom(const VideoCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.VideoCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCodec::IsInitialized() const {
  return true;
}

void VideoCodec::InternalSwap(VideoCodec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoCodec, channel_id_)
      + sizeof(VideoCodec::channel_id_)
      - PROTOBUF_FIELD_OFFSET(VideoCodec, bitrate_)>(
          reinterpret_cast<char*>(&bitrate_),
          reinterpret_cast<char*>(&other->bitrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCodec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[3]);
}

// ===================================================================

class MixerParams::_Internal {
 public:
  static const ::ccs_msg::ITCOSDParams& osd_name(const MixerParams* msg);
  static const ::ccs_msg::ITCOSDParams& osd_banner(const MixerParams* msg);
  static const ::ccs_msg::ITCOSDParams& osd_rolling_msg(const MixerParams* msg);
  static const ::ccs_msg::ITCOSDParams& osd_logo(const MixerParams* msg);
  static const ::ccs_msg::ITCOSDParams& osd_subtitles(const MixerParams* msg);
};

const ::ccs_msg::ITCOSDParams&
MixerParams::_Internal::osd_name(const MixerParams* msg) {
  return *msg->osd_name_;
}
const ::ccs_msg::ITCOSDParams&
MixerParams::_Internal::osd_banner(const MixerParams* msg) {
  return *msg->osd_banner_;
}
const ::ccs_msg::ITCOSDParams&
MixerParams::_Internal::osd_rolling_msg(const MixerParams* msg) {
  return *msg->osd_rolling_msg_;
}
const ::ccs_msg::ITCOSDParams&
MixerParams::_Internal::osd_logo(const MixerParams* msg) {
  return *msg->osd_logo_;
}
const ::ccs_msg::ITCOSDParams&
MixerParams::_Internal::osd_subtitles(const MixerParams* msg) {
  return *msg->osd_subtitles_;
}
MixerParams::MixerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  video_codecs_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MixerParams)
}
MixerParams::MixerParams(const MixerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      video_codecs_list_(from.video_codecs_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  banner_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    banner_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_banner_text().empty()) {
    banner_text_.Set(from._internal_banner_text(), 
      GetArenaForAllocation());
  }
  rolling_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rolling_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rolling_text().empty()) {
    rolling_text_.Set(from._internal_rolling_text(), 
      GetArenaForAllocation());
  }
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_osd_name()) {
    osd_name_ = new ::ccs_msg::ITCOSDParams(*from.osd_name_);
  } else {
    osd_name_ = nullptr;
  }
  if (from._internal_has_osd_banner()) {
    osd_banner_ = new ::ccs_msg::ITCOSDParams(*from.osd_banner_);
  } else {
    osd_banner_ = nullptr;
  }
  if (from._internal_has_osd_rolling_msg()) {
    osd_rolling_msg_ = new ::ccs_msg::ITCOSDParams(*from.osd_rolling_msg_);
  } else {
    osd_rolling_msg_ = nullptr;
  }
  if (from._internal_has_osd_logo()) {
    osd_logo_ = new ::ccs_msg::ITCOSDParams(*from.osd_logo_);
  } else {
    osd_logo_ = nullptr;
  }
  if (from._internal_has_osd_subtitles()) {
    osd_subtitles_ = new ::ccs_msg::ITCOSDParams(*from.osd_subtitles_);
  } else {
    osd_subtitles_ = nullptr;
  }
  ::memcpy(&layout_type_, &from.layout_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&channels_count_) -
    reinterpret_cast<char*>(&layout_type_)) + sizeof(channels_count_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MixerParams)
}

inline void MixerParams::SharedCtor() {
banner_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  banner_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rolling_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rolling_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&osd_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channels_count_) -
    reinterpret_cast<char*>(&osd_name_)) + sizeof(channels_count_));
}

MixerParams::~MixerParams() {
  // @@protoc_insertion_point(destructor:ccs_msg.MixerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MixerParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  banner_text_.Destroy();
  rolling_text_.Destroy();
  ip_.Destroy();
  if (this != internal_default_instance()) delete osd_name_;
  if (this != internal_default_instance()) delete osd_banner_;
  if (this != internal_default_instance()) delete osd_rolling_msg_;
  if (this != internal_default_instance()) delete osd_logo_;
  if (this != internal_default_instance()) delete osd_subtitles_;
}

void MixerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MixerParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_codecs_list_.Clear();
  banner_text_.ClearToEmpty();
  rolling_text_.ClearToEmpty();
  ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && osd_name_ != nullptr) {
    delete osd_name_;
  }
  osd_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osd_banner_ != nullptr) {
    delete osd_banner_;
  }
  osd_banner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osd_rolling_msg_ != nullptr) {
    delete osd_rolling_msg_;
  }
  osd_rolling_msg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osd_logo_ != nullptr) {
    delete osd_logo_;
  }
  osd_logo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && osd_subtitles_ != nullptr) {
    delete osd_subtitles_;
  }
  osd_subtitles_ = nullptr;
  ::memset(&layout_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channels_count_) -
      reinterpret_cast<char*>(&layout_type_)) + sizeof(channels_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ITCVideoLayoutType layout_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout_type(static_cast<::ccs_msg::ITCVideoLayoutType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.VideoCodec video_codecs_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video_codecs_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCOSDParams osd_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCOSDParams osd_banner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_banner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCOSDParams osd_rolling_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_rolling_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCOSDParams osd_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_logo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCOSDParams osd_subtitles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_subtitles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string banner_text = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_banner_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MixerParams.banner_text"));
        } else
          goto handle_unusual;
        continue;
      // string rolling_text = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_rolling_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MixerParams.rolling_text"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MixerParams.ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 channels_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          channels_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MixerParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MixerParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ITCVideoLayoutType layout_type = 1;
  if (this->_internal_layout_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layout_type(), target);
  }

  // repeated .ccs_msg.VideoCodec video_codecs_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_video_codecs_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_video_codecs_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCOSDParams osd_name = 3;
  if (this->_internal_has_osd_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::osd_name(this),
        _Internal::osd_name(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCOSDParams osd_banner = 4;
  if (this->_internal_has_osd_banner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::osd_banner(this),
        _Internal::osd_banner(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCOSDParams osd_rolling_msg = 5;
  if (this->_internal_has_osd_rolling_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::osd_rolling_msg(this),
        _Internal::osd_rolling_msg(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCOSDParams osd_logo = 6;
  if (this->_internal_has_osd_logo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::osd_logo(this),
        _Internal::osd_logo(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCOSDParams osd_subtitles = 7;
  if (this->_internal_has_osd_subtitles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::osd_subtitles(this),
        _Internal::osd_subtitles(this).GetCachedSize(), target, stream);
  }

  // string banner_text = 8;
  if (!this->_internal_banner_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_banner_text().data(), static_cast<int>(this->_internal_banner_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MixerParams.banner_text");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_banner_text(), target);
  }

  // string rolling_text = 9;
  if (!this->_internal_rolling_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolling_text().data(), static_cast<int>(this->_internal_rolling_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MixerParams.rolling_text");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_rolling_text(), target);
  }

  // string ip = 10;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MixerParams.ip");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ip(), target);
  }

  // uint32 channels_count = 11;
  if (this->_internal_channels_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_channels_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MixerParams)
  return target;
}

size_t MixerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MixerParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.VideoCodec video_codecs_list = 2;
  total_size += 1UL * this->_internal_video_codecs_list_size();
  for (const auto& msg : this->video_codecs_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string banner_text = 8;
  if (!this->_internal_banner_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_banner_text());
  }

  // string rolling_text = 9;
  if (!this->_internal_rolling_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolling_text());
  }

  // string ip = 10;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .ccs_msg.ITCOSDParams osd_name = 3;
  if (this->_internal_has_osd_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osd_name_);
  }

  // .ccs_msg.ITCOSDParams osd_banner = 4;
  if (this->_internal_has_osd_banner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osd_banner_);
  }

  // .ccs_msg.ITCOSDParams osd_rolling_msg = 5;
  if (this->_internal_has_osd_rolling_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osd_rolling_msg_);
  }

  // .ccs_msg.ITCOSDParams osd_logo = 6;
  if (this->_internal_has_osd_logo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osd_logo_);
  }

  // .ccs_msg.ITCOSDParams osd_subtitles = 7;
  if (this->_internal_has_osd_subtitles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osd_subtitles_);
  }

  // .ccs_msg.ITCVideoLayoutType layout_type = 1;
  if (this->_internal_layout_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_layout_type());
  }

  // uint32 channels_count = 11;
  if (this->_internal_channels_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channels_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MixerParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MixerParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MixerParams::GetClassData() const { return &_class_data_; }

void MixerParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MixerParams *>(to)->MergeFrom(
      static_cast<const MixerParams &>(from));
}


void MixerParams::MergeFrom(const MixerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MixerParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  video_codecs_list_.MergeFrom(from.video_codecs_list_);
  if (!from._internal_banner_text().empty()) {
    _internal_set_banner_text(from._internal_banner_text());
  }
  if (!from._internal_rolling_text().empty()) {
    _internal_set_rolling_text(from._internal_rolling_text());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_osd_name()) {
    _internal_mutable_osd_name()->::ccs_msg::ITCOSDParams::MergeFrom(from._internal_osd_name());
  }
  if (from._internal_has_osd_banner()) {
    _internal_mutable_osd_banner()->::ccs_msg::ITCOSDParams::MergeFrom(from._internal_osd_banner());
  }
  if (from._internal_has_osd_rolling_msg()) {
    _internal_mutable_osd_rolling_msg()->::ccs_msg::ITCOSDParams::MergeFrom(from._internal_osd_rolling_msg());
  }
  if (from._internal_has_osd_logo()) {
    _internal_mutable_osd_logo()->::ccs_msg::ITCOSDParams::MergeFrom(from._internal_osd_logo());
  }
  if (from._internal_has_osd_subtitles()) {
    _internal_mutable_osd_subtitles()->::ccs_msg::ITCOSDParams::MergeFrom(from._internal_osd_subtitles());
  }
  if (from._internal_layout_type() != 0) {
    _internal_set_layout_type(from._internal_layout_type());
  }
  if (from._internal_channels_count() != 0) {
    _internal_set_channels_count(from._internal_channels_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MixerParams::CopyFrom(const MixerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MixerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixerParams::IsInitialized() const {
  return true;
}

void MixerParams::InternalSwap(MixerParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  video_codecs_list_.InternalSwap(&other->video_codecs_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &banner_text_, lhs_arena,
      &other->banner_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rolling_text_, lhs_arena,
      &other->rolling_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MixerParams, channels_count_)
      + sizeof(MixerParams::channels_count_)
      - PROTOBUF_FIELD_OFFSET(MixerParams, osd_name_)>(
          reinterpret_cast<char*>(&osd_name_),
          reinterpret_cast<char*>(&other->osd_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MixerParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[4]);
}

// ===================================================================

class VideoParams::_Internal {
 public:
};

VideoParams::VideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mixer_params_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.VideoParams)
}
VideoParams::VideoParams(const VideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mixer_params_list_(from.mixer_params_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    codec_.Set(from._internal_codec(), 
      GetArenaForAllocation());
  }
  ::memcpy(&default_band_width_, &from.default_band_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_mixer_count_) -
    reinterpret_cast<char*>(&default_band_width_)) + sizeof(video_mixer_count_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.VideoParams)
}

inline void VideoParams::SharedCtor() {
codec_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_band_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&video_mixer_count_) -
    reinterpret_cast<char*>(&default_band_width_)) + sizeof(video_mixer_count_));
}

VideoParams::~VideoParams() {
  // @@protoc_insertion_point(destructor:ccs_msg.VideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  codec_.Destroy();
}

void VideoParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.VideoParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mixer_params_list_.Clear();
  codec_.ClearToEmpty();
  ::memset(&default_band_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_mixer_count_) -
      reinterpret_cast<char*>(&default_band_width_)) + sizeof(video_mixer_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.VideoParams.codec"));
        } else
          goto handle_unusual;
        continue;
      // uint32 default_band_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          default_band_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.MixerParams mixer_params_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mixer_params_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 video_mixer_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          video_mixer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.VideoParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.VideoParams.codec");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_codec(), target);
  }

  // uint32 default_band_width = 2;
  if (this->_internal_default_band_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_default_band_width(), target);
  }

  // uint32 max_bandwidth = 3;
  if (this->_internal_max_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_bandwidth(), target);
  }

  // repeated .ccs_msg.MixerParams mixer_params_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mixer_params_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_mixer_params_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 video_mixer_count = 5;
  if (this->_internal_video_mixer_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_video_mixer_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.VideoParams)
  return target;
}

size_t VideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.VideoParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.MixerParams mixer_params_list = 4;
  total_size += 1UL * this->_internal_mixer_params_list_size();
  for (const auto& msg : this->mixer_params_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string codec = 1;
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  // uint32 default_band_width = 2;
  if (this->_internal_default_band_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_default_band_width());
  }

  // uint32 max_bandwidth = 3;
  if (this->_internal_max_bandwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_bandwidth());
  }

  // uint32 video_mixer_count = 5;
  if (this->_internal_video_mixer_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_video_mixer_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoParams::GetClassData() const { return &_class_data_; }

void VideoParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoParams *>(to)->MergeFrom(
      static_cast<const VideoParams &>(from));
}


void VideoParams::MergeFrom(const VideoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.VideoParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mixer_params_list_.MergeFrom(from.mixer_params_list_);
  if (!from._internal_codec().empty()) {
    _internal_set_codec(from._internal_codec());
  }
  if (from._internal_default_band_width() != 0) {
    _internal_set_default_band_width(from._internal_default_band_width());
  }
  if (from._internal_max_bandwidth() != 0) {
    _internal_set_max_bandwidth(from._internal_max_bandwidth());
  }
  if (from._internal_video_mixer_count() != 0) {
    _internal_set_video_mixer_count(from._internal_video_mixer_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoParams::CopyFrom(const VideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.VideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoParams::IsInitialized() const {
  return true;
}

void VideoParams::InternalSwap(VideoParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mixer_params_list_.InternalSwap(&other->mixer_params_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoParams, video_mixer_count_)
      + sizeof(VideoParams::video_mixer_count_)
      - PROTOBUF_FIELD_OFFSET(VideoParams, default_band_width_)>(
          reinterpret_cast<char*>(&default_band_width_),
          reinterpret_cast<char*>(&other->default_band_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[5]);
}

// ===================================================================

class ConfInfo::_Internal {
 public:
};

ConfInfo::ConfInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.ConfInfo)
}
ConfInfo::ConfInfo(const ConfInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meeting_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    meeting_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meeting_id().empty()) {
    meeting_id_.Set(from._internal_meeting_id(), 
      GetArenaForAllocation());
  }
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    room_name_.Set(from._internal_room_name(), 
      GetArenaForAllocation());
  }
  creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(from._internal_creator(), 
      GetArenaForAllocation());
  }
  start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_time().empty()) {
    start_time_.Set(from._internal_start_time(), 
      GetArenaForAllocation());
  }
  end_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    end_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_time().empty()) {
    end_time_.Set(from._internal_end_time(), 
      GetArenaForAllocation());
  }
  conf_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conf_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conf_pw().empty()) {
    conf_pw_.Set(from._internal_conf_pw(), 
      GetArenaForAllocation());
  }
  publish_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    publish_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publish_path().empty()) {
    publish_path_.Set(from._internal_publish_path(), 
      GetArenaForAllocation());
  }
  rtmp_play_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rtmp_play_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rtmp_play_path().empty()) {
    rtmp_play_path_.Set(from._internal_rtmp_play_path(), 
      GetArenaForAllocation());
  }
  hls_play_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hls_play_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hls_play_path().empty()) {
    hls_play_path_.Set(from._internal_hls_play_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&time_interval_, &from.time_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_external_live_) -
    reinterpret_cast<char*>(&time_interval_)) + sizeof(is_external_live_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.ConfInfo)
}

inline void ConfInfo::SharedCtor() {
meeting_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  meeting_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
room_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
end_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  end_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
conf_pw_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conf_pw_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
publish_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  publish_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rtmp_play_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rtmp_play_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hls_play_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hls_play_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_external_live_) -
    reinterpret_cast<char*>(&time_interval_)) + sizeof(is_external_live_));
}

ConfInfo::~ConfInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.ConfInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  meeting_id_.Destroy();
  room_id_.Destroy();
  room_name_.Destroy();
  creator_.Destroy();
  start_time_.Destroy();
  end_time_.Destroy();
  conf_pw_.Destroy();
  publish_path_.Destroy();
  rtmp_play_path_.Destroy();
  hls_play_path_.Destroy();
}

void ConfInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.ConfInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meeting_id_.ClearToEmpty();
  room_id_.ClearToEmpty();
  room_name_.ClearToEmpty();
  creator_.ClearToEmpty();
  start_time_.ClearToEmpty();
  end_time_.ClearToEmpty();
  conf_pw_.ClearToEmpty();
  publish_path_.ClearToEmpty();
  rtmp_play_path_.ClearToEmpty();
  hls_play_path_.ClearToEmpty();
  ::memset(&time_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_external_live_) -
      reinterpret_cast<char*>(&time_interval_)) + sizeof(is_external_live_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string meeting_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_meeting_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.meeting_id"));
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.room_id"));
        } else
          goto handle_unusual;
        continue;
      // string room_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string creator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.creator"));
        } else
          goto handle_unusual;
        continue;
      // uint32 time_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          time_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_members = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          active_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_member_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          max_member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ConfControlMode conference_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_conference_mode(static_cast<::ccs_msg::ConfControlMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_recording = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          is_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_start_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.start_time"));
        } else
          goto handle_unusual;
        continue;
      // string end_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_end_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.end_time"));
        } else
          goto handle_unusual;
        continue;
      // bool is_living = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          is_living_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ProtoType proto_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto_type(static_cast<::ccs_msg::ProtoType>(val));
        } else
          goto handle_unusual;
        continue;
      // string conf_pw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_conf_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.conf_pw"));
        } else
          goto handle_unusual;
        continue;
      // bool is_virtual = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.InviteMode invite_mode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invite_mode(static_cast<::ccs_msg::InviteMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 max_invite_times = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          max_invite_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_VCS_manually_send_H239 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          enable_vcs_manually_send_h239_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enterprise_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          enterprise_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_linux_members = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          active_linux_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_windows_members = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          active_windows_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_mac_members = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          active_mac_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_android_members = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          active_android_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_IOS_members = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          active_ios_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_external_live = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          is_external_live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string publish_path = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_publish_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.publish_path"));
        } else
          goto handle_unusual;
        continue;
      // string rtmp_play_path = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_rtmp_play_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.rtmp_play_path"));
        } else
          goto handle_unusual;
        continue;
      // string hls_play_path = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_hls_play_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.ConfInfo.hls_play_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.ConfInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string meeting_id = 1;
  if (!this->_internal_meeting_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_meeting_id().data(), static_cast<int>(this->_internal_meeting_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.meeting_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_meeting_id(), target);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.room_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_name(), target);
  }

  // string creator = 4;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.creator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_creator(), target);
  }

  // uint32 time_interval = 5;
  if (this->_internal_time_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_interval(), target);
  }

  // uint32 active_members = 6;
  if (this->_internal_active_members() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_active_members(), target);
  }

  // uint32 max_member_count = 7;
  if (this->_internal_max_member_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_member_count(), target);
  }

  // .ccs_msg.ConfControlMode conference_mode = 8;
  if (this->_internal_conference_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_conference_mode(), target);
  }

  // bool is_recording = 9;
  if (this->_internal_is_recording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_recording(), target);
  }

  // string start_time = 10;
  if (!this->_internal_start_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.start_time");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_start_time(), target);
  }

  // string end_time = 11;
  if (!this->_internal_end_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_time().data(), static_cast<int>(this->_internal_end_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.end_time");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_end_time(), target);
  }

  // bool is_living = 12;
  if (this->_internal_is_living() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_living(), target);
  }

  // .ccs_msg.ProtoType proto_type = 13;
  if (this->_internal_proto_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_proto_type(), target);
  }

  // string conf_pw = 14;
  if (!this->_internal_conf_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conf_pw().data(), static_cast<int>(this->_internal_conf_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.conf_pw");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_conf_pw(), target);
  }

  // bool is_virtual = 15;
  if (this->_internal_is_virtual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_virtual(), target);
  }

  // .ccs_msg.InviteMode invite_mode = 16;
  if (this->_internal_invite_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_invite_mode(), target);
  }

  // uint32 max_invite_times = 17;
  if (this->_internal_max_invite_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_invite_times(), target);
  }

  // bool enable_VCS_manually_send_H239 = 18;
  if (this->_internal_enable_vcs_manually_send_h239() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_enable_vcs_manually_send_h239(), target);
  }

  // uint32 enterprise_id = 19;
  if (this->_internal_enterprise_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_enterprise_id(), target);
  }

  // uint32 active_linux_members = 20;
  if (this->_internal_active_linux_members() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_active_linux_members(), target);
  }

  // uint32 active_windows_members = 21;
  if (this->_internal_active_windows_members() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_active_windows_members(), target);
  }

  // uint32 active_mac_members = 22;
  if (this->_internal_active_mac_members() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_active_mac_members(), target);
  }

  // uint32 active_android_members = 23;
  if (this->_internal_active_android_members() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_active_android_members(), target);
  }

  // uint32 active_IOS_members = 24;
  if (this->_internal_active_ios_members() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_active_ios_members(), target);
  }

  // bool is_external_live = 25;
  if (this->_internal_is_external_live() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_external_live(), target);
  }

  // string publish_path = 26;
  if (!this->_internal_publish_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publish_path().data(), static_cast<int>(this->_internal_publish_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.publish_path");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_publish_path(), target);
  }

  // string rtmp_play_path = 27;
  if (!this->_internal_rtmp_play_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rtmp_play_path().data(), static_cast<int>(this->_internal_rtmp_play_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.rtmp_play_path");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_rtmp_play_path(), target);
  }

  // string hls_play_path = 28;
  if (!this->_internal_hls_play_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hls_play_path().data(), static_cast<int>(this->_internal_hls_play_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.ConfInfo.hls_play_path");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_hls_play_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.ConfInfo)
  return target;
}

size_t ConfInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.ConfInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string meeting_id = 1;
  if (!this->_internal_meeting_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meeting_id());
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string creator = 4;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string start_time = 10;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_time());
  }

  // string end_time = 11;
  if (!this->_internal_end_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_time());
  }

  // string conf_pw = 14;
  if (!this->_internal_conf_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conf_pw());
  }

  // string publish_path = 26;
  if (!this->_internal_publish_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publish_path());
  }

  // string rtmp_play_path = 27;
  if (!this->_internal_rtmp_play_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rtmp_play_path());
  }

  // string hls_play_path = 28;
  if (!this->_internal_hls_play_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hls_play_path());
  }

  // uint32 time_interval = 5;
  if (this->_internal_time_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_interval());
  }

  // uint32 active_members = 6;
  if (this->_internal_active_members() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_members());
  }

  // uint32 max_member_count = 7;
  if (this->_internal_max_member_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_member_count());
  }

  // .ccs_msg.ConfControlMode conference_mode = 8;
  if (this->_internal_conference_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_conference_mode());
  }

  // .ccs_msg.ProtoType proto_type = 13;
  if (this->_internal_proto_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_proto_type());
  }

  // bool is_recording = 9;
  if (this->_internal_is_recording() != 0) {
    total_size += 1 + 1;
  }

  // bool is_living = 12;
  if (this->_internal_is_living() != 0) {
    total_size += 1 + 1;
  }

  // bool is_virtual = 15;
  if (this->_internal_is_virtual() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_VCS_manually_send_H239 = 18;
  if (this->_internal_enable_vcs_manually_send_h239() != 0) {
    total_size += 2 + 1;
  }

  // .ccs_msg.InviteMode invite_mode = 16;
  if (this->_internal_invite_mode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_invite_mode());
  }

  // uint32 max_invite_times = 17;
  if (this->_internal_max_invite_times() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_max_invite_times());
  }

  // uint32 enterprise_id = 19;
  if (this->_internal_enterprise_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_enterprise_id());
  }

  // uint32 active_linux_members = 20;
  if (this->_internal_active_linux_members() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_active_linux_members());
  }

  // uint32 active_windows_members = 21;
  if (this->_internal_active_windows_members() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_active_windows_members());
  }

  // uint32 active_mac_members = 22;
  if (this->_internal_active_mac_members() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_active_mac_members());
  }

  // uint32 active_android_members = 23;
  if (this->_internal_active_android_members() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_active_android_members());
  }

  // uint32 active_IOS_members = 24;
  if (this->_internal_active_ios_members() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_active_ios_members());
  }

  // bool is_external_live = 25;
  if (this->_internal_is_external_live() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfInfo::GetClassData() const { return &_class_data_; }

void ConfInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfInfo *>(to)->MergeFrom(
      static_cast<const ConfInfo &>(from));
}


void ConfInfo::MergeFrom(const ConfInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.ConfInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_meeting_id().empty()) {
    _internal_set_meeting_id(from._internal_meeting_id());
  }
  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_room_name().empty()) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_start_time().empty()) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (!from._internal_end_time().empty()) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (!from._internal_conf_pw().empty()) {
    _internal_set_conf_pw(from._internal_conf_pw());
  }
  if (!from._internal_publish_path().empty()) {
    _internal_set_publish_path(from._internal_publish_path());
  }
  if (!from._internal_rtmp_play_path().empty()) {
    _internal_set_rtmp_play_path(from._internal_rtmp_play_path());
  }
  if (!from._internal_hls_play_path().empty()) {
    _internal_set_hls_play_path(from._internal_hls_play_path());
  }
  if (from._internal_time_interval() != 0) {
    _internal_set_time_interval(from._internal_time_interval());
  }
  if (from._internal_active_members() != 0) {
    _internal_set_active_members(from._internal_active_members());
  }
  if (from._internal_max_member_count() != 0) {
    _internal_set_max_member_count(from._internal_max_member_count());
  }
  if (from._internal_conference_mode() != 0) {
    _internal_set_conference_mode(from._internal_conference_mode());
  }
  if (from._internal_proto_type() != 0) {
    _internal_set_proto_type(from._internal_proto_type());
  }
  if (from._internal_is_recording() != 0) {
    _internal_set_is_recording(from._internal_is_recording());
  }
  if (from._internal_is_living() != 0) {
    _internal_set_is_living(from._internal_is_living());
  }
  if (from._internal_is_virtual() != 0) {
    _internal_set_is_virtual(from._internal_is_virtual());
  }
  if (from._internal_enable_vcs_manually_send_h239() != 0) {
    _internal_set_enable_vcs_manually_send_h239(from._internal_enable_vcs_manually_send_h239());
  }
  if (from._internal_invite_mode() != 0) {
    _internal_set_invite_mode(from._internal_invite_mode());
  }
  if (from._internal_max_invite_times() != 0) {
    _internal_set_max_invite_times(from._internal_max_invite_times());
  }
  if (from._internal_enterprise_id() != 0) {
    _internal_set_enterprise_id(from._internal_enterprise_id());
  }
  if (from._internal_active_linux_members() != 0) {
    _internal_set_active_linux_members(from._internal_active_linux_members());
  }
  if (from._internal_active_windows_members() != 0) {
    _internal_set_active_windows_members(from._internal_active_windows_members());
  }
  if (from._internal_active_mac_members() != 0) {
    _internal_set_active_mac_members(from._internal_active_mac_members());
  }
  if (from._internal_active_android_members() != 0) {
    _internal_set_active_android_members(from._internal_active_android_members());
  }
  if (from._internal_active_ios_members() != 0) {
    _internal_set_active_ios_members(from._internal_active_ios_members());
  }
  if (from._internal_is_external_live() != 0) {
    _internal_set_is_external_live(from._internal_is_external_live());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfInfo::CopyFrom(const ConfInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.ConfInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfInfo::IsInitialized() const {
  return true;
}

void ConfInfo::InternalSwap(ConfInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &meeting_id_, lhs_arena,
      &other->meeting_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_name_, lhs_arena,
      &other->room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &start_time_, lhs_arena,
      &other->start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &end_time_, lhs_arena,
      &other->end_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conf_pw_, lhs_arena,
      &other->conf_pw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &publish_path_, lhs_arena,
      &other->publish_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rtmp_play_path_, lhs_arena,
      &other->rtmp_play_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hls_play_path_, lhs_arena,
      &other->hls_play_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfInfo, is_external_live_)
      + sizeof(ConfInfo::is_external_live_)
      - PROTOBUF_FIELD_OFFSET(ConfInfo, time_interval_)>(
          reinterpret_cast<char*>(&time_interval_),
          reinterpret_cast<char*>(&other->time_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[6]);
}

// ===================================================================

class CreateMeetingReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const CreateMeetingReq* msg);
  static const ::ccs_msg::VideoCodec& ex_video_codec(const CreateMeetingReq* msg);
  static const ::ccs_msg::VideoParams& video_params(const CreateMeetingReq* msg);
  static const ::ccs_msg::VideoLayout& layout(const CreateMeetingReq* msg);
};

const ::ccs_msg::MsgHeader&
CreateMeetingReq::_Internal::header(const CreateMeetingReq* msg) {
  return *msg->header_;
}
const ::ccs_msg::VideoCodec&
CreateMeetingReq::_Internal::ex_video_codec(const CreateMeetingReq* msg) {
  return *msg->ex_video_codec_;
}
const ::ccs_msg::VideoParams&
CreateMeetingReq::_Internal::video_params(const CreateMeetingReq* msg) {
  return *msg->video_params_;
}
const ::ccs_msg::VideoLayout&
CreateMeetingReq::_Internal::layout(const CreateMeetingReq* msg) {
  return *msg->layout_;
}
void CreateMeetingReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
CreateMeetingReq::CreateMeetingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.CreateMeetingReq)
}
CreateMeetingReq::CreateMeetingReq(const CreateMeetingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  meeting_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    meeting_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meeting_id().empty()) {
    meeting_id_.Set(from._internal_meeting_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(from._internal_creator(), 
      GetArenaForAllocation());
  }
  conf_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conf_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conf_password().empty()) {
    conf_password_.Set(from._internal_conf_password(), 
      GetArenaForAllocation());
  }
  audio_codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    audio_codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_codec().empty()) {
    audio_codec_.Set(from._internal_audio_codec(), 
      GetArenaForAllocation());
  }
  start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_time().empty()) {
    start_time_.Set(from._internal_start_time(), 
      GetArenaForAllocation());
  }
  end_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    end_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_time().empty()) {
    end_time_.Set(from._internal_end_time(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_ex_video_codec()) {
    ex_video_codec_ = new ::ccs_msg::VideoCodec(*from.ex_video_codec_);
  } else {
    ex_video_codec_ = nullptr;
  }
  if (from._internal_has_video_params()) {
    video_params_ = new ::ccs_msg::VideoParams(*from.video_params_);
  } else {
    video_params_ = nullptr;
  }
  if (from._internal_has_layout()) {
    layout_ = new ::ccs_msg::VideoLayout(*from.layout_);
  } else {
    layout_ = nullptr;
  }
  ::memcpy(&invite_mode_, &from.invite_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&proto_type_) -
    reinterpret_cast<char*>(&invite_mode_)) + sizeof(proto_type_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.CreateMeetingReq)
}

inline void CreateMeetingReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
meeting_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  meeting_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
conf_password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conf_password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
audio_codec_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  audio_codec_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
end_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  end_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proto_type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(proto_type_));
}

CreateMeetingReq::~CreateMeetingReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.CreateMeetingReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateMeetingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  meeting_id_.Destroy();
  name_.Destroy();
  creator_.Destroy();
  conf_password_.Destroy();
  audio_codec_.Destroy();
  start_time_.Destroy();
  end_time_.Destroy();
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ex_video_codec_;
  if (this != internal_default_instance()) delete video_params_;
  if (this != internal_default_instance()) delete layout_;
}

void CreateMeetingReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateMeetingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.CreateMeetingReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  meeting_id_.ClearToEmpty();
  name_.ClearToEmpty();
  creator_.ClearToEmpty();
  conf_password_.ClearToEmpty();
  audio_codec_.ClearToEmpty();
  start_time_.ClearToEmpty();
  end_time_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ex_video_codec_ != nullptr) {
    delete ex_video_codec_;
  }
  ex_video_codec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && video_params_ != nullptr) {
    delete video_params_;
  }
  video_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
  ::memset(&invite_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proto_type_) -
      reinterpret_cast<char*>(&invite_mode_)) + sizeof(proto_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMeetingReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.room_ID"));
        } else
          goto handle_unusual;
        continue;
      // string meeting_ID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_meeting_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.meeting_ID"));
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.name"));
        } else
          goto handle_unusual;
        continue;
      // string creator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.creator"));
        } else
          goto handle_unusual;
        continue;
      // string conf_Password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_conf_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.conf_Password"));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.InviteMode invite_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invite_mode(static_cast<::ccs_msg::InviteMode>(val));
        } else
          goto handle_unusual;
        continue;
      // string audio_codec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_audio_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.audio_codec"));
        } else
          goto handle_unusual;
        continue;
      // uint32 member_count_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          member_count_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ConferenceMediaType conf_media_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_conf_media_type(static_cast<::ccs_msg::ConferenceMediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ProtoType proto_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto_type(static_cast<::ccs_msg::ProtoType>(val));
        } else
          goto handle_unusual;
        continue;
      // string start_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_start_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.start_time"));
        } else
          goto handle_unusual;
        continue;
      // string end_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_end_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingReq.end_time"));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.VideoCodec ex_video_codec = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex_video_codec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.VideoParams video_params = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.VideoLayout layout = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateMeetingReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.CreateMeetingReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_ID = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.room_ID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // string meeting_ID = 3;
  if (!this->_internal_meeting_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_meeting_id().data(), static_cast<int>(this->_internal_meeting_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.meeting_ID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_meeting_id(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string creator = 5;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.creator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_creator(), target);
  }

  // string conf_Password = 6;
  if (!this->_internal_conf_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conf_password().data(), static_cast<int>(this->_internal_conf_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.conf_Password");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_conf_password(), target);
  }

  // .ccs_msg.InviteMode invite_mode = 7;
  if (this->_internal_invite_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_invite_mode(), target);
  }

  // string audio_codec = 8;
  if (!this->_internal_audio_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_codec().data(), static_cast<int>(this->_internal_audio_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.audio_codec");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_audio_codec(), target);
  }

  // uint32 member_count_limit = 9;
  if (this->_internal_member_count_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_member_count_limit(), target);
  }

  // .ccs_msg.ConferenceMediaType conf_media_type = 10;
  if (this->_internal_conf_media_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_conf_media_type(), target);
  }

  // .ccs_msg.ProtoType proto_type = 11;
  if (this->_internal_proto_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_proto_type(), target);
  }

  // string start_time = 12;
  if (!this->_internal_start_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.start_time");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_start_time(), target);
  }

  // string end_time = 13;
  if (!this->_internal_end_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_time().data(), static_cast<int>(this->_internal_end_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingReq.end_time");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_end_time(), target);
  }

  // .ccs_msg.VideoCodec ex_video_codec = 14;
  if (this->_internal_has_ex_video_codec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ex_video_codec(this),
        _Internal::ex_video_codec(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.VideoParams video_params = 15;
  if (this->_internal_has_video_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::video_params(this),
        _Internal::video_params(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.VideoLayout layout = 16;
  if (this->_internal_has_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::layout(this),
        _Internal::layout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.CreateMeetingReq)
  return target;
}

size_t CreateMeetingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.CreateMeetingReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_ID = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string meeting_ID = 3;
  if (!this->_internal_meeting_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meeting_id());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string creator = 5;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string conf_Password = 6;
  if (!this->_internal_conf_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conf_password());
  }

  // string audio_codec = 8;
  if (!this->_internal_audio_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_codec());
  }

  // string start_time = 12;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_time());
  }

  // string end_time = 13;
  if (!this->_internal_end_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_time());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.VideoCodec ex_video_codec = 14;
  if (this->_internal_has_ex_video_codec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_video_codec_);
  }

  // .ccs_msg.VideoParams video_params = 15;
  if (this->_internal_has_video_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_params_);
  }

  // .ccs_msg.VideoLayout layout = 16;
  if (this->_internal_has_layout()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_);
  }

  // .ccs_msg.InviteMode invite_mode = 7;
  if (this->_internal_invite_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_invite_mode());
  }

  // uint32 member_count_limit = 9;
  if (this->_internal_member_count_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_count_limit());
  }

  // .ccs_msg.ConferenceMediaType conf_media_type = 10;
  if (this->_internal_conf_media_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_conf_media_type());
  }

  // .ccs_msg.ProtoType proto_type = 11;
  if (this->_internal_proto_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_proto_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateMeetingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateMeetingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateMeetingReq::GetClassData() const { return &_class_data_; }

void CreateMeetingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateMeetingReq *>(to)->MergeFrom(
      static_cast<const CreateMeetingReq &>(from));
}


void CreateMeetingReq::MergeFrom(const CreateMeetingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.CreateMeetingReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_meeting_id().empty()) {
    _internal_set_meeting_id(from._internal_meeting_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_conf_password().empty()) {
    _internal_set_conf_password(from._internal_conf_password());
  }
  if (!from._internal_audio_codec().empty()) {
    _internal_set_audio_codec(from._internal_audio_codec());
  }
  if (!from._internal_start_time().empty()) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (!from._internal_end_time().empty()) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_ex_video_codec()) {
    _internal_mutable_ex_video_codec()->::ccs_msg::VideoCodec::MergeFrom(from._internal_ex_video_codec());
  }
  if (from._internal_has_video_params()) {
    _internal_mutable_video_params()->::ccs_msg::VideoParams::MergeFrom(from._internal_video_params());
  }
  if (from._internal_has_layout()) {
    _internal_mutable_layout()->::ccs_msg::VideoLayout::MergeFrom(from._internal_layout());
  }
  if (from._internal_invite_mode() != 0) {
    _internal_set_invite_mode(from._internal_invite_mode());
  }
  if (from._internal_member_count_limit() != 0) {
    _internal_set_member_count_limit(from._internal_member_count_limit());
  }
  if (from._internal_conf_media_type() != 0) {
    _internal_set_conf_media_type(from._internal_conf_media_type());
  }
  if (from._internal_proto_type() != 0) {
    _internal_set_proto_type(from._internal_proto_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateMeetingReq::CopyFrom(const CreateMeetingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.CreateMeetingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMeetingReq::IsInitialized() const {
  return true;
}

void CreateMeetingReq::InternalSwap(CreateMeetingReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &meeting_id_, lhs_arena,
      &other->meeting_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conf_password_, lhs_arena,
      &other->conf_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &audio_codec_, lhs_arena,
      &other->audio_codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &start_time_, lhs_arena,
      &other->start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &end_time_, lhs_arena,
      &other->end_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateMeetingReq, proto_type_)
      + sizeof(CreateMeetingReq::proto_type_)
      - PROTOBUF_FIELD_OFFSET(CreateMeetingReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMeetingReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[7]);
}

// ===================================================================

class CreateMeetingRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const CreateMeetingRes* msg);
};

const ::ccs_msg::ResultInfo&
CreateMeetingRes::_Internal::result(const CreateMeetingRes* msg) {
  return *msg->result_;
}
void CreateMeetingRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
CreateMeetingRes::CreateMeetingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.CreateMeetingRes)
}
CreateMeetingRes::CreateMeetingRes(const CreateMeetingRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  meeting_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    meeting_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meeting_id().empty()) {
    meeting_id_.Set(from._internal_meeting_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.CreateMeetingRes)
}

inline void CreateMeetingRes::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
meeting_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  meeting_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = nullptr;
}

CreateMeetingRes::~CreateMeetingRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.CreateMeetingRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateMeetingRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  meeting_id_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void CreateMeetingRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateMeetingRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.CreateMeetingRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  meeting_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMeetingRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingRes.room_id"));
        } else
          goto handle_unusual;
        continue;
      // string meeting_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_meeting_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CreateMeetingRes.meeting_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateMeetingRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.CreateMeetingRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingRes.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // string meeting_id = 3;
  if (!this->_internal_meeting_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_meeting_id().data(), static_cast<int>(this->_internal_meeting_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CreateMeetingRes.meeting_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_meeting_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.CreateMeetingRes)
  return target;
}

size_t CreateMeetingRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.CreateMeetingRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string meeting_id = 3;
  if (!this->_internal_meeting_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meeting_id());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateMeetingRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateMeetingRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateMeetingRes::GetClassData() const { return &_class_data_; }

void CreateMeetingRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateMeetingRes *>(to)->MergeFrom(
      static_cast<const CreateMeetingRes &>(from));
}


void CreateMeetingRes::MergeFrom(const CreateMeetingRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.CreateMeetingRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_meeting_id().empty()) {
    _internal_set_meeting_id(from._internal_meeting_id());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateMeetingRes::CopyFrom(const CreateMeetingRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.CreateMeetingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMeetingRes::IsInitialized() const {
  return true;
}

void CreateMeetingRes::InternalSwap(CreateMeetingRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &meeting_id_, lhs_arena,
      &other->meeting_id_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMeetingRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[8]);
}

// ===================================================================

class GetMeetingListReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const GetMeetingListReq* msg);
};

const ::ccs_msg::MsgHeader&
GetMeetingListReq::_Internal::header(const GetMeetingListReq* msg) {
  return *msg->header_;
}
void GetMeetingListReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetMeetingListReq::GetMeetingListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.GetMeetingListReq)
}
GetMeetingListReq::GetMeetingListReq(const GetMeetingListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.GetMeetingListReq)
}

inline void GetMeetingListReq::SharedCtor() {
header_ = nullptr;
}

GetMeetingListReq::~GetMeetingListReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.GetMeetingListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMeetingListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetMeetingListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMeetingListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.GetMeetingListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMeetingListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMeetingListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.GetMeetingListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.GetMeetingListReq)
  return target;
}

size_t GetMeetingListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.GetMeetingListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMeetingListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMeetingListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMeetingListReq::GetClassData() const { return &_class_data_; }

void GetMeetingListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMeetingListReq *>(to)->MergeFrom(
      static_cast<const GetMeetingListReq &>(from));
}


void GetMeetingListReq::MergeFrom(const GetMeetingListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.GetMeetingListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMeetingListReq::CopyFrom(const GetMeetingListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.GetMeetingListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMeetingListReq::IsInitialized() const {
  return true;
}

void GetMeetingListReq::InternalSwap(GetMeetingListReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMeetingListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[9]);
}

// ===================================================================

class ConferenceListRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const ConferenceListRes* msg);
};

const ::ccs_msg::ResultInfo&
ConferenceListRes::_Internal::result(const ConferenceListRes* msg) {
  return *msg->result_;
}
void ConferenceListRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
ConferenceListRes::ConferenceListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  conf_info_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.ConferenceListRes)
}
ConferenceListRes::ConferenceListRes(const ConferenceListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conf_info_list_(from.conf_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.ConferenceListRes)
}

inline void ConferenceListRes::SharedCtor() {
result_ = nullptr;
}

ConferenceListRes::~ConferenceListRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.ConferenceListRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConferenceListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void ConferenceListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConferenceListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.ConferenceListRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conf_info_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConferenceListRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.ConfInfo conf_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conf_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConferenceListRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.ConferenceListRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .ccs_msg.ConfInfo conf_info_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conf_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_conf_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.ConferenceListRes)
  return target;
}

size_t ConferenceListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.ConferenceListRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.ConfInfo conf_info_list = 2;
  total_size += 1UL * this->_internal_conf_info_list_size();
  for (const auto& msg : this->conf_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConferenceListRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConferenceListRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConferenceListRes::GetClassData() const { return &_class_data_; }

void ConferenceListRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConferenceListRes *>(to)->MergeFrom(
      static_cast<const ConferenceListRes &>(from));
}


void ConferenceListRes::MergeFrom(const ConferenceListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.ConferenceListRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  conf_info_list_.MergeFrom(from.conf_info_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConferenceListRes::CopyFrom(const ConferenceListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.ConferenceListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConferenceListRes::IsInitialized() const {
  return true;
}

void ConferenceListRes::InternalSwap(ConferenceListRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  conf_info_list_.InternalSwap(&other->conf_info_list_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConferenceListRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[10]);
}

// ===================================================================

class InviteMemberReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const InviteMemberReq* msg);
};

const ::ccs_msg::MsgHeader&
InviteMemberReq::_Internal::header(const InviteMemberReq* msg) {
  return *msg->header_;
}
void InviteMemberReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
InviteMemberReq::InviteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.InviteMemberReq)
}
InviteMemberReq::InviteMemberReq(const InviteMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  invitename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invitename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_invitename().empty()) {
    invitename_.Set(from._internal_invitename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  isadd_ = from.isadd_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.InviteMemberReq)
}

inline void InviteMemberReq::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
invitename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invitename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isadd_) -
    reinterpret_cast<char*>(&header_)) + sizeof(isadd_));
}

InviteMemberReq::~InviteMemberReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.InviteMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InviteMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  invitename_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void InviteMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InviteMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.InviteMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  invitename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  isadd_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.InviteMemberReq.roomID"));
        } else
          goto handle_unusual;
        continue;
      // string inviteName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_invitename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.InviteMemberReq.inviteName"));
        } else
          goto handle_unusual;
        continue;
      // bool isAdd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          isadd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InviteMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.InviteMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.InviteMemberReq.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // string inviteName = 3;
  if (!this->_internal_invitename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitename().data(), static_cast<int>(this->_internal_invitename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.InviteMemberReq.inviteName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invitename(), target);
  }

  // bool isAdd = 4;
  if (this->_internal_isadd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isadd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.InviteMemberReq)
  return target;
}

size_t InviteMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.InviteMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string inviteName = 3;
  if (!this->_internal_invitename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitename());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool isAdd = 4;
  if (this->_internal_isadd() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InviteMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteMemberReq::GetClassData() const { return &_class_data_; }

void InviteMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InviteMemberReq *>(to)->MergeFrom(
      static_cast<const InviteMemberReq &>(from));
}


void InviteMemberReq::MergeFrom(const InviteMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.InviteMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (!from._internal_invitename().empty()) {
    _internal_set_invitename(from._internal_invitename());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_isadd() != 0) {
    _internal_set_isadd(from._internal_isadd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteMemberReq::CopyFrom(const InviteMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.InviteMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteMemberReq::IsInitialized() const {
  return true;
}

void InviteMemberReq::InternalSwap(InviteMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &invitename_, lhs_arena,
      &other->invitename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InviteMemberReq, isadd_)
      + sizeof(InviteMemberReq::isadd_)
      - PROTOBUF_FIELD_OFFSET(InviteMemberReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[11]);
}

// ===================================================================

class InviteMemberRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const InviteMemberRes* msg);
};

const ::ccs_msg::ResultInfo&
InviteMemberRes::_Internal::result(const InviteMemberRes* msg) {
  return *msg->result_;
}
void InviteMemberRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
InviteMemberRes::InviteMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.InviteMemberRes)
}
InviteMemberRes::InviteMemberRes(const InviteMemberRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  invitename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invitename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_invitename().empty()) {
    invitename_.Set(from._internal_invitename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.InviteMemberRes)
}

inline void InviteMemberRes::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
invitename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invitename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = nullptr;
}

InviteMemberRes::~InviteMemberRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.InviteMemberRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InviteMemberRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  invitename_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void InviteMemberRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InviteMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.InviteMemberRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  invitename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InviteMemberRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.InviteMemberRes.roomID"));
        } else
          goto handle_unusual;
        continue;
      // string inviteName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_invitename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.InviteMemberRes.inviteName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InviteMemberRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.InviteMemberRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.InviteMemberRes.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // string inviteName = 3;
  if (!this->_internal_invitename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitename().data(), static_cast<int>(this->_internal_invitename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.InviteMemberRes.inviteName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invitename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.InviteMemberRes)
  return target;
}

size_t InviteMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.InviteMemberRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string inviteName = 3;
  if (!this->_internal_invitename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitename());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InviteMemberRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InviteMemberRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InviteMemberRes::GetClassData() const { return &_class_data_; }

void InviteMemberRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InviteMemberRes *>(to)->MergeFrom(
      static_cast<const InviteMemberRes &>(from));
}


void InviteMemberRes::MergeFrom(const InviteMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.InviteMemberRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (!from._internal_invitename().empty()) {
    _internal_set_invitename(from._internal_invitename());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InviteMemberRes::CopyFrom(const InviteMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.InviteMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteMemberRes::IsInitialized() const {
  return true;
}

void InviteMemberRes::InternalSwap(InviteMemberRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &invitename_, lhs_arena,
      &other->invitename_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InviteMemberRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[12]);
}

// ===================================================================

class DropMemberReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const DropMemberReq* msg);
};

const ::ccs_msg::MsgHeader&
DropMemberReq::_Internal::header(const DropMemberReq* msg) {
  return *msg->header_;
}
void DropMemberReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DropMemberReq::DropMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.DropMemberReq)
}
DropMemberReq::DropMemberReq(const DropMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  memberid_ = from.memberid_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.DropMemberReq)
}

inline void DropMemberReq::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memberid_) -
    reinterpret_cast<char*>(&header_)) + sizeof(memberid_));
}

DropMemberReq::~DropMemberReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.DropMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void DropMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.DropMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  memberid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.DropMemberReq.roomID"));
        } else
          goto handle_unusual;
        continue;
      // uint64 memberID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.DropMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.DropMemberReq.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint64 memberID = 3;
  if (this->_internal_memberid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_memberid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.DropMemberReq)
  return target;
}

size_t DropMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.DropMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 memberID = 3;
  if (this->_internal_memberid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memberid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropMemberReq::GetClassData() const { return &_class_data_; }

void DropMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropMemberReq *>(to)->MergeFrom(
      static_cast<const DropMemberReq &>(from));
}


void DropMemberReq::MergeFrom(const DropMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.DropMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_memberid() != 0) {
    _internal_set_memberid(from._internal_memberid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropMemberReq::CopyFrom(const DropMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.DropMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropMemberReq::IsInitialized() const {
  return true;
}

void DropMemberReq::InternalSwap(DropMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropMemberReq, memberid_)
      + sizeof(DropMemberReq::memberid_)
      - PROTOBUF_FIELD_OFFSET(DropMemberReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[13]);
}

// ===================================================================

class DropMemberRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const DropMemberRes* msg);
};

const ::ccs_msg::ResultInfo&
DropMemberRes::_Internal::result(const DropMemberRes* msg) {
  return *msg->result_;
}
void DropMemberRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
DropMemberRes::DropMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.DropMemberRes)
}
DropMemberRes::DropMemberRes(const DropMemberRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  memberid_ = from.memberid_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.DropMemberRes)
}

inline void DropMemberRes::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memberid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(memberid_));
}

DropMemberRes::~DropMemberRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.DropMemberRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropMemberRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void DropMemberRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.DropMemberRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  memberid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropMemberRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.DropMemberRes.roomID"));
        } else
          goto handle_unusual;
        continue;
      // uint64 memberID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropMemberRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.DropMemberRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.DropMemberRes.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint64 memberID = 3;
  if (this->_internal_memberid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_memberid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.DropMemberRes)
  return target;
}

size_t DropMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.DropMemberRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint64 memberID = 3;
  if (this->_internal_memberid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memberid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropMemberRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropMemberRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropMemberRes::GetClassData() const { return &_class_data_; }

void DropMemberRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DropMemberRes *>(to)->MergeFrom(
      static_cast<const DropMemberRes &>(from));
}


void DropMemberRes::MergeFrom(const DropMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.DropMemberRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_memberid() != 0) {
    _internal_set_memberid(from._internal_memberid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropMemberRes::CopyFrom(const DropMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.DropMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropMemberRes::IsInitialized() const {
  return true;
}

void DropMemberRes::InternalSwap(DropMemberRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropMemberRes, memberid_)
      + sizeof(DropMemberRes::memberid_)
      - PROTOBUF_FIELD_OFFSET(DropMemberRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropMemberRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[14]);
}

// ===================================================================

class RemoveConfReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const RemoveConfReq* msg);
};

const ::ccs_msg::MsgHeader&
RemoveConfReq::_Internal::header(const RemoveConfReq* msg) {
  return *msg->header_;
}
void RemoveConfReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RemoveConfReq::RemoveConfReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.RemoveConfReq)
}
RemoveConfReq::RemoveConfReq(const RemoveConfReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.RemoveConfReq)
}

inline void RemoveConfReq::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

RemoveConfReq::~RemoveConfReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.RemoveConfReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveConfReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void RemoveConfReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveConfReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.RemoveConfReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveConfReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.RemoveConfReq.roomID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveConfReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.RemoveConfReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.RemoveConfReq.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.RemoveConfReq)
  return target;
}

size_t RemoveConfReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.RemoveConfReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveConfReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveConfReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveConfReq::GetClassData() const { return &_class_data_; }

void RemoveConfReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveConfReq *>(to)->MergeFrom(
      static_cast<const RemoveConfReq &>(from));
}


void RemoveConfReq::MergeFrom(const RemoveConfReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.RemoveConfReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveConfReq::CopyFrom(const RemoveConfReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.RemoveConfReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveConfReq::IsInitialized() const {
  return true;
}

void RemoveConfReq::InternalSwap(RemoveConfReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveConfReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[15]);
}

// ===================================================================

class RemoveConfRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const RemoveConfRes* msg);
};

const ::ccs_msg::ResultInfo&
RemoveConfRes::_Internal::result(const RemoveConfRes* msg) {
  return *msg->result_;
}
void RemoveConfRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
RemoveConfRes::RemoveConfRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.RemoveConfRes)
}
RemoveConfRes::RemoveConfRes(const RemoveConfRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.RemoveConfRes)
}

inline void RemoveConfRes::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = nullptr;
}

RemoveConfRes::~RemoveConfRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.RemoveConfRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveConfRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void RemoveConfRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveConfRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.RemoveConfRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveConfRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.RemoveConfRes.roomID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveConfRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.RemoveConfRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.RemoveConfRes.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.RemoveConfRes)
  return target;
}

size_t RemoveConfRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.RemoveConfRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveConfRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveConfRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveConfRes::GetClassData() const { return &_class_data_; }

void RemoveConfRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveConfRes *>(to)->MergeFrom(
      static_cast<const RemoveConfRes &>(from));
}


void RemoveConfRes::MergeFrom(const RemoveConfRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.RemoveConfRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveConfRes::CopyFrom(const RemoveConfRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.RemoveConfRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveConfRes::IsInitialized() const {
  return true;
}

void RemoveConfRes::InternalSwap(RemoveConfRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveConfRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[16]);
}

// ===================================================================

class GetVideoLayoutInfoReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const GetVideoLayoutInfoReq* msg);
};

const ::ccs_msg::MsgHeader&
GetVideoLayoutInfoReq::_Internal::header(const GetVideoLayoutInfoReq* msg) {
  return *msg->header_;
}
void GetVideoLayoutInfoReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetVideoLayoutInfoReq::GetVideoLayoutInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.GetVideoLayoutInfoReq)
}
GetVideoLayoutInfoReq::GetVideoLayoutInfoReq(const GetVideoLayoutInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mixerid_ = from.mixerid_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.GetVideoLayoutInfoReq)
}

inline void GetVideoLayoutInfoReq::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mixerid_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mixerid_));
}

GetVideoLayoutInfoReq::~GetVideoLayoutInfoReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.GetVideoLayoutInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetVideoLayoutInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void GetVideoLayoutInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVideoLayoutInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.GetVideoLayoutInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mixerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVideoLayoutInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.GetVideoLayoutInfoReq.roomID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mixerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mixerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVideoLayoutInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.GetVideoLayoutInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.GetVideoLayoutInfoReq.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mixerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.GetVideoLayoutInfoReq)
  return target;
}

size_t GetVideoLayoutInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.GetVideoLayoutInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mixerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVideoLayoutInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVideoLayoutInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVideoLayoutInfoReq::GetClassData() const { return &_class_data_; }

void GetVideoLayoutInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVideoLayoutInfoReq *>(to)->MergeFrom(
      static_cast<const GetVideoLayoutInfoReq &>(from));
}


void GetVideoLayoutInfoReq::MergeFrom(const GetVideoLayoutInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.GetVideoLayoutInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mixerid() != 0) {
    _internal_set_mixerid(from._internal_mixerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVideoLayoutInfoReq::CopyFrom(const GetVideoLayoutInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.GetVideoLayoutInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVideoLayoutInfoReq::IsInitialized() const {
  return true;
}

void GetVideoLayoutInfoReq::InternalSwap(GetVideoLayoutInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVideoLayoutInfoReq, mixerid_)
      + sizeof(GetVideoLayoutInfoReq::mixerid_)
      - PROTOBUF_FIELD_OFFSET(GetVideoLayoutInfoReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVideoLayoutInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[17]);
}

// ===================================================================

class GetVideoLayoutInfoRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const GetVideoLayoutInfoRes* msg);
};

const ::ccs_msg::ResultInfo&
GetVideoLayoutInfoRes::_Internal::result(const GetVideoLayoutInfoRes* msg) {
  return *msg->result_;
}
void GetVideoLayoutInfoRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
GetVideoLayoutInfoRes::GetVideoLayoutInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  win_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.GetVideoLayoutInfoRes)
}
GetVideoLayoutInfoRes::GetVideoLayoutInfoRes(const GetVideoLayoutInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      win_list_(from.win_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&layout_id_, &from.layout_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&windows_) -
    reinterpret_cast<char*>(&layout_id_)) + sizeof(windows_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.GetVideoLayoutInfoRes)
}

inline void GetVideoLayoutInfoRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&windows_) -
    reinterpret_cast<char*>(&result_)) + sizeof(windows_));
}

GetVideoLayoutInfoRes::~GetVideoLayoutInfoRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.GetVideoLayoutInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetVideoLayoutInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void GetVideoLayoutInfoRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVideoLayoutInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.GetVideoLayoutInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  win_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&layout_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&windows_) -
      reinterpret_cast<char*>(&layout_id_)) + sizeof(windows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVideoLayoutInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.VideoWindow win_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_win_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 layout_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          layout_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 windows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          windows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVideoLayoutInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.GetVideoLayoutInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .ccs_msg.VideoWindow win_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_win_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_win_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 layout_id = 3;
  if (this->_internal_layout_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_layout_id(), target);
  }

  // uint32 windows = 4;
  if (this->_internal_windows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_windows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.GetVideoLayoutInfoRes)
  return target;
}

size_t GetVideoLayoutInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.GetVideoLayoutInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.VideoWindow win_list = 2;
  total_size += 1UL * this->_internal_win_list_size();
  for (const auto& msg : this->win_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint32 layout_id = 3;
  if (this->_internal_layout_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layout_id());
  }

  // uint32 windows = 4;
  if (this->_internal_windows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_windows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVideoLayoutInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVideoLayoutInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVideoLayoutInfoRes::GetClassData() const { return &_class_data_; }

void GetVideoLayoutInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVideoLayoutInfoRes *>(to)->MergeFrom(
      static_cast<const GetVideoLayoutInfoRes &>(from));
}


void GetVideoLayoutInfoRes::MergeFrom(const GetVideoLayoutInfoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.GetVideoLayoutInfoRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  win_list_.MergeFrom(from.win_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_layout_id() != 0) {
    _internal_set_layout_id(from._internal_layout_id());
  }
  if (from._internal_windows() != 0) {
    _internal_set_windows(from._internal_windows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVideoLayoutInfoRes::CopyFrom(const GetVideoLayoutInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.GetVideoLayoutInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVideoLayoutInfoRes::IsInitialized() const {
  return true;
}

void GetVideoLayoutInfoRes::InternalSwap(GetVideoLayoutInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  win_list_.InternalSwap(&other->win_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVideoLayoutInfoRes, windows_)
      + sizeof(GetVideoLayoutInfoRes::windows_)
      - PROTOBUF_FIELD_OFFSET(GetVideoLayoutInfoRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVideoLayoutInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[18]);
}

// ===================================================================

class SetVideoLayoutReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const SetVideoLayoutReq* msg);
};

const ::ccs_msg::MsgHeader&
SetVideoLayoutReq::_Internal::header(const SetVideoLayoutReq* msg) {
  return *msg->header_;
}
void SetVideoLayoutReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetVideoLayoutReq::SetVideoLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.SetVideoLayoutReq)
}
SetVideoLayoutReq::SetVideoLayoutReq(const SetVideoLayoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&mixerid_, &from.mixerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&layoutid_) -
    reinterpret_cast<char*>(&mixerid_)) + sizeof(layoutid_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.SetVideoLayoutReq)
}

inline void SetVideoLayoutReq::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layoutid_) -
    reinterpret_cast<char*>(&header_)) + sizeof(layoutid_));
}

SetVideoLayoutReq::~SetVideoLayoutReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.SetVideoLayoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVideoLayoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void SetVideoLayoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVideoLayoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.SetVideoLayoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&mixerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layoutid_) -
      reinterpret_cast<char*>(&mixerid_)) + sizeof(layoutid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVideoLayoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.SetVideoLayoutReq.roomID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mixerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mixerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 layoutID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          layoutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVideoLayoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.SetVideoLayoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.SetVideoLayoutReq.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mixerid(), target);
  }

  // uint32 layoutID = 4;
  if (this->_internal_layoutid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_layoutid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.SetVideoLayoutReq)
  return target;
}

size_t SetVideoLayoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.SetVideoLayoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mixerid());
  }

  // uint32 layoutID = 4;
  if (this->_internal_layoutid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layoutid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVideoLayoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetVideoLayoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVideoLayoutReq::GetClassData() const { return &_class_data_; }

void SetVideoLayoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetVideoLayoutReq *>(to)->MergeFrom(
      static_cast<const SetVideoLayoutReq &>(from));
}


void SetVideoLayoutReq::MergeFrom(const SetVideoLayoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.SetVideoLayoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mixerid() != 0) {
    _internal_set_mixerid(from._internal_mixerid());
  }
  if (from._internal_layoutid() != 0) {
    _internal_set_layoutid(from._internal_layoutid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVideoLayoutReq::CopyFrom(const SetVideoLayoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.SetVideoLayoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVideoLayoutReq::IsInitialized() const {
  return true;
}

void SetVideoLayoutReq::InternalSwap(SetVideoLayoutReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetVideoLayoutReq, layoutid_)
      + sizeof(SetVideoLayoutReq::layoutid_)
      - PROTOBUF_FIELD_OFFSET(SetVideoLayoutReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVideoLayoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[19]);
}

// ===================================================================

class SetVideoLayoutRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const SetVideoLayoutRes* msg);
};

const ::ccs_msg::ResultInfo&
SetVideoLayoutRes::_Internal::result(const SetVideoLayoutRes* msg) {
  return *msg->result_;
}
void SetVideoLayoutRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
SetVideoLayoutRes::SetVideoLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.SetVideoLayoutRes)
}
SetVideoLayoutRes::SetVideoLayoutRes(const SetVideoLayoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&mixerid_, &from.mixerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&layoutid_) -
    reinterpret_cast<char*>(&mixerid_)) + sizeof(layoutid_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.SetVideoLayoutRes)
}

inline void SetVideoLayoutRes::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layoutid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(layoutid_));
}

SetVideoLayoutRes::~SetVideoLayoutRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.SetVideoLayoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVideoLayoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void SetVideoLayoutRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVideoLayoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.SetVideoLayoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&mixerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layoutid_) -
      reinterpret_cast<char*>(&mixerid_)) + sizeof(layoutid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVideoLayoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.SetVideoLayoutRes.roomID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mixerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mixerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 layoutID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          layoutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVideoLayoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.SetVideoLayoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.SetVideoLayoutRes.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mixerid(), target);
  }

  // uint32 layoutID = 4;
  if (this->_internal_layoutid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_layoutid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.SetVideoLayoutRes)
  return target;
}

size_t SetVideoLayoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.SetVideoLayoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mixerid());
  }

  // uint32 layoutID = 4;
  if (this->_internal_layoutid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layoutid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVideoLayoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetVideoLayoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVideoLayoutRes::GetClassData() const { return &_class_data_; }

void SetVideoLayoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetVideoLayoutRes *>(to)->MergeFrom(
      static_cast<const SetVideoLayoutRes &>(from));
}


void SetVideoLayoutRes::MergeFrom(const SetVideoLayoutRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.SetVideoLayoutRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_mixerid() != 0) {
    _internal_set_mixerid(from._internal_mixerid());
  }
  if (from._internal_layoutid() != 0) {
    _internal_set_layoutid(from._internal_layoutid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVideoLayoutRes::CopyFrom(const SetVideoLayoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.SetVideoLayoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVideoLayoutRes::IsInitialized() const {
  return true;
}

void SetVideoLayoutRes::InternalSwap(SetVideoLayoutRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetVideoLayoutRes, layoutid_)
      + sizeof(SetVideoLayoutRes::layoutid_)
      - PROTOBUF_FIELD_OFFSET(SetVideoLayoutRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVideoLayoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[20]);
}

// ===================================================================

class GetMembersInfoReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const GetMembersInfoReq* msg);
};

const ::ccs_msg::MsgHeader&
GetMembersInfoReq::_Internal::header(const GetMembersInfoReq* msg) {
  return *msg->header_;
}
void GetMembersInfoReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetMembersInfoReq::GetMembersInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.GetMembersInfoReq)
}
GetMembersInfoReq::GetMembersInfoReq(const GetMembersInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(from._internal_roomid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mixerid_ = from.mixerid_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.GetMembersInfoReq)
}

inline void GetMembersInfoReq::SharedCtor() {
roomid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mixerid_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mixerid_));
}

GetMembersInfoReq::~GetMembersInfoReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.GetMembersInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMembersInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void GetMembersInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMembersInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.GetMembersInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mixerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMembersInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.GetMembersInfoReq.roomID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mixerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mixerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMembersInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.GetMembersInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.GetMembersInfoReq.roomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mixerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.GetMembersInfoReq)
  return target;
}

size_t GetMembersInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.GetMembersInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomID = 2;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 mixerID = 3;
  if (this->_internal_mixerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mixerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMembersInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMembersInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMembersInfoReq::GetClassData() const { return &_class_data_; }

void GetMembersInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMembersInfoReq *>(to)->MergeFrom(
      static_cast<const GetMembersInfoReq &>(from));
}


void GetMembersInfoReq::MergeFrom(const GetMembersInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.GetMembersInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mixerid() != 0) {
    _internal_set_mixerid(from._internal_mixerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMembersInfoReq::CopyFrom(const GetMembersInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.GetMembersInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersInfoReq::IsInitialized() const {
  return true;
}

void GetMembersInfoReq::InternalSwap(GetMembersInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMembersInfoReq, mixerid_)
      + sizeof(GetMembersInfoReq::mixerid_)
      - PROTOBUF_FIELD_OFFSET(GetMembersInfoReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[21]);
}

// ===================================================================

class MemberInfo::_Internal {
 public:
};

MemberInfo::MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MemberInfo)
}
MemberInfo::MemberInfo(const MemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  combin_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combin_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combin_name().empty()) {
    combin_name_.Set(from._internal_combin_name(), 
      GetArenaForAllocation());
  }
  vcs_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vcs_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vcs_account().empty()) {
    vcs_account_.Set(from._internal_vcs_account(), 
      GetArenaForAllocation());
  }
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_source_id_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(audio_source_id_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MemberInfo)
}

inline void MemberInfo::SharedCtor() {
combin_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combin_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vcs_account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vcs_account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&member_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_source_id_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(audio_source_id_));
}

MemberInfo::~MemberInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.MemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  combin_name_.Destroy();
  vcs_account_.Destroy();
}

void MemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  combin_name_.ClearToEmpty();
  vcs_account_.ClearToEmpty();
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_source_id_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(audio_source_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes combin_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_combin_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.RoleType role_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role_type(static_cast<::ccs_msg::RoleType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_sound_receive_mute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_sound_receive_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_sound_transmit_mute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          is_sound_transmit_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_video_receive_mute = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          is_video_receive_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_video_transmit_mute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          is_video_transmit_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_vad = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          enable_vad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 audio_level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          audio_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 manual_gain_db = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          manual_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 output_gain_db = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          output_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_position = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          window_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exwindow_position = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          exwindow_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 video_channel_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          video_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_chairman = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          is_chairman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_H239_privilege = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          is_h239_privilege_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_H239_share = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          is_h239_share_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_H239_permission = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          is_h239_permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_mcu = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          is_mcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_anonymouse = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          is_anonymouse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_in_blacklist = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          is_in_blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 video_source_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          video_source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ConnectionStatus connection_status = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connection_status(static_cast<::ccs_msg::ConnectionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_vcs_user = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          is_vcs_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vcs_account = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_vcs_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MemberInfo.vcs_account"));
        } else
          goto handle_unusual;
        continue;
      // bool is_recording = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          is_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.NetworkStatus network_status = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_status(static_cast<::ccs_msg::NetworkStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 audio_source_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          audio_source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes combin_name = 1;
  if (!this->_internal_combin_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_combin_name(), target);
  }

  // uint32 member_id = 2;
  if (this->_internal_member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_member_id(), target);
  }

  // bool is_active = 3;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_active(), target);
  }

  // .ccs_msg.RoleType role_type = 4;
  if (this->_internal_role_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_role_type(), target);
  }

  // bool is_sound_receive_mute = 5;
  if (this->_internal_is_sound_receive_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_sound_receive_mute(), target);
  }

  // bool is_sound_transmit_mute = 6;
  if (this->_internal_is_sound_transmit_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_sound_transmit_mute(), target);
  }

  // bool is_video_receive_mute = 7;
  if (this->_internal_is_video_receive_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_video_receive_mute(), target);
  }

  // bool is_video_transmit_mute = 8;
  if (this->_internal_is_video_transmit_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_video_transmit_mute(), target);
  }

  // bool enable_vad = 9;
  if (this->_internal_enable_vad() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_vad(), target);
  }

  // uint32 audio_level = 10;
  if (this->_internal_audio_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_audio_level(), target);
  }

  // uint32 manual_gain_db = 11;
  if (this->_internal_manual_gain_db() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_manual_gain_db(), target);
  }

  // uint32 output_gain_db = 12;
  if (this->_internal_output_gain_db() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_output_gain_db(), target);
  }

  // uint32 window_position = 13;
  if (this->_internal_window_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_window_position(), target);
  }

  // uint32 exwindow_position = 14;
  if (this->_internal_exwindow_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_exwindow_position(), target);
  }

  // uint32 video_channel_id = 15;
  if (this->_internal_video_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_video_channel_id(), target);
  }

  // bool is_chairman = 16;
  if (this->_internal_is_chairman() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_chairman(), target);
  }

  // bool is_H239_privilege = 17;
  if (this->_internal_is_h239_privilege() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_is_h239_privilege(), target);
  }

  // bool is_H239_share = 18;
  if (this->_internal_is_h239_share() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_h239_share(), target);
  }

  // bool is_H239_permission = 19;
  if (this->_internal_is_h239_permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_is_h239_permission(), target);
  }

  // bool is_mcu = 20;
  if (this->_internal_is_mcu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_is_mcu(), target);
  }

  // bool is_anonymouse = 21;
  if (this->_internal_is_anonymouse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_is_anonymouse(), target);
  }

  // bool is_in_blacklist = 22;
  if (this->_internal_is_in_blacklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_in_blacklist(), target);
  }

  // uint32 video_source_id = 23;
  if (this->_internal_video_source_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_video_source_id(), target);
  }

  // .ccs_msg.ConnectionStatus connection_status = 24;
  if (this->_internal_connection_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_connection_status(), target);
  }

  // bool is_vcs_user = 25;
  if (this->_internal_is_vcs_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_is_vcs_user(), target);
  }

  // string vcs_account = 26;
  if (!this->_internal_vcs_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vcs_account().data(), static_cast<int>(this->_internal_vcs_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MemberInfo.vcs_account");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_vcs_account(), target);
  }

  // bool is_recording = 27;
  if (this->_internal_is_recording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_is_recording(), target);
  }

  // .ccs_msg.NetworkStatus network_status = 28;
  if (this->_internal_network_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_network_status(), target);
  }

  // uint32 audio_source_id = 29;
  if (this->_internal_audio_source_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_audio_source_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MemberInfo)
  return target;
}

size_t MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes combin_name = 1;
  if (!this->_internal_combin_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_combin_name());
  }

  // string vcs_account = 26;
  if (!this->_internal_vcs_account().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vcs_account());
  }

  // uint32 member_id = 2;
  if (this->_internal_member_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_id());
  }

  // .ccs_msg.RoleType role_type = 4;
  if (this->_internal_role_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role_type());
  }

  // bool is_active = 3;
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool is_sound_receive_mute = 5;
  if (this->_internal_is_sound_receive_mute() != 0) {
    total_size += 1 + 1;
  }

  // bool is_sound_transmit_mute = 6;
  if (this->_internal_is_sound_transmit_mute() != 0) {
    total_size += 1 + 1;
  }

  // bool is_video_receive_mute = 7;
  if (this->_internal_is_video_receive_mute() != 0) {
    total_size += 1 + 1;
  }

  // uint32 audio_level = 10;
  if (this->_internal_audio_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audio_level());
  }

  // uint32 manual_gain_db = 11;
  if (this->_internal_manual_gain_db() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_manual_gain_db());
  }

  // uint32 output_gain_db = 12;
  if (this->_internal_output_gain_db() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_output_gain_db());
  }

  // bool is_video_transmit_mute = 8;
  if (this->_internal_is_video_transmit_mute() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_vad = 9;
  if (this->_internal_enable_vad() != 0) {
    total_size += 1 + 1;
  }

  // bool is_chairman = 16;
  if (this->_internal_is_chairman() != 0) {
    total_size += 2 + 1;
  }

  // bool is_H239_privilege = 17;
  if (this->_internal_is_h239_privilege() != 0) {
    total_size += 2 + 1;
  }

  // uint32 window_position = 13;
  if (this->_internal_window_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_position());
  }

  // uint32 exwindow_position = 14;
  if (this->_internal_exwindow_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exwindow_position());
  }

  // uint32 video_channel_id = 15;
  if (this->_internal_video_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_video_channel_id());
  }

  // bool is_H239_share = 18;
  if (this->_internal_is_h239_share() != 0) {
    total_size += 2 + 1;
  }

  // bool is_H239_permission = 19;
  if (this->_internal_is_h239_permission() != 0) {
    total_size += 2 + 1;
  }

  // bool is_mcu = 20;
  if (this->_internal_is_mcu() != 0) {
    total_size += 2 + 1;
  }

  // bool is_anonymouse = 21;
  if (this->_internal_is_anonymouse() != 0) {
    total_size += 2 + 1;
  }

  // uint32 video_source_id = 23;
  if (this->_internal_video_source_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_video_source_id());
  }

  // .ccs_msg.ConnectionStatus connection_status = 24;
  if (this->_internal_connection_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_connection_status());
  }

  // bool is_in_blacklist = 22;
  if (this->_internal_is_in_blacklist() != 0) {
    total_size += 2 + 1;
  }

  // bool is_vcs_user = 25;
  if (this->_internal_is_vcs_user() != 0) {
    total_size += 2 + 1;
  }

  // bool is_recording = 27;
  if (this->_internal_is_recording() != 0) {
    total_size += 2 + 1;
  }

  // .ccs_msg.NetworkStatus network_status = 28;
  if (this->_internal_network_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_network_status());
  }

  // uint32 audio_source_id = 29;
  if (this->_internal_audio_source_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_audio_source_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberInfo::GetClassData() const { return &_class_data_; }

void MemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberInfo *>(to)->MergeFrom(
      static_cast<const MemberInfo &>(from));
}


void MemberInfo::MergeFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_combin_name().empty()) {
    _internal_set_combin_name(from._internal_combin_name());
  }
  if (!from._internal_vcs_account().empty()) {
    _internal_set_vcs_account(from._internal_vcs_account());
  }
  if (from._internal_member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from._internal_role_type() != 0) {
    _internal_set_role_type(from._internal_role_type());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_is_sound_receive_mute() != 0) {
    _internal_set_is_sound_receive_mute(from._internal_is_sound_receive_mute());
  }
  if (from._internal_is_sound_transmit_mute() != 0) {
    _internal_set_is_sound_transmit_mute(from._internal_is_sound_transmit_mute());
  }
  if (from._internal_is_video_receive_mute() != 0) {
    _internal_set_is_video_receive_mute(from._internal_is_video_receive_mute());
  }
  if (from._internal_audio_level() != 0) {
    _internal_set_audio_level(from._internal_audio_level());
  }
  if (from._internal_manual_gain_db() != 0) {
    _internal_set_manual_gain_db(from._internal_manual_gain_db());
  }
  if (from._internal_output_gain_db() != 0) {
    _internal_set_output_gain_db(from._internal_output_gain_db());
  }
  if (from._internal_is_video_transmit_mute() != 0) {
    _internal_set_is_video_transmit_mute(from._internal_is_video_transmit_mute());
  }
  if (from._internal_enable_vad() != 0) {
    _internal_set_enable_vad(from._internal_enable_vad());
  }
  if (from._internal_is_chairman() != 0) {
    _internal_set_is_chairman(from._internal_is_chairman());
  }
  if (from._internal_is_h239_privilege() != 0) {
    _internal_set_is_h239_privilege(from._internal_is_h239_privilege());
  }
  if (from._internal_window_position() != 0) {
    _internal_set_window_position(from._internal_window_position());
  }
  if (from._internal_exwindow_position() != 0) {
    _internal_set_exwindow_position(from._internal_exwindow_position());
  }
  if (from._internal_video_channel_id() != 0) {
    _internal_set_video_channel_id(from._internal_video_channel_id());
  }
  if (from._internal_is_h239_share() != 0) {
    _internal_set_is_h239_share(from._internal_is_h239_share());
  }
  if (from._internal_is_h239_permission() != 0) {
    _internal_set_is_h239_permission(from._internal_is_h239_permission());
  }
  if (from._internal_is_mcu() != 0) {
    _internal_set_is_mcu(from._internal_is_mcu());
  }
  if (from._internal_is_anonymouse() != 0) {
    _internal_set_is_anonymouse(from._internal_is_anonymouse());
  }
  if (from._internal_video_source_id() != 0) {
    _internal_set_video_source_id(from._internal_video_source_id());
  }
  if (from._internal_connection_status() != 0) {
    _internal_set_connection_status(from._internal_connection_status());
  }
  if (from._internal_is_in_blacklist() != 0) {
    _internal_set_is_in_blacklist(from._internal_is_in_blacklist());
  }
  if (from._internal_is_vcs_user() != 0) {
    _internal_set_is_vcs_user(from._internal_is_vcs_user());
  }
  if (from._internal_is_recording() != 0) {
    _internal_set_is_recording(from._internal_is_recording());
  }
  if (from._internal_network_status() != 0) {
    _internal_set_network_status(from._internal_network_status());
  }
  if (from._internal_audio_source_id() != 0) {
    _internal_set_audio_source_id(from._internal_audio_source_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  return true;
}

void MemberInfo::InternalSwap(MemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &combin_name_, lhs_arena,
      &other->combin_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vcs_account_, lhs_arena,
      &other->vcs_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberInfo, audio_source_id_)
      + sizeof(MemberInfo::audio_source_id_)
      - PROTOBUF_FIELD_OFFSET(MemberInfo, member_id_)>(
          reinterpret_cast<char*>(&member_id_),
          reinterpret_cast<char*>(&other->member_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[22]);
}

// ===================================================================

class GetMembersInfoRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const GetMembersInfoRes* msg);
};

const ::ccs_msg::ResultInfo&
GetMembersInfoRes::_Internal::result(const GetMembersInfoRes* msg) {
  return *msg->result_;
}
void GetMembersInfoRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
GetMembersInfoRes::GetMembersInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  member_info_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.GetMembersInfoRes)
}
GetMembersInfoRes::GetMembersInfoRes(const GetMembersInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_info_list_(from.member_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.GetMembersInfoRes)
}

inline void GetMembersInfoRes::SharedCtor() {
result_ = nullptr;
}

GetMembersInfoRes::~GetMembersInfoRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.GetMembersInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMembersInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void GetMembersInfoRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMembersInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.GetMembersInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_info_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMembersInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.MemberInfo member_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMembersInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.GetMembersInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .ccs_msg.MemberInfo member_info_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_member_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_member_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.GetMembersInfoRes)
  return target;
}

size_t GetMembersInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.GetMembersInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.MemberInfo member_info_list = 2;
  total_size += 1UL * this->_internal_member_info_list_size();
  for (const auto& msg : this->member_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMembersInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMembersInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMembersInfoRes::GetClassData() const { return &_class_data_; }

void GetMembersInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMembersInfoRes *>(to)->MergeFrom(
      static_cast<const GetMembersInfoRes &>(from));
}


void GetMembersInfoRes::MergeFrom(const GetMembersInfoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.GetMembersInfoRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_info_list_.MergeFrom(from.member_info_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMembersInfoRes::CopyFrom(const GetMembersInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.GetMembersInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersInfoRes::IsInitialized() const {
  return true;
}

void GetMembersInfoRes::InternalSwap(GetMembersInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_info_list_.InternalSwap(&other->member_info_list_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[23]);
}

// ===================================================================

class RecordReqInfo::_Internal {
 public:
};

RecordReqInfo::RecordReqInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.RecordReqInfo)
}
RecordReqInfo::RecordReqInfo(const RecordReqInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&recorder_video_src_id_, &from.recorder_video_src_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recorder_video_quality_id_) -
    reinterpret_cast<char*>(&recorder_video_src_id_)) + sizeof(recorder_video_quality_id_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.RecordReqInfo)
}

inline void RecordReqInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recorder_video_src_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recorder_video_quality_id_) -
    reinterpret_cast<char*>(&recorder_video_src_id_)) + sizeof(recorder_video_quality_id_));
}

RecordReqInfo::~RecordReqInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.RecordReqInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordReqInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordReqInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordReqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.RecordReqInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&recorder_video_src_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recorder_video_quality_id_) -
      reinterpret_cast<char*>(&recorder_video_src_id_)) + sizeof(recorder_video_quality_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordReqInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 recorder_video_src_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          recorder_video_src_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 recorder_video_quality_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          recorder_video_quality_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordReqInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.RecordReqInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recorder_video_src_id = 1;
  if (this->_internal_recorder_video_src_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recorder_video_src_id(), target);
  }

  // uint32 recorder_video_quality_id = 2;
  if (this->_internal_recorder_video_quality_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recorder_video_quality_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.RecordReqInfo)
  return target;
}

size_t RecordReqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.RecordReqInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 recorder_video_src_id = 1;
  if (this->_internal_recorder_video_src_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recorder_video_src_id());
  }

  // uint32 recorder_video_quality_id = 2;
  if (this->_internal_recorder_video_quality_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recorder_video_quality_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordReqInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordReqInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordReqInfo::GetClassData() const { return &_class_data_; }

void RecordReqInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordReqInfo *>(to)->MergeFrom(
      static_cast<const RecordReqInfo &>(from));
}


void RecordReqInfo::MergeFrom(const RecordReqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.RecordReqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_recorder_video_src_id() != 0) {
    _internal_set_recorder_video_src_id(from._internal_recorder_video_src_id());
  }
  if (from._internal_recorder_video_quality_id() != 0) {
    _internal_set_recorder_video_quality_id(from._internal_recorder_video_quality_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordReqInfo::CopyFrom(const RecordReqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.RecordReqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordReqInfo::IsInitialized() const {
  return true;
}

void RecordReqInfo::InternalSwap(RecordReqInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordReqInfo, recorder_video_quality_id_)
      + sizeof(RecordReqInfo::recorder_video_quality_id_)
      - PROTOBUF_FIELD_OFFSET(RecordReqInfo, recorder_video_src_id_)>(
          reinterpret_cast<char*>(&recorder_video_src_id_),
          reinterpret_cast<char*>(&other->recorder_video_src_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordReqInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[24]);
}

// ===================================================================

class StartRecordReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const StartRecordReq* msg);
};

const ::ccs_msg::MsgHeader&
StartRecordReq::_Internal::header(const StartRecordReq* msg) {
  return *msg->header_;
}
void StartRecordReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
StartRecordReq::StartRecordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  record_info_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.StartRecordReq)
}
StartRecordReq::StartRecordReq(const StartRecordReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_info_list_(from.record_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.StartRecordReq)
}

inline void StartRecordReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

StartRecordReq::~StartRecordReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.StartRecordReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartRecordReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void StartRecordReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRecordReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.StartRecordReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_info_list_.Clear();
  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRecordReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.StartRecordReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.RecordReqInfo record_info_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRecordReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.StartRecordReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.StartRecordReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // repeated .ccs_msg.RecordReqInfo record_info_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_record_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.StartRecordReq)
  return target;
}

size_t StartRecordReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.StartRecordReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.RecordReqInfo record_info_list = 3;
  total_size += 1UL * this->_internal_record_info_list_size();
  for (const auto& msg : this->record_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRecordReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRecordReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRecordReq::GetClassData() const { return &_class_data_; }

void StartRecordReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRecordReq *>(to)->MergeFrom(
      static_cast<const StartRecordReq &>(from));
}


void StartRecordReq::MergeFrom(const StartRecordReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.StartRecordReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  record_info_list_.MergeFrom(from.record_info_list_);
  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRecordReq::CopyFrom(const StartRecordReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.StartRecordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordReq::IsInitialized() const {
  return true;
}

void StartRecordReq::InternalSwap(StartRecordReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  record_info_list_.InternalSwap(&other->record_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRecordReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[25]);
}

// ===================================================================

class RecordResInfo::_Internal {
 public:
};

RecordResInfo::RecordResInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.RecordResInfo)
}
RecordResInfo::RecordResInfo(const RecordResInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  recorder_video_src_id_ = from.recorder_video_src_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.RecordResInfo)
}

inline void RecordResInfo::SharedCtor() {
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recorder_video_src_id_ = 0u;
}

RecordResInfo::~RecordResInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.RecordResInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordResInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.Destroy();
}

void RecordResInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordResInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.RecordResInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  recorder_video_src_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordResInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 recorder_video_src_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          recorder_video_src_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.RecordResInfo.file_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordResInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.RecordResInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recorder_video_src_id = 1;
  if (this->_internal_recorder_video_src_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recorder_video_src_id(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.RecordResInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.RecordResInfo)
  return target;
}

size_t RecordResInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.RecordResInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 recorder_video_src_id = 1;
  if (this->_internal_recorder_video_src_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recorder_video_src_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordResInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordResInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordResInfo::GetClassData() const { return &_class_data_; }

void RecordResInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordResInfo *>(to)->MergeFrom(
      static_cast<const RecordResInfo &>(from));
}


void RecordResInfo::MergeFrom(const RecordResInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.RecordResInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_recorder_video_src_id() != 0) {
    _internal_set_recorder_video_src_id(from._internal_recorder_video_src_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordResInfo::CopyFrom(const RecordResInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.RecordResInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordResInfo::IsInitialized() const {
  return true;
}

void RecordResInfo::InternalSwap(RecordResInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  swap(recorder_video_src_id_, other->recorder_video_src_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordResInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[26]);
}

// ===================================================================

class StartRecordRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const StartRecordRes* msg);
};

const ::ccs_msg::ResultInfo&
StartRecordRes::_Internal::result(const StartRecordRes* msg) {
  return *msg->result_;
}
void StartRecordRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
StartRecordRes::StartRecordRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  record_info_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.StartRecordRes)
}
StartRecordRes::StartRecordRes(const StartRecordRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_info_list_(from.record_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.StartRecordRes)
}

inline void StartRecordRes::SharedCtor() {
result_ = nullptr;
}

StartRecordRes::~StartRecordRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.StartRecordRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartRecordRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void StartRecordRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRecordRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.StartRecordRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_info_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRecordRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.RecordResInfo record_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRecordRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.StartRecordRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .ccs_msg.RecordResInfo record_info_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_record_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.StartRecordRes)
  return target;
}

size_t StartRecordRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.StartRecordRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.RecordResInfo record_info_list = 2;
  total_size += 1UL * this->_internal_record_info_list_size();
  for (const auto& msg : this->record_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRecordRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRecordRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRecordRes::GetClassData() const { return &_class_data_; }

void StartRecordRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRecordRes *>(to)->MergeFrom(
      static_cast<const StartRecordRes &>(from));
}


void StartRecordRes::MergeFrom(const StartRecordRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.StartRecordRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  record_info_list_.MergeFrom(from.record_info_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRecordRes::CopyFrom(const StartRecordRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.StartRecordRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordRes::IsInitialized() const {
  return true;
}

void StartRecordRes::InternalSwap(StartRecordRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  record_info_list_.InternalSwap(&other->record_info_list_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRecordRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[27]);
}

// ===================================================================

class StopRecordReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const StopRecordReq* msg);
};

const ::ccs_msg::MsgHeader&
StopRecordReq::_Internal::header(const StopRecordReq* msg) {
  return *msg->header_;
}
void StopRecordReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
StopRecordReq::StopRecordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.StopRecordReq)
}
StopRecordReq::StopRecordReq(const StopRecordReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  recordervideosrcid_ = from.recordervideosrcid_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.StopRecordReq)
}

inline void StopRecordReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recordervideosrcid_) -
    reinterpret_cast<char*>(&header_)) + sizeof(recordervideosrcid_));
}

StopRecordReq::~StopRecordReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.StopRecordReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopRecordReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void StopRecordReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopRecordReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.StopRecordReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  recordervideosrcid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRecordReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.StopRecordReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 recorderVideoSrcId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          recordervideosrcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopRecordReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.StopRecordReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.StopRecordReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // uint32 recorderVideoSrcId = 3;
  if (this->_internal_recordervideosrcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_recordervideosrcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.StopRecordReq)
  return target;
}

size_t StopRecordReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.StopRecordReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 recorderVideoSrcId = 3;
  if (this->_internal_recordervideosrcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recordervideosrcid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopRecordReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopRecordReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopRecordReq::GetClassData() const { return &_class_data_; }

void StopRecordReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopRecordReq *>(to)->MergeFrom(
      static_cast<const StopRecordReq &>(from));
}


void StopRecordReq::MergeFrom(const StopRecordReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.StopRecordReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_recordervideosrcid() != 0) {
    _internal_set_recordervideosrcid(from._internal_recordervideosrcid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopRecordReq::CopyFrom(const StopRecordReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.StopRecordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRecordReq::IsInitialized() const {
  return true;
}

void StopRecordReq::InternalSwap(StopRecordReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopRecordReq, recordervideosrcid_)
      + sizeof(StopRecordReq::recordervideosrcid_)
      - PROTOBUF_FIELD_OFFSET(StopRecordReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRecordReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[28]);
}

// ===================================================================

class StopRecordRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const StopRecordRes* msg);
};

const ::ccs_msg::ResultInfo&
StopRecordRes::_Internal::result(const StopRecordRes* msg) {
  return *msg->result_;
}
void StopRecordRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
StopRecordRes::StopRecordRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.StopRecordRes)
}
StopRecordRes::StopRecordRes(const StopRecordRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.StopRecordRes)
}

inline void StopRecordRes::SharedCtor() {
result_ = nullptr;
}

StopRecordRes::~StopRecordRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.StopRecordRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopRecordRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void StopRecordRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopRecordRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.StopRecordRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRecordRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopRecordRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.StopRecordRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.StopRecordRes)
  return target;
}

size_t StopRecordRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.StopRecordRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopRecordRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopRecordRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopRecordRes::GetClassData() const { return &_class_data_; }

void StopRecordRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopRecordRes *>(to)->MergeFrom(
      static_cast<const StopRecordRes &>(from));
}


void StopRecordRes::MergeFrom(const StopRecordRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.StopRecordRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopRecordRes::CopyFrom(const StopRecordRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.StopRecordRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRecordRes::IsInitialized() const {
  return true;
}

void StopRecordRes::InternalSwap(StopRecordRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRecordRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[29]);
}

// ===================================================================

class MuteMemberReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const MuteMemberReq* msg);
};

const ::ccs_msg::MsgHeader&
MuteMemberReq::_Internal::header(const MuteMemberReq* msg) {
  return *msg->header_;
}
void MuteMemberReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MuteMemberReq::MuteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MuteMemberReq)
}
MuteMemberReq::MuteMemberReq(const MuteMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mute_type_ = from.mute_type_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MuteMemberReq)
}

inline void MuteMemberReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mute_type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mute_type_));
}

MuteMemberReq::~MuteMemberReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.MuteMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void MuteMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MuteMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MuteMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mute_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MuteMemberReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 member_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MuteType mute_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mute_type(static_cast<::ccs_msg::MuteType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MuteMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MuteMemberReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // repeated int32 member_id_list = 3;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_member_id_list(), byte_size, target);
    }
  }

  // .ccs_msg.MuteType mute_type = 4;
  if (this->_internal_mute_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_mute_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MuteMemberReq)
  return target;
}

size_t MuteMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MuteMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 member_id_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.MuteType mute_type = 4;
  if (this->_internal_mute_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mute_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MuteMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteMemberReq::GetClassData() const { return &_class_data_; }

void MuteMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MuteMemberReq *>(to)->MergeFrom(
      static_cast<const MuteMemberReq &>(from));
}


void MuteMemberReq::MergeFrom(const MuteMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MuteMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mute_type() != 0) {
    _internal_set_mute_type(from._internal_mute_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteMemberReq::CopyFrom(const MuteMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MuteMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteMemberReq::IsInitialized() const {
  return true;
}

void MuteMemberReq::InternalSwap(MuteMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MuteMemberReq, mute_type_)
      + sizeof(MuteMemberReq::mute_type_)
      - PROTOBUF_FIELD_OFFSET(MuteMemberReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[30]);
}

// ===================================================================

class MuteMemberRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const MuteMemberRes* msg);
};

const ::ccs_msg::ResultInfo&
MuteMemberRes::_Internal::result(const MuteMemberRes* msg) {
  return *msg->result_;
}
void MuteMemberRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
MuteMemberRes::MuteMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MuteMemberRes)
}
MuteMemberRes::MuteMemberRes(const MuteMemberRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MuteMemberRes)
}

inline void MuteMemberRes::SharedCtor() {
result_ = nullptr;
}

MuteMemberRes::~MuteMemberRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.MuteMemberRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteMemberRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void MuteMemberRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MuteMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MuteMemberRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteMemberRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteMemberRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MuteMemberRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MuteMemberRes)
  return target;
}

size_t MuteMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MuteMemberRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteMemberRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MuteMemberRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteMemberRes::GetClassData() const { return &_class_data_; }

void MuteMemberRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MuteMemberRes *>(to)->MergeFrom(
      static_cast<const MuteMemberRes &>(from));
}


void MuteMemberRes::MergeFrom(const MuteMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MuteMemberRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteMemberRes::CopyFrom(const MuteMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MuteMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteMemberRes::IsInitialized() const {
  return true;
}

void MuteMemberRes::InternalSwap(MuteMemberRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteMemberRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[31]);
}

// ===================================================================

class UnmuteMemberReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const UnmuteMemberReq* msg);
};

const ::ccs_msg::MsgHeader&
UnmuteMemberReq::_Internal::header(const UnmuteMemberReq* msg) {
  return *msg->header_;
}
void UnmuteMemberReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UnmuteMemberReq::UnmuteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.UnmuteMemberReq)
}
UnmuteMemberReq::UnmuteMemberReq(const UnmuteMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mute_type_ = from.mute_type_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.UnmuteMemberReq)
}

inline void UnmuteMemberReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mute_type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mute_type_));
}

UnmuteMemberReq::~UnmuteMemberReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.UnmuteMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void UnmuteMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnmuteMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.UnmuteMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mute_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmuteMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.UnmuteMemberReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 member_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MuteType mute_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mute_type(static_cast<::ccs_msg::MuteType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnmuteMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.UnmuteMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.UnmuteMemberReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // repeated int32 member_id_list = 3;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_member_id_list(), byte_size, target);
    }
  }

  // .ccs_msg.MuteType mute_type = 4;
  if (this->_internal_mute_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_mute_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.UnmuteMemberReq)
  return target;
}

size_t UnmuteMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.UnmuteMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 member_id_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.MuteType mute_type = 4;
  if (this->_internal_mute_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mute_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnmuteMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnmuteMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnmuteMemberReq::GetClassData() const { return &_class_data_; }

void UnmuteMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnmuteMemberReq *>(to)->MergeFrom(
      static_cast<const UnmuteMemberReq &>(from));
}


void UnmuteMemberReq::MergeFrom(const UnmuteMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.UnmuteMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mute_type() != 0) {
    _internal_set_mute_type(from._internal_mute_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnmuteMemberReq::CopyFrom(const UnmuteMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.UnmuteMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteMemberReq::IsInitialized() const {
  return true;
}

void UnmuteMemberReq::InternalSwap(UnmuteMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnmuteMemberReq, mute_type_)
      + sizeof(UnmuteMemberReq::mute_type_)
      - PROTOBUF_FIELD_OFFSET(UnmuteMemberReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmuteMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[32]);
}

// ===================================================================

class UnmuteMemberRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const UnmuteMemberRes* msg);
};

const ::ccs_msg::ResultInfo&
UnmuteMemberRes::_Internal::result(const UnmuteMemberRes* msg) {
  return *msg->result_;
}
void UnmuteMemberRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
UnmuteMemberRes::UnmuteMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.UnmuteMemberRes)
}
UnmuteMemberRes::UnmuteMemberRes(const UnmuteMemberRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.UnmuteMemberRes)
}

inline void UnmuteMemberRes::SharedCtor() {
result_ = nullptr;
}

UnmuteMemberRes::~UnmuteMemberRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.UnmuteMemberRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteMemberRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void UnmuteMemberRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnmuteMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.UnmuteMemberRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmuteMemberRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnmuteMemberRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.UnmuteMemberRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.UnmuteMemberRes)
  return target;
}

size_t UnmuteMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.UnmuteMemberRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnmuteMemberRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnmuteMemberRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnmuteMemberRes::GetClassData() const { return &_class_data_; }

void UnmuteMemberRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnmuteMemberRes *>(to)->MergeFrom(
      static_cast<const UnmuteMemberRes &>(from));
}


void UnmuteMemberRes::MergeFrom(const UnmuteMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.UnmuteMemberRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnmuteMemberRes::CopyFrom(const UnmuteMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.UnmuteMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteMemberRes::IsInitialized() const {
  return true;
}

void UnmuteMemberRes::InternalSwap(UnmuteMemberRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmuteMemberRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[33]);
}

// ===================================================================

class MuteAllMemberReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const MuteAllMemberReq* msg);
};

const ::ccs_msg::MsgHeader&
MuteAllMemberReq::_Internal::header(const MuteAllMemberReq* msg) {
  return *msg->header_;
}
void MuteAllMemberReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MuteAllMemberReq::MuteAllMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MuteAllMemberReq)
}
MuteAllMemberReq::MuteAllMemberReq(const MuteAllMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mute_type_ = from.mute_type_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MuteAllMemberReq)
}

inline void MuteAllMemberReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mute_type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mute_type_));
}

MuteAllMemberReq::~MuteAllMemberReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.MuteAllMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteAllMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void MuteAllMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MuteAllMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MuteAllMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mute_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteAllMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MuteAllMemberReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MuteType mute_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mute_type(static_cast<::ccs_msg::MuteType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteAllMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MuteAllMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MuteAllMemberReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // .ccs_msg.MuteType mute_type = 3;
  if (this->_internal_mute_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mute_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MuteAllMemberReq)
  return target;
}

size_t MuteAllMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MuteAllMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.MuteType mute_type = 3;
  if (this->_internal_mute_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mute_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteAllMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MuteAllMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteAllMemberReq::GetClassData() const { return &_class_data_; }

void MuteAllMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MuteAllMemberReq *>(to)->MergeFrom(
      static_cast<const MuteAllMemberReq &>(from));
}


void MuteAllMemberReq::MergeFrom(const MuteAllMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MuteAllMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mute_type() != 0) {
    _internal_set_mute_type(from._internal_mute_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteAllMemberReq::CopyFrom(const MuteAllMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MuteAllMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteAllMemberReq::IsInitialized() const {
  return true;
}

void MuteAllMemberReq::InternalSwap(MuteAllMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MuteAllMemberReq, mute_type_)
      + sizeof(MuteAllMemberReq::mute_type_)
      - PROTOBUF_FIELD_OFFSET(MuteAllMemberReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteAllMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[34]);
}

// ===================================================================

class MuteAllMemberRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const MuteAllMemberRes* msg);
};

const ::ccs_msg::ResultInfo&
MuteAllMemberRes::_Internal::result(const MuteAllMemberRes* msg) {
  return *msg->result_;
}
void MuteAllMemberRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
MuteAllMemberRes::MuteAllMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MuteAllMemberRes)
}
MuteAllMemberRes::MuteAllMemberRes(const MuteAllMemberRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MuteAllMemberRes)
}

inline void MuteAllMemberRes::SharedCtor() {
result_ = nullptr;
}

MuteAllMemberRes::~MuteAllMemberRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.MuteAllMemberRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteAllMemberRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void MuteAllMemberRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MuteAllMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MuteAllMemberRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteAllMemberRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteAllMemberRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MuteAllMemberRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MuteAllMemberRes)
  return target;
}

size_t MuteAllMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MuteAllMemberRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteAllMemberRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MuteAllMemberRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteAllMemberRes::GetClassData() const { return &_class_data_; }

void MuteAllMemberRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MuteAllMemberRes *>(to)->MergeFrom(
      static_cast<const MuteAllMemberRes &>(from));
}


void MuteAllMemberRes::MergeFrom(const MuteAllMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MuteAllMemberRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteAllMemberRes::CopyFrom(const MuteAllMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MuteAllMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteAllMemberRes::IsInitialized() const {
  return true;
}

void MuteAllMemberRes::InternalSwap(MuteAllMemberRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteAllMemberRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[35]);
}

// ===================================================================

class UnmuteAllMemberReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const UnmuteAllMemberReq* msg);
};

const ::ccs_msg::MsgHeader&
UnmuteAllMemberReq::_Internal::header(const UnmuteAllMemberReq* msg) {
  return *msg->header_;
}
void UnmuteAllMemberReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UnmuteAllMemberReq::UnmuteAllMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.UnmuteAllMemberReq)
}
UnmuteAllMemberReq::UnmuteAllMemberReq(const UnmuteAllMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  mute_type_ = from.mute_type_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.UnmuteAllMemberReq)
}

inline void UnmuteAllMemberReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mute_type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mute_type_));
}

UnmuteAllMemberReq::~UnmuteAllMemberReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.UnmuteAllMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteAllMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void UnmuteAllMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnmuteAllMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.UnmuteAllMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  mute_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmuteAllMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.UnmuteAllMemberReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MuteType mute_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mute_type(static_cast<::ccs_msg::MuteType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnmuteAllMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.UnmuteAllMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.UnmuteAllMemberReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // .ccs_msg.MuteType mute_type = 3;
  if (this->_internal_mute_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mute_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.UnmuteAllMemberReq)
  return target;
}

size_t UnmuteAllMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.UnmuteAllMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.MuteType mute_type = 3;
  if (this->_internal_mute_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mute_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnmuteAllMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnmuteAllMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnmuteAllMemberReq::GetClassData() const { return &_class_data_; }

void UnmuteAllMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnmuteAllMemberReq *>(to)->MergeFrom(
      static_cast<const UnmuteAllMemberReq &>(from));
}


void UnmuteAllMemberReq::MergeFrom(const UnmuteAllMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.UnmuteAllMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mute_type() != 0) {
    _internal_set_mute_type(from._internal_mute_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnmuteAllMemberReq::CopyFrom(const UnmuteAllMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.UnmuteAllMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteAllMemberReq::IsInitialized() const {
  return true;
}

void UnmuteAllMemberReq::InternalSwap(UnmuteAllMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnmuteAllMemberReq, mute_type_)
      + sizeof(UnmuteAllMemberReq::mute_type_)
      - PROTOBUF_FIELD_OFFSET(UnmuteAllMemberReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmuteAllMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[36]);
}

// ===================================================================

class UnmuteAllMemberRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const UnmuteAllMemberRes* msg);
};

const ::ccs_msg::ResultInfo&
UnmuteAllMemberRes::_Internal::result(const UnmuteAllMemberRes* msg) {
  return *msg->result_;
}
void UnmuteAllMemberRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
UnmuteAllMemberRes::UnmuteAllMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.UnmuteAllMemberRes)
}
UnmuteAllMemberRes::UnmuteAllMemberRes(const UnmuteAllMemberRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.UnmuteAllMemberRes)
}

inline void UnmuteAllMemberRes::SharedCtor() {
result_ = nullptr;
}

UnmuteAllMemberRes::~UnmuteAllMemberRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.UnmuteAllMemberRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteAllMemberRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void UnmuteAllMemberRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnmuteAllMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.UnmuteAllMemberRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmuteAllMemberRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnmuteAllMemberRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.UnmuteAllMemberRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.UnmuteAllMemberRes)
  return target;
}

size_t UnmuteAllMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.UnmuteAllMemberRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnmuteAllMemberRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnmuteAllMemberRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnmuteAllMemberRes::GetClassData() const { return &_class_data_; }

void UnmuteAllMemberRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnmuteAllMemberRes *>(to)->MergeFrom(
      static_cast<const UnmuteAllMemberRes &>(from));
}


void UnmuteAllMemberRes::MergeFrom(const UnmuteAllMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.UnmuteAllMemberRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnmuteAllMemberRes::CopyFrom(const UnmuteAllMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.UnmuteAllMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteAllMemberRes::IsInitialized() const {
  return true;
}

void UnmuteAllMemberRes::InternalSwap(UnmuteAllMemberRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmuteAllMemberRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[37]);
}

// ===================================================================

class AssignChairmanReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const AssignChairmanReq* msg);
};

const ::ccs_msg::MsgHeader&
AssignChairmanReq::_Internal::header(const AssignChairmanReq* msg) {
  return *msg->header_;
}
void AssignChairmanReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AssignChairmanReq::AssignChairmanReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.AssignChairmanReq)
}
AssignChairmanReq::AssignChairmanReq(const AssignChairmanReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  member_id_ = from.member_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.AssignChairmanReq)
}

inline void AssignChairmanReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(member_id_));
}

AssignChairmanReq::~AssignChairmanReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.AssignChairmanReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignChairmanReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void AssignChairmanReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignChairmanReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.AssignChairmanReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  member_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignChairmanReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.AssignChairmanReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignChairmanReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.AssignChairmanReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.AssignChairmanReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 member_id = 3;
  if (this->_internal_member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_member_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.AssignChairmanReq)
  return target;
}

size_t AssignChairmanReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.AssignChairmanReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 member_id = 3;
  if (this->_internal_member_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_member_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignChairmanReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignChairmanReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignChairmanReq::GetClassData() const { return &_class_data_; }

void AssignChairmanReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssignChairmanReq *>(to)->MergeFrom(
      static_cast<const AssignChairmanReq &>(from));
}


void AssignChairmanReq::MergeFrom(const AssignChairmanReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.AssignChairmanReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignChairmanReq::CopyFrom(const AssignChairmanReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.AssignChairmanReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignChairmanReq::IsInitialized() const {
  return true;
}

void AssignChairmanReq::InternalSwap(AssignChairmanReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignChairmanReq, member_id_)
      + sizeof(AssignChairmanReq::member_id_)
      - PROTOBUF_FIELD_OFFSET(AssignChairmanReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignChairmanReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[38]);
}

// ===================================================================

class AssignChairmanRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const AssignChairmanRes* msg);
};

const ::ccs_msg::ResultInfo&
AssignChairmanRes::_Internal::result(const AssignChairmanRes* msg) {
  return *msg->result_;
}
void AssignChairmanRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
AssignChairmanRes::AssignChairmanRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.AssignChairmanRes)
}
AssignChairmanRes::AssignChairmanRes(const AssignChairmanRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.AssignChairmanRes)
}

inline void AssignChairmanRes::SharedCtor() {
result_ = nullptr;
}

AssignChairmanRes::~AssignChairmanRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.AssignChairmanRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignChairmanRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void AssignChairmanRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignChairmanRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.AssignChairmanRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignChairmanRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignChairmanRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.AssignChairmanRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.AssignChairmanRes)
  return target;
}

size_t AssignChairmanRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.AssignChairmanRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignChairmanRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignChairmanRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignChairmanRes::GetClassData() const { return &_class_data_; }

void AssignChairmanRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssignChairmanRes *>(to)->MergeFrom(
      static_cast<const AssignChairmanRes &>(from));
}


void AssignChairmanRes::MergeFrom(const AssignChairmanRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.AssignChairmanRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignChairmanRes::CopyFrom(const AssignChairmanRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.AssignChairmanRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignChairmanRes::IsInitialized() const {
  return true;
}

void AssignChairmanRes::InternalSwap(AssignChairmanRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignChairmanRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[39]);
}

// ===================================================================

class TakePhotoReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const TakePhotoReq* msg);
};

const ::ccs_msg::MsgHeader&
TakePhotoReq::_Internal::header(const TakePhotoReq* msg) {
  return *msg->header_;
}
void TakePhotoReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TakePhotoReq::TakePhotoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.TakePhotoReq)
}
TakePhotoReq::TakePhotoReq(const TakePhotoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    room_id_.Set(from._internal_room_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&mixer_id_, &from.mixer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_id_) -
    reinterpret_cast<char*>(&mixer_id_)) + sizeof(window_id_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.TakePhotoReq)
}

inline void TakePhotoReq::SharedCtor() {
room_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(window_id_));
}

TakePhotoReq::~TakePhotoReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.TakePhotoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TakePhotoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void TakePhotoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TakePhotoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.TakePhotoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&mixer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_id_) -
      reinterpret_cast<char*>(&mixer_id_)) + sizeof(window_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakePhotoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.TakePhotoReq.room_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mixer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mixer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TakePhotoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.TakePhotoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.TakePhotoReq.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // uint32 mixer_id = 3;
  if (this->_internal_mixer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mixer_id(), target);
  }

  // uint32 window_id = 4;
  if (this->_internal_window_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_window_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.TakePhotoReq)
  return target;
}

size_t TakePhotoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.TakePhotoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 mixer_id = 3;
  if (this->_internal_mixer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mixer_id());
  }

  // uint32 window_id = 4;
  if (this->_internal_window_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TakePhotoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TakePhotoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TakePhotoReq::GetClassData() const { return &_class_data_; }

void TakePhotoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TakePhotoReq *>(to)->MergeFrom(
      static_cast<const TakePhotoReq &>(from));
}


void TakePhotoReq::MergeFrom(const TakePhotoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.TakePhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_mixer_id() != 0) {
    _internal_set_mixer_id(from._internal_mixer_id());
  }
  if (from._internal_window_id() != 0) {
    _internal_set_window_id(from._internal_window_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TakePhotoReq::CopyFrom(const TakePhotoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.TakePhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePhotoReq::IsInitialized() const {
  return true;
}

void TakePhotoReq::InternalSwap(TakePhotoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_id_, lhs_arena,
      &other->room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TakePhotoReq, window_id_)
      + sizeof(TakePhotoReq::window_id_)
      - PROTOBUF_FIELD_OFFSET(TakePhotoReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TakePhotoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[40]);
}

// ===================================================================

class TakePhotoRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const TakePhotoRes* msg);
};

const ::ccs_msg::ResultInfo&
TakePhotoRes::_Internal::result(const TakePhotoRes* msg) {
  return *msg->result_;
}
void TakePhotoRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
TakePhotoRes::TakePhotoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.TakePhotoRes)
}
TakePhotoRes::TakePhotoRes(const TakePhotoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.TakePhotoRes)
}

inline void TakePhotoRes::SharedCtor() {
result_ = nullptr;
}

TakePhotoRes::~TakePhotoRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.TakePhotoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TakePhotoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void TakePhotoRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TakePhotoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.TakePhotoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakePhotoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TakePhotoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.TakePhotoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.TakePhotoRes)
  return target;
}

size_t TakePhotoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.TakePhotoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TakePhotoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TakePhotoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TakePhotoRes::GetClassData() const { return &_class_data_; }

void TakePhotoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TakePhotoRes *>(to)->MergeFrom(
      static_cast<const TakePhotoRes &>(from));
}


void TakePhotoRes::MergeFrom(const TakePhotoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.TakePhotoRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TakePhotoRes::CopyFrom(const TakePhotoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.TakePhotoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePhotoRes::IsInitialized() const {
  return true;
}

void TakePhotoRes::InternalSwap(TakePhotoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TakePhotoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fconference_5fmessage_2eproto_getter, &descriptor_table_ccs_5fconference_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fconference_5fmessage_2eproto[41]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ccs_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ccs_msg::VideoWindow*
Arena::CreateMaybeMessage< ::ccs_msg::VideoWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::VideoWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::VideoLayout*
Arena::CreateMaybeMessage< ::ccs_msg::VideoLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::VideoLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::ITCOSDParams*
Arena::CreateMaybeMessage< ::ccs_msg::ITCOSDParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::ITCOSDParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::VideoCodec*
Arena::CreateMaybeMessage< ::ccs_msg::VideoCodec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::VideoCodec >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MixerParams*
Arena::CreateMaybeMessage< ::ccs_msg::MixerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MixerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::VideoParams*
Arena::CreateMaybeMessage< ::ccs_msg::VideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::VideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::ConfInfo*
Arena::CreateMaybeMessage< ::ccs_msg::ConfInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::ConfInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::CreateMeetingReq*
Arena::CreateMaybeMessage< ::ccs_msg::CreateMeetingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::CreateMeetingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::CreateMeetingRes*
Arena::CreateMaybeMessage< ::ccs_msg::CreateMeetingRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::CreateMeetingRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::GetMeetingListReq*
Arena::CreateMaybeMessage< ::ccs_msg::GetMeetingListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::GetMeetingListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::ConferenceListRes*
Arena::CreateMaybeMessage< ::ccs_msg::ConferenceListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::ConferenceListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::InviteMemberReq*
Arena::CreateMaybeMessage< ::ccs_msg::InviteMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::InviteMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::InviteMemberRes*
Arena::CreateMaybeMessage< ::ccs_msg::InviteMemberRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::InviteMemberRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::DropMemberReq*
Arena::CreateMaybeMessage< ::ccs_msg::DropMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::DropMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::DropMemberRes*
Arena::CreateMaybeMessage< ::ccs_msg::DropMemberRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::DropMemberRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::RemoveConfReq*
Arena::CreateMaybeMessage< ::ccs_msg::RemoveConfReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::RemoveConfReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::RemoveConfRes*
Arena::CreateMaybeMessage< ::ccs_msg::RemoveConfRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::RemoveConfRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::GetVideoLayoutInfoReq*
Arena::CreateMaybeMessage< ::ccs_msg::GetVideoLayoutInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::GetVideoLayoutInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::GetVideoLayoutInfoRes*
Arena::CreateMaybeMessage< ::ccs_msg::GetVideoLayoutInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::GetVideoLayoutInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::SetVideoLayoutReq*
Arena::CreateMaybeMessage< ::ccs_msg::SetVideoLayoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::SetVideoLayoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::SetVideoLayoutRes*
Arena::CreateMaybeMessage< ::ccs_msg::SetVideoLayoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::SetVideoLayoutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::GetMembersInfoReq*
Arena::CreateMaybeMessage< ::ccs_msg::GetMembersInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::GetMembersInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MemberInfo*
Arena::CreateMaybeMessage< ::ccs_msg::MemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::GetMembersInfoRes*
Arena::CreateMaybeMessage< ::ccs_msg::GetMembersInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::GetMembersInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::RecordReqInfo*
Arena::CreateMaybeMessage< ::ccs_msg::RecordReqInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::RecordReqInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::StartRecordReq*
Arena::CreateMaybeMessage< ::ccs_msg::StartRecordReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::StartRecordReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::RecordResInfo*
Arena::CreateMaybeMessage< ::ccs_msg::RecordResInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::RecordResInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::StartRecordRes*
Arena::CreateMaybeMessage< ::ccs_msg::StartRecordRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::StartRecordRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::StopRecordReq*
Arena::CreateMaybeMessage< ::ccs_msg::StopRecordReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::StopRecordReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::StopRecordRes*
Arena::CreateMaybeMessage< ::ccs_msg::StopRecordRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::StopRecordRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MuteMemberReq*
Arena::CreateMaybeMessage< ::ccs_msg::MuteMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MuteMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MuteMemberRes*
Arena::CreateMaybeMessage< ::ccs_msg::MuteMemberRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MuteMemberRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::UnmuteMemberReq*
Arena::CreateMaybeMessage< ::ccs_msg::UnmuteMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::UnmuteMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::UnmuteMemberRes*
Arena::CreateMaybeMessage< ::ccs_msg::UnmuteMemberRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::UnmuteMemberRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MuteAllMemberReq*
Arena::CreateMaybeMessage< ::ccs_msg::MuteAllMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MuteAllMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MuteAllMemberRes*
Arena::CreateMaybeMessage< ::ccs_msg::MuteAllMemberRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MuteAllMemberRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::UnmuteAllMemberReq*
Arena::CreateMaybeMessage< ::ccs_msg::UnmuteAllMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::UnmuteAllMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::UnmuteAllMemberRes*
Arena::CreateMaybeMessage< ::ccs_msg::UnmuteAllMemberRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::UnmuteAllMemberRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::AssignChairmanReq*
Arena::CreateMaybeMessage< ::ccs_msg::AssignChairmanReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::AssignChairmanReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::AssignChairmanRes*
Arena::CreateMaybeMessage< ::ccs_msg::AssignChairmanRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::AssignChairmanRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::TakePhotoReq*
Arena::CreateMaybeMessage< ::ccs_msg::TakePhotoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::TakePhotoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::TakePhotoRes*
Arena::CreateMaybeMessage< ::ccs_msg::TakePhotoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::TakePhotoRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
