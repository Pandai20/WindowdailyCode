// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccs_gateway_message.proto

#include "ccs_gateway_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ccs_msg {
PROTOBUF_CONSTEXPR MonitorListReq::MonitorListReq(
    ::_pbi::ConstantInitialized)
  : header_(nullptr)
  , type_(0)
{}
struct MonitorListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorListReqDefaultTypeInternal() {}
  union {
    MonitorListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorListReqDefaultTypeInternal _MonitorListReq_default_instance_;
PROTOBUF_CONSTEXPR MonitorStreamInfo::MonitorStreamInfo(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , width_(0u)
  , height_(0u)
  , frame_(0u){}
struct MonitorStreamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorStreamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorStreamInfoDefaultTypeInternal() {}
  union {
    MonitorStreamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorStreamInfoDefaultTypeInternal _MonitorStreamInfo_default_instance_;
PROTOBUF_CONSTEXPR MonitorDeviceInfo::MonitorDeviceInfo(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_alia_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stream_info_(nullptr)
  , is_collect_(false)
  , is_online_(false)
  , is_support_ptz_(false){}
struct MonitorDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorDeviceInfoDefaultTypeInternal() {}
  union {
    MonitorDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorDeviceInfoDefaultTypeInternal _MonitorDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR MonitorListRes::MonitorListRes(
    ::_pbi::ConstantInitialized)
  : device_list_()
  , result_(nullptr){}
struct MonitorListResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorListResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorListResDefaultTypeInternal() {}
  union {
    MonitorListRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorListResDefaultTypeInternal _MonitorListRes_default_instance_;
PROTOBUF_CONSTEXPR CollectMonitorReq::CollectMonitorReq(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , is_collect_(false){}
struct CollectMonitorReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectMonitorReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectMonitorReqDefaultTypeInternal() {}
  union {
    CollectMonitorReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectMonitorReqDefaultTypeInternal _CollectMonitorReq_default_instance_;
PROTOBUF_CONSTEXPR CollectMonitorRes::CollectMonitorRes(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr)
  , is_collect_(false){}
struct CollectMonitorResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectMonitorResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectMonitorResDefaultTypeInternal() {}
  union {
    CollectMonitorRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectMonitorResDefaultTypeInternal _CollectMonitorRes_default_instance_;
PROTOBUF_CONSTEXPR MonitorStreamInfoReq::MonitorStreamInfoReq(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr){}
struct MonitorStreamInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorStreamInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorStreamInfoReqDefaultTypeInternal() {}
  union {
    MonitorStreamInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorStreamInfoReqDefaultTypeInternal _MonitorStreamInfoReq_default_instance_;
PROTOBUF_CONSTEXPR MonitorStreamInfoRes::MonitorStreamInfoRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr)
  , monitor_device_info_(nullptr){}
struct MonitorStreamInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorStreamInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorStreamInfoResDefaultTypeInternal() {}
  union {
    MonitorStreamInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorStreamInfoResDefaultTypeInternal _MonitorStreamInfoRes_default_instance_;
PROTOBUF_CONSTEXPR PtzControlInfo::PtzControlInfo(
    ::_pbi::ConstantInitialized)
  : is_start_(false)
  , hor_speed_(0u)
  , ver_speed_(0u)
  , zoom_speed_(0u)
  , focus_speed_(0u)
  , cmd_(0)
{}
struct PtzControlInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PtzControlInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PtzControlInfoDefaultTypeInternal() {}
  union {
    PtzControlInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PtzControlInfoDefaultTypeInternal _PtzControlInfo_default_instance_;
PROTOBUF_CONSTEXPR PtzControlReq::PtzControlReq(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , pt_control_info_(nullptr){}
struct PtzControlReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PtzControlReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PtzControlReqDefaultTypeInternal() {}
  union {
    PtzControlReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PtzControlReqDefaultTypeInternal _PtzControlReq_default_instance_;
PROTOBUF_CONSTEXPR PtzControlRes::PtzControlRes(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr){}
struct PtzControlResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PtzControlResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PtzControlResDefaultTypeInternal() {}
  union {
    PtzControlRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PtzControlResDefaultTypeInternal _PtzControlRes_default_instance_;
PROTOBUF_CONSTEXPR MonitorLayoutReq::MonitorLayoutReq(
    ::_pbi::ConstantInitialized)
  : header_(nullptr){}
struct MonitorLayoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorLayoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorLayoutReqDefaultTypeInternal() {}
  union {
    MonitorLayoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorLayoutReqDefaultTypeInternal _MonitorLayoutReq_default_instance_;
PROTOBUF_CONSTEXPR MonitorWindow::MonitorWindow(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_alia_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stream_info_(nullptr)
  , window_id_(0u){}
struct MonitorWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorWindowDefaultTypeInternal() {}
  union {
    MonitorWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorWindowDefaultTypeInternal _MonitorWindow_default_instance_;
PROTOBUF_CONSTEXPR MonitorLayoutRes::MonitorLayoutRes(
    ::_pbi::ConstantInitialized)
  : monitor_window_list_()
  , result_(nullptr)
  , layout_id_(0)
{}
struct MonitorLayoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorLayoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorLayoutResDefaultTypeInternal() {}
  union {
    MonitorLayoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorLayoutResDefaultTypeInternal _MonitorLayoutRes_default_instance_;
PROTOBUF_CONSTEXPR SetMonitorLayoutReq::SetMonitorLayoutReq(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , window_id_(0u){}
struct SetMonitorLayoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMonitorLayoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMonitorLayoutReqDefaultTypeInternal() {}
  union {
    SetMonitorLayoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMonitorLayoutReqDefaultTypeInternal _SetMonitorLayoutReq_default_instance_;
PROTOBUF_CONSTEXPR SetMonitorLayoutRes::SetMonitorLayoutRes(
    ::_pbi::ConstantInitialized)
  : device_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(nullptr)
  , window_id_(0u){}
struct SetMonitorLayoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMonitorLayoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMonitorLayoutResDefaultTypeInternal() {}
  union {
    SetMonitorLayoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMonitorLayoutResDefaultTypeInternal _SetMonitorLayoutRes_default_instance_;
PROTOBUF_CONSTEXPR SwitchMonitorLayoutReq::SwitchMonitorLayoutReq(
    ::_pbi::ConstantInitialized)
  : header_(nullptr)
  , layout_id_(0)
{}
struct SwitchMonitorLayoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchMonitorLayoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchMonitorLayoutReqDefaultTypeInternal() {}
  union {
    SwitchMonitorLayoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchMonitorLayoutReqDefaultTypeInternal _SwitchMonitorLayoutReq_default_instance_;
PROTOBUF_CONSTEXPR SwtichMonitorLayoutRes::SwtichMonitorLayoutRes(
    ::_pbi::ConstantInitialized)
  : result_(nullptr)
  , layout_id_(0)
{}
struct SwtichMonitorLayoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwtichMonitorLayoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwtichMonitorLayoutResDefaultTypeInternal() {}
  union {
    SwtichMonitorLayoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwtichMonitorLayoutResDefaultTypeInternal _SwtichMonitorLayoutRes_default_instance_;
}  // namespace ccs_msg
static ::_pb::Metadata file_level_metadata_ccs_5fgateway_5fmessage_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ccs_5fgateway_5fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ccs_5fgateway_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_ccs_5fgateway_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorListReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorListReq, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfo, width_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfo, height_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfo, frame_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfo, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, device_alia_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, is_collect_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, is_online_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, is_support_ptz_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorDeviceInfo, stream_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorListRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorListRes, device_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorReq, device_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorReq, is_collect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorRes, device_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::CollectMonitorRes, is_collect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfoReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfoReq, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfoRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorStreamInfoRes, monitor_device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, is_start_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, hor_speed_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, ver_speed_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, zoom_speed_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, focus_speed_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlInfo, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlReq, device_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlReq, pt_control_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::PtzControlRes, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorLayoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorLayoutReq, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorWindow, window_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorWindow, device_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorWindow, device_alia_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorWindow, stream_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorLayoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorLayoutRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorLayoutRes, layout_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::MonitorLayoutRes, monitor_window_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutReq, window_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutReq, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutRes, window_id_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SetMonitorLayoutRes, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SwitchMonitorLayoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SwitchMonitorLayoutReq, header_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SwitchMonitorLayoutReq, layout_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SwtichMonitorLayoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SwtichMonitorLayoutRes, result_),
  PROTOBUF_FIELD_OFFSET(::ccs_msg::SwtichMonitorLayoutRes, layout_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ccs_msg::MonitorListReq)},
  { 8, -1, -1, sizeof(::ccs_msg::MonitorStreamInfo)},
  { 18, -1, -1, sizeof(::ccs_msg::MonitorDeviceInfo)},
  { 30, -1, -1, sizeof(::ccs_msg::MonitorListRes)},
  { 38, -1, -1, sizeof(::ccs_msg::CollectMonitorReq)},
  { 47, -1, -1, sizeof(::ccs_msg::CollectMonitorRes)},
  { 56, -1, -1, sizeof(::ccs_msg::MonitorStreamInfoReq)},
  { 64, -1, -1, sizeof(::ccs_msg::MonitorStreamInfoRes)},
  { 72, -1, -1, sizeof(::ccs_msg::PtzControlInfo)},
  { 84, -1, -1, sizeof(::ccs_msg::PtzControlReq)},
  { 93, -1, -1, sizeof(::ccs_msg::PtzControlRes)},
  { 101, -1, -1, sizeof(::ccs_msg::MonitorLayoutReq)},
  { 108, -1, -1, sizeof(::ccs_msg::MonitorWindow)},
  { 118, -1, -1, sizeof(::ccs_msg::MonitorLayoutRes)},
  { 127, -1, -1, sizeof(::ccs_msg::SetMonitorLayoutReq)},
  { 136, -1, -1, sizeof(::ccs_msg::SetMonitorLayoutRes)},
  { 145, -1, -1, sizeof(::ccs_msg::SwitchMonitorLayoutReq)},
  { 153, -1, -1, sizeof(::ccs_msg::SwtichMonitorLayoutRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ccs_msg::_MonitorListReq_default_instance_._instance,
  &::ccs_msg::_MonitorStreamInfo_default_instance_._instance,
  &::ccs_msg::_MonitorDeviceInfo_default_instance_._instance,
  &::ccs_msg::_MonitorListRes_default_instance_._instance,
  &::ccs_msg::_CollectMonitorReq_default_instance_._instance,
  &::ccs_msg::_CollectMonitorRes_default_instance_._instance,
  &::ccs_msg::_MonitorStreamInfoReq_default_instance_._instance,
  &::ccs_msg::_MonitorStreamInfoRes_default_instance_._instance,
  &::ccs_msg::_PtzControlInfo_default_instance_._instance,
  &::ccs_msg::_PtzControlReq_default_instance_._instance,
  &::ccs_msg::_PtzControlRes_default_instance_._instance,
  &::ccs_msg::_MonitorLayoutReq_default_instance_._instance,
  &::ccs_msg::_MonitorWindow_default_instance_._instance,
  &::ccs_msg::_MonitorLayoutRes_default_instance_._instance,
  &::ccs_msg::_SetMonitorLayoutReq_default_instance_._instance,
  &::ccs_msg::_SetMonitorLayoutRes_default_instance_._instance,
  &::ccs_msg::_SwitchMonitorLayoutReq_default_instance_._instance,
  &::ccs_msg::_SwtichMonitorLayoutRes_default_instance_._instance,
};

const char descriptor_table_protodef_ccs_5fgateway_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ccs_gateway_message.proto\022\007ccs_msg\032\030cc"
  "s_common_message.proto\"\\\n\016MonitorListReq"
  "\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.MsgHeader\022&\n\004"
  "type\030\002 \001(\0162\030.ccs_msg.MonitorListType\"N\n\021"
  "MonitorStreamInfo\022\r\n\005width\030\001 \001(\r\022\016\n\006heig"
  "ht\030\002 \001(\r\022\r\n\005frame\030\003 \001(\r\022\013\n\003url\030\004 \001(\t\"\253\001\n"
  "\021MonitorDeviceInfo\022\021\n\tdevice_id\030\001 \001(\t\022\023\n"
  "\013device_alia\030\002 \001(\t\022\022\n\nis_collect\030\003 \001(\010\022\021"
  "\n\tis_online\030\004 \001(\010\022\026\n\016is_support_ptz\030\005 \001("
  "\010\022/\n\013stream_info\030\006 \001(\0132\032.ccs_msg.Monitor"
  "StreamInfo\"f\n\016MonitorListRes\022#\n\006result\030\001"
  " \001(\0132\023.ccs_msg.ResultInfo\022/\n\013device_list"
  "\030\002 \003(\0132\032.ccs_msg.MonitorDeviceInfo\"^\n\021Co"
  "llectMonitorReq\022\"\n\006header\030\001 \001(\0132\022.ccs_ms"
  "g.MsgHeader\022\021\n\tdevice_id\030\002 \001(\t\022\022\n\nis_col"
  "lect\030\003 \001(\010\"_\n\021CollectMonitorRes\022#\n\006resul"
  "t\030\001 \001(\0132\023.ccs_msg.ResultInfo\022\021\n\tdevice_i"
  "d\030\002 \001(\t\022\022\n\nis_collect\030\003 \001(\010\"M\n\024MonitorSt"
  "reamInfoReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg.Ms"
  "gHeader\022\021\n\tdevice_id\030\002 \001(\t\"t\n\024MonitorStr"
  "eamInfoRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg.Res"
  "ultInfo\0227\n\023monitor_device_info\030\002 \001(\0132\032.c"
  "cs_msg.MonitorDeviceInfo\"\226\001\n\016PtzControlI"
  "nfo\022\020\n\010is_start\030\001 \001(\010\022\021\n\thor_speed\030\002 \001(\r"
  "\022\021\n\tver_speed\030\003 \001(\r\022\022\n\nzoom_speed\030\004 \001(\r\022"
  "\023\n\013focus_speed\030\005 \001(\r\022#\n\003cmd\030\006 \001(\0162\026.ccs_"
  "msg.PtzControlCmd\"x\n\rPtzControlReq\022\"\n\006he"
  "ader\030\001 \001(\0132\022.ccs_msg.MsgHeader\022\021\n\tdevice"
  "_id\030\002 \001(\t\0220\n\017pt_control_info\030\003 \001(\0132\027.ccs"
  "_msg.PtzControlInfo\"G\n\rPtzControlRes\022#\n\006"
  "result\030\001 \001(\0132\023.ccs_msg.ResultInfo\022\021\n\tdev"
  "ice_id\030\002 \001(\t\"6\n\020MonitorLayoutReq\022\"\n\006head"
  "er\030\001 \001(\0132\022.ccs_msg.MsgHeader\"{\n\rMonitorW"
  "indow\022\021\n\twindow_id\030\001 \001(\r\022\021\n\tdevice_id\030\002 "
  "\001(\t\022\023\n\013device_alia\030\003 \001(\t\022/\n\013stream_info\030"
  "\004 \001(\0132\032.ccs_msg.MonitorStreamInfo\"\234\001\n\020Mo"
  "nitorLayoutRes\022#\n\006result\030\001 \001(\0132\023.ccs_msg"
  ".ResultInfo\022.\n\tlayout_id\030\002 \001(\0162\033.ccs_msg"
  ".ITCVideoLayoutType\0223\n\023monitor_window_li"
  "st\030\003 \003(\0132\026.ccs_msg.MonitorWindow\"_\n\023SetM"
  "onitorLayoutReq\022\"\n\006header\030\001 \001(\0132\022.ccs_ms"
  "g.MsgHeader\022\021\n\twindow_id\030\002 \001(\r\022\021\n\tdevice"
  "_id\030\003 \001(\t\"`\n\023SetMonitorLayoutRes\022#\n\006resu"
  "lt\030\001 \001(\0132\023.ccs_msg.ResultInfo\022\021\n\twindow_"
  "id\030\002 \001(\r\022\021\n\tdevice_id\030\003 \001(\t\"l\n\026SwitchMon"
  "itorLayoutReq\022\"\n\006header\030\001 \001(\0132\022.ccs_msg."
  "MsgHeader\022.\n\tlayout_id\030\002 \001(\0162\033.ccs_msg.I"
  "TCVideoLayoutType\"m\n\026SwtichMonitorLayout"
  "Res\022#\n\006result\030\001 \001(\0132\023.ccs_msg.ResultInfo"
  "\022.\n\tlayout_id\030\002 \001(\0162\033.ccs_msg.ITCVideoLa"
  "youtType*K\n\017MonitorListType\022\031\n\025e_Monitor"
  "ListType_All\020\000\022\035\n\031e_MonitorListType_Coll"
  "ect\020\001*\373\001\n\rPtzControlCmd\022\017\n\013e_GOTO_HOME\020\000"
  "\022\017\n\013e_TURN_LEFT\020\001\022\020\n\014e_TURN_RIGHT\020\002\022\r\n\te"
  "_TURN_UP\020\003\022\017\n\013e_TURN_DOWN\020\004\022\022\n\016e_TURN_UP"
  "_LEFT\020\005\022\023\n\017e_TURN_UP_RIGHT\020\006\022\024\n\020e_TURN_D"
  "OWN_LEFT\020\007\022\025\n\021e_TURN_DOWN_RIGHT\020\010\022\r\n\te_Z"
  "OOM_IN\020\t\022\016\n\ne_ZOOM_OUT\020\n\022\017\n\013e_FOCUS_FAR\020"
  "\013\022\020\n\014e_FOCUS_NEAR\020\014b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ccs_5fgateway_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_ccs_5fcommon_5fmessage_2eproto,
};
static ::_pbi::once_flag descriptor_table_ccs_5fgateway_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ccs_5fgateway_5fmessage_2eproto = {
    false, false, 2347, descriptor_table_protodef_ccs_5fgateway_5fmessage_2eproto,
    "ccs_gateway_message.proto",
    &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once, descriptor_table_ccs_5fgateway_5fmessage_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_ccs_5fgateway_5fmessage_2eproto::offsets,
    file_level_metadata_ccs_5fgateway_5fmessage_2eproto, file_level_enum_descriptors_ccs_5fgateway_5fmessage_2eproto,
    file_level_service_descriptors_ccs_5fgateway_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter() {
  return &descriptor_table_ccs_5fgateway_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ccs_5fgateway_5fmessage_2eproto(&descriptor_table_ccs_5fgateway_5fmessage_2eproto);
namespace ccs_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonitorListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fgateway_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fgateway_5fmessage_2eproto[0];
}
bool MonitorListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PtzControlCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ccs_5fgateway_5fmessage_2eproto);
  return file_level_enum_descriptors_ccs_5fgateway_5fmessage_2eproto[1];
}
bool PtzControlCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MonitorListReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const MonitorListReq* msg);
};

const ::ccs_msg::MsgHeader&
MonitorListReq::_Internal::header(const MonitorListReq* msg) {
  return *msg->header_;
}
void MonitorListReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MonitorListReq::MonitorListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorListReq)
}
MonitorListReq::MonitorListReq(const MonitorListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorListReq)
}

inline void MonitorListReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

MonitorListReq::~MonitorListReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MonitorListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MonitorListType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ccs_msg::MonitorListType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.MonitorListType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorListReq)
  return target;
}

size_t MonitorListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.MonitorListType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorListReq::GetClassData() const { return &_class_data_; }

void MonitorListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorListReq *>(to)->MergeFrom(
      static_cast<const MonitorListReq &>(from));
}


void MonitorListReq::MergeFrom(const MonitorListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorListReq::CopyFrom(const MonitorListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorListReq::IsInitialized() const {
  return true;
}

void MonitorListReq::InternalSwap(MonitorListReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorListReq, type_)
      + sizeof(MonitorListReq::type_)
      - PROTOBUF_FIELD_OFFSET(MonitorListReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[0]);
}

// ===================================================================

class MonitorStreamInfo::_Internal {
 public:
};

MonitorStreamInfo::MonitorStreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorStreamInfo)
}
MonitorStreamInfo::MonitorStreamInfo(const MonitorStreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&width_)) + sizeof(frame_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorStreamInfo)
}

inline void MonitorStreamInfo::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&width_)) + sizeof(frame_));
}

MonitorStreamInfo::~MonitorStreamInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorStreamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorStreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void MonitorStreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorStreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorStreamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorStreamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MonitorStreamInfo.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorStreamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorStreamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 frame = 3;
  if (this->_internal_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MonitorStreamInfo.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorStreamInfo)
  return target;
}

size_t MonitorStreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorStreamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 frame = 3;
  if (this->_internal_frame() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorStreamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorStreamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorStreamInfo::GetClassData() const { return &_class_data_; }

void MonitorStreamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorStreamInfo *>(to)->MergeFrom(
      static_cast<const MonitorStreamInfo &>(from));
}


void MonitorStreamInfo::MergeFrom(const MonitorStreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorStreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorStreamInfo::CopyFrom(const MonitorStreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorStreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorStreamInfo::IsInitialized() const {
  return true;
}

void MonitorStreamInfo::InternalSwap(MonitorStreamInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorStreamInfo, frame_)
      + sizeof(MonitorStreamInfo::frame_)
      - PROTOBUF_FIELD_OFFSET(MonitorStreamInfo, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorStreamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[1]);
}

// ===================================================================

class MonitorDeviceInfo::_Internal {
 public:
  static const ::ccs_msg::MonitorStreamInfo& stream_info(const MonitorDeviceInfo* msg);
};

const ::ccs_msg::MonitorStreamInfo&
MonitorDeviceInfo::_Internal::stream_info(const MonitorDeviceInfo* msg) {
  return *msg->stream_info_;
}
MonitorDeviceInfo::MonitorDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorDeviceInfo)
}
MonitorDeviceInfo::MonitorDeviceInfo(const MonitorDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  device_alia_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_alia_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_alia().empty()) {
    device_alia_.Set(from._internal_device_alia(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stream_info()) {
    stream_info_ = new ::ccs_msg::MonitorStreamInfo(*from.stream_info_);
  } else {
    stream_info_ = nullptr;
  }
  ::memcpy(&is_collect_, &from.is_collect_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_support_ptz_) -
    reinterpret_cast<char*>(&is_collect_)) + sizeof(is_support_ptz_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorDeviceInfo)
}

inline void MonitorDeviceInfo::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_alia_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_alia_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_support_ptz_) -
    reinterpret_cast<char*>(&stream_info_)) + sizeof(is_support_ptz_));
}

MonitorDeviceInfo::~MonitorDeviceInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  device_alia_.Destroy();
  if (this != internal_default_instance()) delete stream_info_;
}

void MonitorDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  device_alia_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stream_info_ != nullptr) {
    delete stream_info_;
  }
  stream_info_ = nullptr;
  ::memset(&is_collect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_support_ptz_) -
      reinterpret_cast<char*>(&is_collect_)) + sizeof(is_support_ptz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MonitorDeviceInfo.device_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_alia = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_alia();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MonitorDeviceInfo.device_alia"));
        } else
          goto handle_unusual;
        continue;
      // bool is_collect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_support_ptz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_support_ptz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MonitorStreamInfo stream_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MonitorDeviceInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string device_alia = 2;
  if (!this->_internal_device_alia().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_alia().data(), static_cast<int>(this->_internal_device_alia().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MonitorDeviceInfo.device_alia");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_alia(), target);
  }

  // bool is_collect = 3;
  if (this->_internal_is_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_collect(), target);
  }

  // bool is_online = 4;
  if (this->_internal_is_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_online(), target);
  }

  // bool is_support_ptz = 5;
  if (this->_internal_is_support_ptz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_support_ptz(), target);
  }

  // .ccs_msg.MonitorStreamInfo stream_info = 6;
  if (this->_internal_has_stream_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stream_info(this),
        _Internal::stream_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorDeviceInfo)
  return target;
}

size_t MonitorDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string device_alia = 2;
  if (!this->_internal_device_alia().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_alia());
  }

  // .ccs_msg.MonitorStreamInfo stream_info = 6;
  if (this->_internal_has_stream_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_info_);
  }

  // bool is_collect = 3;
  if (this->_internal_is_collect() != 0) {
    total_size += 1 + 1;
  }

  // bool is_online = 4;
  if (this->_internal_is_online() != 0) {
    total_size += 1 + 1;
  }

  // bool is_support_ptz = 5;
  if (this->_internal_is_support_ptz() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorDeviceInfo::GetClassData() const { return &_class_data_; }

void MonitorDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorDeviceInfo *>(to)->MergeFrom(
      static_cast<const MonitorDeviceInfo &>(from));
}


void MonitorDeviceInfo::MergeFrom(const MonitorDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_device_alia().empty()) {
    _internal_set_device_alia(from._internal_device_alia());
  }
  if (from._internal_has_stream_info()) {
    _internal_mutable_stream_info()->::ccs_msg::MonitorStreamInfo::MergeFrom(from._internal_stream_info());
  }
  if (from._internal_is_collect() != 0) {
    _internal_set_is_collect(from._internal_is_collect());
  }
  if (from._internal_is_online() != 0) {
    _internal_set_is_online(from._internal_is_online());
  }
  if (from._internal_is_support_ptz() != 0) {
    _internal_set_is_support_ptz(from._internal_is_support_ptz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorDeviceInfo::CopyFrom(const MonitorDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorDeviceInfo::IsInitialized() const {
  return true;
}

void MonitorDeviceInfo::InternalSwap(MonitorDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_alia_, lhs_arena,
      &other->device_alia_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorDeviceInfo, is_support_ptz_)
      + sizeof(MonitorDeviceInfo::is_support_ptz_)
      - PROTOBUF_FIELD_OFFSET(MonitorDeviceInfo, stream_info_)>(
          reinterpret_cast<char*>(&stream_info_),
          reinterpret_cast<char*>(&other->stream_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[2]);
}

// ===================================================================

class MonitorListRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const MonitorListRes* msg);
};

const ::ccs_msg::ResultInfo&
MonitorListRes::_Internal::result(const MonitorListRes* msg) {
  return *msg->result_;
}
void MonitorListRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
MonitorListRes::MonitorListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  device_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorListRes)
}
MonitorListRes::MonitorListRes(const MonitorListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_list_(from.device_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorListRes)
}

inline void MonitorListRes::SharedCtor() {
result_ = nullptr;
}

MonitorListRes::~MonitorListRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorListRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void MonitorListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorListRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorListRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.MonitorDeviceInfo device_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorListRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorListRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // repeated .ccs_msg.MonitorDeviceInfo device_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorListRes)
  return target;
}

size_t MonitorListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorListRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.MonitorDeviceInfo device_list = 2;
  total_size += 1UL * this->_internal_device_list_size();
  for (const auto& msg : this->device_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorListRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorListRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorListRes::GetClassData() const { return &_class_data_; }

void MonitorListRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorListRes *>(to)->MergeFrom(
      static_cast<const MonitorListRes &>(from));
}


void MonitorListRes::MergeFrom(const MonitorListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorListRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  device_list_.MergeFrom(from.device_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorListRes::CopyFrom(const MonitorListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorListRes::IsInitialized() const {
  return true;
}

void MonitorListRes::InternalSwap(MonitorListRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  device_list_.InternalSwap(&other->device_list_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorListRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[3]);
}

// ===================================================================

class CollectMonitorReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const CollectMonitorReq* msg);
};

const ::ccs_msg::MsgHeader&
CollectMonitorReq::_Internal::header(const CollectMonitorReq* msg) {
  return *msg->header_;
}
void CollectMonitorReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
CollectMonitorReq::CollectMonitorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.CollectMonitorReq)
}
CollectMonitorReq::CollectMonitorReq(const CollectMonitorReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  is_collect_ = from.is_collect_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.CollectMonitorReq)
}

inline void CollectMonitorReq::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&header_)) + sizeof(is_collect_));
}

CollectMonitorReq::~CollectMonitorReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.CollectMonitorReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectMonitorReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void CollectMonitorReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectMonitorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.CollectMonitorReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  is_collect_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectMonitorReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CollectMonitorReq.device_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_collect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectMonitorReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.CollectMonitorReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CollectMonitorReq.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // bool is_collect = 3;
  if (this->_internal_is_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_collect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.CollectMonitorReq)
  return target;
}

size_t CollectMonitorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.CollectMonitorReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool is_collect = 3;
  if (this->_internal_is_collect() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectMonitorReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollectMonitorReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectMonitorReq::GetClassData() const { return &_class_data_; }

void CollectMonitorReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CollectMonitorReq *>(to)->MergeFrom(
      static_cast<const CollectMonitorReq &>(from));
}


void CollectMonitorReq::MergeFrom(const CollectMonitorReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.CollectMonitorReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_is_collect() != 0) {
    _internal_set_is_collect(from._internal_is_collect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectMonitorReq::CopyFrom(const CollectMonitorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.CollectMonitorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectMonitorReq::IsInitialized() const {
  return true;
}

void CollectMonitorReq::InternalSwap(CollectMonitorReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectMonitorReq, is_collect_)
      + sizeof(CollectMonitorReq::is_collect_)
      - PROTOBUF_FIELD_OFFSET(CollectMonitorReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectMonitorReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[4]);
}

// ===================================================================

class CollectMonitorRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const CollectMonitorRes* msg);
};

const ::ccs_msg::ResultInfo&
CollectMonitorRes::_Internal::result(const CollectMonitorRes* msg) {
  return *msg->result_;
}
void CollectMonitorRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
CollectMonitorRes::CollectMonitorRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.CollectMonitorRes)
}
CollectMonitorRes::CollectMonitorRes(const CollectMonitorRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  is_collect_ = from.is_collect_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.CollectMonitorRes)
}

inline void CollectMonitorRes::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&result_)) + sizeof(is_collect_));
}

CollectMonitorRes::~CollectMonitorRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.CollectMonitorRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectMonitorRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void CollectMonitorRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollectMonitorRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.CollectMonitorRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  is_collect_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectMonitorRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.CollectMonitorRes.device_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_collect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectMonitorRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.CollectMonitorRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.CollectMonitorRes.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // bool is_collect = 3;
  if (this->_internal_is_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_collect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.CollectMonitorRes)
  return target;
}

size_t CollectMonitorRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.CollectMonitorRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool is_collect = 3;
  if (this->_internal_is_collect() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectMonitorRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollectMonitorRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectMonitorRes::GetClassData() const { return &_class_data_; }

void CollectMonitorRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CollectMonitorRes *>(to)->MergeFrom(
      static_cast<const CollectMonitorRes &>(from));
}


void CollectMonitorRes::MergeFrom(const CollectMonitorRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.CollectMonitorRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_is_collect() != 0) {
    _internal_set_is_collect(from._internal_is_collect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectMonitorRes::CopyFrom(const CollectMonitorRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.CollectMonitorRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectMonitorRes::IsInitialized() const {
  return true;
}

void CollectMonitorRes::InternalSwap(CollectMonitorRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectMonitorRes, is_collect_)
      + sizeof(CollectMonitorRes::is_collect_)
      - PROTOBUF_FIELD_OFFSET(CollectMonitorRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectMonitorRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[5]);
}

// ===================================================================

class MonitorStreamInfoReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const MonitorStreamInfoReq* msg);
};

const ::ccs_msg::MsgHeader&
MonitorStreamInfoReq::_Internal::header(const MonitorStreamInfoReq* msg) {
  return *msg->header_;
}
void MonitorStreamInfoReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MonitorStreamInfoReq::MonitorStreamInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorStreamInfoReq)
}
MonitorStreamInfoReq::MonitorStreamInfoReq(const MonitorStreamInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorStreamInfoReq)
}

inline void MonitorStreamInfoReq::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

MonitorStreamInfoReq::~MonitorStreamInfoReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorStreamInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorStreamInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void MonitorStreamInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorStreamInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorStreamInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorStreamInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MonitorStreamInfoReq.device_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorStreamInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorStreamInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MonitorStreamInfoReq.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorStreamInfoReq)
  return target;
}

size_t MonitorStreamInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorStreamInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorStreamInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorStreamInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorStreamInfoReq::GetClassData() const { return &_class_data_; }

void MonitorStreamInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorStreamInfoReq *>(to)->MergeFrom(
      static_cast<const MonitorStreamInfoReq &>(from));
}


void MonitorStreamInfoReq::MergeFrom(const MonitorStreamInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorStreamInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorStreamInfoReq::CopyFrom(const MonitorStreamInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorStreamInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorStreamInfoReq::IsInitialized() const {
  return true;
}

void MonitorStreamInfoReq::InternalSwap(MonitorStreamInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorStreamInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[6]);
}

// ===================================================================

class MonitorStreamInfoRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const MonitorStreamInfoRes* msg);
  static const ::ccs_msg::MonitorDeviceInfo& monitor_device_info(const MonitorStreamInfoRes* msg);
};

const ::ccs_msg::ResultInfo&
MonitorStreamInfoRes::_Internal::result(const MonitorStreamInfoRes* msg) {
  return *msg->result_;
}
const ::ccs_msg::MonitorDeviceInfo&
MonitorStreamInfoRes::_Internal::monitor_device_info(const MonitorStreamInfoRes* msg) {
  return *msg->monitor_device_info_;
}
void MonitorStreamInfoRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
MonitorStreamInfoRes::MonitorStreamInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorStreamInfoRes)
}
MonitorStreamInfoRes::MonitorStreamInfoRes(const MonitorStreamInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_monitor_device_info()) {
    monitor_device_info_ = new ::ccs_msg::MonitorDeviceInfo(*from.monitor_device_info_);
  } else {
    monitor_device_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorStreamInfoRes)
}

inline void MonitorStreamInfoRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&monitor_device_info_) -
    reinterpret_cast<char*>(&result_)) + sizeof(monitor_device_info_));
}

MonitorStreamInfoRes::~MonitorStreamInfoRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorStreamInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorStreamInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete monitor_device_info_;
}

void MonitorStreamInfoRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorStreamInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorStreamInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && monitor_device_info_ != nullptr) {
    delete monitor_device_info_;
  }
  monitor_device_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorStreamInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MonitorDeviceInfo monitor_device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitor_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorStreamInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorStreamInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.MonitorDeviceInfo monitor_device_info = 2;
  if (this->_internal_has_monitor_device_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::monitor_device_info(this),
        _Internal::monitor_device_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorStreamInfoRes)
  return target;
}

size_t MonitorStreamInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorStreamInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .ccs_msg.MonitorDeviceInfo monitor_device_info = 2;
  if (this->_internal_has_monitor_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monitor_device_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorStreamInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorStreamInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorStreamInfoRes::GetClassData() const { return &_class_data_; }

void MonitorStreamInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorStreamInfoRes *>(to)->MergeFrom(
      static_cast<const MonitorStreamInfoRes &>(from));
}


void MonitorStreamInfoRes::MergeFrom(const MonitorStreamInfoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorStreamInfoRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_has_monitor_device_info()) {
    _internal_mutable_monitor_device_info()->::ccs_msg::MonitorDeviceInfo::MergeFrom(from._internal_monitor_device_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorStreamInfoRes::CopyFrom(const MonitorStreamInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorStreamInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorStreamInfoRes::IsInitialized() const {
  return true;
}

void MonitorStreamInfoRes::InternalSwap(MonitorStreamInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorStreamInfoRes, monitor_device_info_)
      + sizeof(MonitorStreamInfoRes::monitor_device_info_)
      - PROTOBUF_FIELD_OFFSET(MonitorStreamInfoRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorStreamInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[7]);
}

// ===================================================================

class PtzControlInfo::_Internal {
 public:
};

PtzControlInfo::PtzControlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.PtzControlInfo)
}
PtzControlInfo::PtzControlInfo(const PtzControlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_start_, &from.is_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&is_start_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:ccs_msg.PtzControlInfo)
}

inline void PtzControlInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&is_start_)) + sizeof(cmd_));
}

PtzControlInfo::~PtzControlInfo() {
  // @@protoc_insertion_point(destructor:ccs_msg.PtzControlInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PtzControlInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PtzControlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PtzControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.PtzControlInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&is_start_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzControlInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hor_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hor_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ver_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ver_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 zoom_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          zoom_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 focus_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          focus_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.PtzControlCmd cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::ccs_msg::PtzControlCmd>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PtzControlInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.PtzControlInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_start = 1;
  if (this->_internal_is_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_start(), target);
  }

  // uint32 hor_speed = 2;
  if (this->_internal_hor_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hor_speed(), target);
  }

  // uint32 ver_speed = 3;
  if (this->_internal_ver_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ver_speed(), target);
  }

  // uint32 zoom_speed = 4;
  if (this->_internal_zoom_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_zoom_speed(), target);
  }

  // uint32 focus_speed = 5;
  if (this->_internal_focus_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_focus_speed(), target);
  }

  // .ccs_msg.PtzControlCmd cmd = 6;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.PtzControlInfo)
  return target;
}

size_t PtzControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.PtzControlInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_start = 1;
  if (this->_internal_is_start() != 0) {
    total_size += 1 + 1;
  }

  // uint32 hor_speed = 2;
  if (this->_internal_hor_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hor_speed());
  }

  // uint32 ver_speed = 3;
  if (this->_internal_ver_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver_speed());
  }

  // uint32 zoom_speed = 4;
  if (this->_internal_zoom_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zoom_speed());
  }

  // uint32 focus_speed = 5;
  if (this->_internal_focus_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_focus_speed());
  }

  // .ccs_msg.PtzControlCmd cmd = 6;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PtzControlInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PtzControlInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PtzControlInfo::GetClassData() const { return &_class_data_; }

void PtzControlInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PtzControlInfo *>(to)->MergeFrom(
      static_cast<const PtzControlInfo &>(from));
}


void PtzControlInfo::MergeFrom(const PtzControlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.PtzControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_start() != 0) {
    _internal_set_is_start(from._internal_is_start());
  }
  if (from._internal_hor_speed() != 0) {
    _internal_set_hor_speed(from._internal_hor_speed());
  }
  if (from._internal_ver_speed() != 0) {
    _internal_set_ver_speed(from._internal_ver_speed());
  }
  if (from._internal_zoom_speed() != 0) {
    _internal_set_zoom_speed(from._internal_zoom_speed());
  }
  if (from._internal_focus_speed() != 0) {
    _internal_set_focus_speed(from._internal_focus_speed());
  }
  if (from._internal_cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PtzControlInfo::CopyFrom(const PtzControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.PtzControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzControlInfo::IsInitialized() const {
  return true;
}

void PtzControlInfo::InternalSwap(PtzControlInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PtzControlInfo, cmd_)
      + sizeof(PtzControlInfo::cmd_)
      - PROTOBUF_FIELD_OFFSET(PtzControlInfo, is_start_)>(
          reinterpret_cast<char*>(&is_start_),
          reinterpret_cast<char*>(&other->is_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzControlInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[8]);
}

// ===================================================================

class PtzControlReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const PtzControlReq* msg);
  static const ::ccs_msg::PtzControlInfo& pt_control_info(const PtzControlReq* msg);
};

const ::ccs_msg::MsgHeader&
PtzControlReq::_Internal::header(const PtzControlReq* msg) {
  return *msg->header_;
}
const ::ccs_msg::PtzControlInfo&
PtzControlReq::_Internal::pt_control_info(const PtzControlReq* msg) {
  return *msg->pt_control_info_;
}
void PtzControlReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PtzControlReq::PtzControlReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.PtzControlReq)
}
PtzControlReq::PtzControlReq(const PtzControlReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pt_control_info()) {
    pt_control_info_ = new ::ccs_msg::PtzControlInfo(*from.pt_control_info_);
  } else {
    pt_control_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.PtzControlReq)
}

inline void PtzControlReq::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pt_control_info_) -
    reinterpret_cast<char*>(&header_)) + sizeof(pt_control_info_));
}

PtzControlReq::~PtzControlReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.PtzControlReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PtzControlReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pt_control_info_;
}

void PtzControlReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PtzControlReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.PtzControlReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pt_control_info_ != nullptr) {
    delete pt_control_info_;
  }
  pt_control_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzControlReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.PtzControlReq.device_id"));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.PtzControlInfo pt_control_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt_control_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PtzControlReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.PtzControlReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.PtzControlReq.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // .ccs_msg.PtzControlInfo pt_control_info = 3;
  if (this->_internal_has_pt_control_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pt_control_info(this),
        _Internal::pt_control_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.PtzControlReq)
  return target;
}

size_t PtzControlReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.PtzControlReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.PtzControlInfo pt_control_info = 3;
  if (this->_internal_has_pt_control_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_control_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PtzControlReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PtzControlReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PtzControlReq::GetClassData() const { return &_class_data_; }

void PtzControlReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PtzControlReq *>(to)->MergeFrom(
      static_cast<const PtzControlReq &>(from));
}


void PtzControlReq::MergeFrom(const PtzControlReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.PtzControlReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_pt_control_info()) {
    _internal_mutable_pt_control_info()->::ccs_msg::PtzControlInfo::MergeFrom(from._internal_pt_control_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PtzControlReq::CopyFrom(const PtzControlReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.PtzControlReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzControlReq::IsInitialized() const {
  return true;
}

void PtzControlReq::InternalSwap(PtzControlReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PtzControlReq, pt_control_info_)
      + sizeof(PtzControlReq::pt_control_info_)
      - PROTOBUF_FIELD_OFFSET(PtzControlReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzControlReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[9]);
}

// ===================================================================

class PtzControlRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const PtzControlRes* msg);
};

const ::ccs_msg::ResultInfo&
PtzControlRes::_Internal::result(const PtzControlRes* msg) {
  return *msg->result_;
}
void PtzControlRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
PtzControlRes::PtzControlRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.PtzControlRes)
}
PtzControlRes::PtzControlRes(const PtzControlRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.PtzControlRes)
}

inline void PtzControlRes::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = nullptr;
}

PtzControlRes::~PtzControlRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.PtzControlRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PtzControlRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void PtzControlRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PtzControlRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.PtzControlRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzControlRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.PtzControlRes.device_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PtzControlRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.PtzControlRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.PtzControlRes.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.PtzControlRes)
  return target;
}

size_t PtzControlRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.PtzControlRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PtzControlRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PtzControlRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PtzControlRes::GetClassData() const { return &_class_data_; }

void PtzControlRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PtzControlRes *>(to)->MergeFrom(
      static_cast<const PtzControlRes &>(from));
}


void PtzControlRes::MergeFrom(const PtzControlRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.PtzControlRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PtzControlRes::CopyFrom(const PtzControlRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.PtzControlRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzControlRes::IsInitialized() const {
  return true;
}

void PtzControlRes::InternalSwap(PtzControlRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzControlRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[10]);
}

// ===================================================================

class MonitorLayoutReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const MonitorLayoutReq* msg);
};

const ::ccs_msg::MsgHeader&
MonitorLayoutReq::_Internal::header(const MonitorLayoutReq* msg) {
  return *msg->header_;
}
void MonitorLayoutReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MonitorLayoutReq::MonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorLayoutReq)
}
MonitorLayoutReq::MonitorLayoutReq(const MonitorLayoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorLayoutReq)
}

inline void MonitorLayoutReq::SharedCtor() {
header_ = nullptr;
}

MonitorLayoutReq::~MonitorLayoutReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorLayoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorLayoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MonitorLayoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorLayoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorLayoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorLayoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorLayoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorLayoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorLayoutReq)
  return target;
}

size_t MonitorLayoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorLayoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorLayoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorLayoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorLayoutReq::GetClassData() const { return &_class_data_; }

void MonitorLayoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorLayoutReq *>(to)->MergeFrom(
      static_cast<const MonitorLayoutReq &>(from));
}


void MonitorLayoutReq::MergeFrom(const MonitorLayoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorLayoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorLayoutReq::CopyFrom(const MonitorLayoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorLayoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorLayoutReq::IsInitialized() const {
  return true;
}

void MonitorLayoutReq::InternalSwap(MonitorLayoutReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorLayoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[11]);
}

// ===================================================================

class MonitorWindow::_Internal {
 public:
  static const ::ccs_msg::MonitorStreamInfo& stream_info(const MonitorWindow* msg);
};

const ::ccs_msg::MonitorStreamInfo&
MonitorWindow::_Internal::stream_info(const MonitorWindow* msg) {
  return *msg->stream_info_;
}
MonitorWindow::MonitorWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorWindow)
}
MonitorWindow::MonitorWindow(const MonitorWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  device_alia_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_alia_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_alia().empty()) {
    device_alia_.Set(from._internal_device_alia(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stream_info()) {
    stream_info_ = new ::ccs_msg::MonitorStreamInfo(*from.stream_info_);
  } else {
    stream_info_ = nullptr;
  }
  window_id_ = from.window_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorWindow)
}

inline void MonitorWindow::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_alia_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_alia_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_id_) -
    reinterpret_cast<char*>(&stream_info_)) + sizeof(window_id_));
}

MonitorWindow::~MonitorWindow() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  device_alia_.Destroy();
  if (this != internal_default_instance()) delete stream_info_;
}

void MonitorWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  device_alia_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stream_info_ != nullptr) {
    delete stream_info_;
  }
  stream_info_ = nullptr;
  window_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MonitorWindow.device_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_alia = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_alia();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.MonitorWindow.device_alia"));
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.MonitorStreamInfo stream_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 window_id = 1;
  if (this->_internal_window_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_window_id(), target);
  }

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MonitorWindow.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // string device_alia = 3;
  if (!this->_internal_device_alia().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_alia().data(), static_cast<int>(this->_internal_device_alia().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.MonitorWindow.device_alia");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_alia(), target);
  }

  // .ccs_msg.MonitorStreamInfo stream_info = 4;
  if (this->_internal_has_stream_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream_info(this),
        _Internal::stream_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorWindow)
  return target;
}

size_t MonitorWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 2;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string device_alia = 3;
  if (!this->_internal_device_alia().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_alia());
  }

  // .ccs_msg.MonitorStreamInfo stream_info = 4;
  if (this->_internal_has_stream_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_info_);
  }

  // uint32 window_id = 1;
  if (this->_internal_window_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorWindow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorWindow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorWindow::GetClassData() const { return &_class_data_; }

void MonitorWindow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorWindow *>(to)->MergeFrom(
      static_cast<const MonitorWindow &>(from));
}


void MonitorWindow::MergeFrom(const MonitorWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorWindow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_device_alia().empty()) {
    _internal_set_device_alia(from._internal_device_alia());
  }
  if (from._internal_has_stream_info()) {
    _internal_mutable_stream_info()->::ccs_msg::MonitorStreamInfo::MergeFrom(from._internal_stream_info());
  }
  if (from._internal_window_id() != 0) {
    _internal_set_window_id(from._internal_window_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorWindow::CopyFrom(const MonitorWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorWindow::IsInitialized() const {
  return true;
}

void MonitorWindow::InternalSwap(MonitorWindow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_alia_, lhs_arena,
      &other->device_alia_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorWindow, window_id_)
      + sizeof(MonitorWindow::window_id_)
      - PROTOBUF_FIELD_OFFSET(MonitorWindow, stream_info_)>(
          reinterpret_cast<char*>(&stream_info_),
          reinterpret_cast<char*>(&other->stream_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorWindow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[12]);
}

// ===================================================================

class MonitorLayoutRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const MonitorLayoutRes* msg);
};

const ::ccs_msg::ResultInfo&
MonitorLayoutRes::_Internal::result(const MonitorLayoutRes* msg) {
  return *msg->result_;
}
void MonitorLayoutRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
MonitorLayoutRes::MonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  monitor_window_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.MonitorLayoutRes)
}
MonitorLayoutRes::MonitorLayoutRes(const MonitorLayoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monitor_window_list_(from.monitor_window_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  layout_id_ = from.layout_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.MonitorLayoutRes)
}

inline void MonitorLayoutRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layout_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(layout_id_));
}

MonitorLayoutRes::~MonitorLayoutRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.MonitorLayoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonitorLayoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void MonitorLayoutRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MonitorLayoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.MonitorLayoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monitor_window_list_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  layout_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorLayoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCVideoLayoutType layout_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout_id(static_cast<::ccs_msg::ITCVideoLayoutType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .ccs_msg.MonitorWindow monitor_window_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monitor_window_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonitorLayoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.MonitorLayoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_layout_id(), target);
  }

  // repeated .ccs_msg.MonitorWindow monitor_window_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monitor_window_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_monitor_window_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.MonitorLayoutRes)
  return target;
}

size_t MonitorLayoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.MonitorLayoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccs_msg.MonitorWindow monitor_window_list = 3;
  total_size += 1UL * this->_internal_monitor_window_list_size();
  for (const auto& msg : this->monitor_window_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_layout_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonitorLayoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MonitorLayoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonitorLayoutRes::GetClassData() const { return &_class_data_; }

void MonitorLayoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MonitorLayoutRes *>(to)->MergeFrom(
      static_cast<const MonitorLayoutRes &>(from));
}


void MonitorLayoutRes::MergeFrom(const MonitorLayoutRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.MonitorLayoutRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  monitor_window_list_.MergeFrom(from.monitor_window_list_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_layout_id() != 0) {
    _internal_set_layout_id(from._internal_layout_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorLayoutRes::CopyFrom(const MonitorLayoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.MonitorLayoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorLayoutRes::IsInitialized() const {
  return true;
}

void MonitorLayoutRes::InternalSwap(MonitorLayoutRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  monitor_window_list_.InternalSwap(&other->monitor_window_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorLayoutRes, layout_id_)
      + sizeof(MonitorLayoutRes::layout_id_)
      - PROTOBUF_FIELD_OFFSET(MonitorLayoutRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorLayoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[13]);
}

// ===================================================================

class SetMonitorLayoutReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const SetMonitorLayoutReq* msg);
};

const ::ccs_msg::MsgHeader&
SetMonitorLayoutReq::_Internal::header(const SetMonitorLayoutReq* msg) {
  return *msg->header_;
}
void SetMonitorLayoutReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetMonitorLayoutReq::SetMonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.SetMonitorLayoutReq)
}
SetMonitorLayoutReq::SetMonitorLayoutReq(const SetMonitorLayoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  window_id_ = from.window_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.SetMonitorLayoutReq)
}

inline void SetMonitorLayoutReq::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(window_id_));
}

SetMonitorLayoutReq::~SetMonitorLayoutReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.SetMonitorLayoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMonitorLayoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void SetMonitorLayoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMonitorLayoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.SetMonitorLayoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  window_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMonitorLayoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.SetMonitorLayoutReq.device_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetMonitorLayoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.SetMonitorLayoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 window_id = 2;
  if (this->_internal_window_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_window_id(), target);
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.SetMonitorLayoutReq.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.SetMonitorLayoutReq)
  return target;
}

size_t SetMonitorLayoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.SetMonitorLayoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 window_id = 2;
  if (this->_internal_window_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMonitorLayoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMonitorLayoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMonitorLayoutReq::GetClassData() const { return &_class_data_; }

void SetMonitorLayoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMonitorLayoutReq *>(to)->MergeFrom(
      static_cast<const SetMonitorLayoutReq &>(from));
}


void SetMonitorLayoutReq::MergeFrom(const SetMonitorLayoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.SetMonitorLayoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_window_id() != 0) {
    _internal_set_window_id(from._internal_window_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMonitorLayoutReq::CopyFrom(const SetMonitorLayoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.SetMonitorLayoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMonitorLayoutReq::IsInitialized() const {
  return true;
}

void SetMonitorLayoutReq::InternalSwap(SetMonitorLayoutReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMonitorLayoutReq, window_id_)
      + sizeof(SetMonitorLayoutReq::window_id_)
      - PROTOBUF_FIELD_OFFSET(SetMonitorLayoutReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMonitorLayoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[14]);
}

// ===================================================================

class SetMonitorLayoutRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const SetMonitorLayoutRes* msg);
};

const ::ccs_msg::ResultInfo&
SetMonitorLayoutRes::_Internal::result(const SetMonitorLayoutRes* msg) {
  return *msg->result_;
}
void SetMonitorLayoutRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
SetMonitorLayoutRes::SetMonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.SetMonitorLayoutRes)
}
SetMonitorLayoutRes::SetMonitorLayoutRes(const SetMonitorLayoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  window_id_ = from.window_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.SetMonitorLayoutRes)
}

inline void SetMonitorLayoutRes::SharedCtor() {
device_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(window_id_));
}

SetMonitorLayoutRes::~SetMonitorLayoutRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.SetMonitorLayoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMonitorLayoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.Destroy();
  if (this != internal_default_instance()) delete result_;
}

void SetMonitorLayoutRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMonitorLayoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.SetMonitorLayoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  window_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMonitorLayoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ccs_msg.SetMonitorLayoutRes.device_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetMonitorLayoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.SetMonitorLayoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // uint32 window_id = 2;
  if (this->_internal_window_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_window_id(), target);
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ccs_msg.SetMonitorLayoutRes.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.SetMonitorLayoutRes)
  return target;
}

size_t SetMonitorLayoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.SetMonitorLayoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint32 window_id = 2;
  if (this->_internal_window_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMonitorLayoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMonitorLayoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMonitorLayoutRes::GetClassData() const { return &_class_data_; }

void SetMonitorLayoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMonitorLayoutRes *>(to)->MergeFrom(
      static_cast<const SetMonitorLayoutRes &>(from));
}


void SetMonitorLayoutRes::MergeFrom(const SetMonitorLayoutRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.SetMonitorLayoutRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_window_id() != 0) {
    _internal_set_window_id(from._internal_window_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMonitorLayoutRes::CopyFrom(const SetMonitorLayoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.SetMonitorLayoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMonitorLayoutRes::IsInitialized() const {
  return true;
}

void SetMonitorLayoutRes::InternalSwap(SetMonitorLayoutRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMonitorLayoutRes, window_id_)
      + sizeof(SetMonitorLayoutRes::window_id_)
      - PROTOBUF_FIELD_OFFSET(SetMonitorLayoutRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMonitorLayoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[15]);
}

// ===================================================================

class SwitchMonitorLayoutReq::_Internal {
 public:
  static const ::ccs_msg::MsgHeader& header(const SwitchMonitorLayoutReq* msg);
};

const ::ccs_msg::MsgHeader&
SwitchMonitorLayoutReq::_Internal::header(const SwitchMonitorLayoutReq* msg) {
  return *msg->header_;
}
void SwitchMonitorLayoutReq::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SwitchMonitorLayoutReq::SwitchMonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.SwitchMonitorLayoutReq)
}
SwitchMonitorLayoutReq::SwitchMonitorLayoutReq(const SwitchMonitorLayoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ccs_msg::MsgHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  layout_id_ = from.layout_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.SwitchMonitorLayoutReq)
}

inline void SwitchMonitorLayoutReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layout_id_) -
    reinterpret_cast<char*>(&header_)) + sizeof(layout_id_));
}

SwitchMonitorLayoutReq::~SwitchMonitorLayoutReq() {
  // @@protoc_insertion_point(destructor:ccs_msg.SwitchMonitorLayoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchMonitorLayoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SwitchMonitorLayoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwitchMonitorLayoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.SwitchMonitorLayoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  layout_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchMonitorLayoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.MsgHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCVideoLayoutType layout_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout_id(static_cast<::ccs_msg::ITCVideoLayoutType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwitchMonitorLayoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.SwitchMonitorLayoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_layout_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.SwitchMonitorLayoutReq)
  return target;
}

size_t SwitchMonitorLayoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.SwitchMonitorLayoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.MsgHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_layout_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchMonitorLayoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwitchMonitorLayoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchMonitorLayoutReq::GetClassData() const { return &_class_data_; }

void SwitchMonitorLayoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SwitchMonitorLayoutReq *>(to)->MergeFrom(
      static_cast<const SwitchMonitorLayoutReq &>(from));
}


void SwitchMonitorLayoutReq::MergeFrom(const SwitchMonitorLayoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.SwitchMonitorLayoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::ccs_msg::MsgHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_layout_id() != 0) {
    _internal_set_layout_id(from._internal_layout_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchMonitorLayoutReq::CopyFrom(const SwitchMonitorLayoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.SwitchMonitorLayoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMonitorLayoutReq::IsInitialized() const {
  return true;
}

void SwitchMonitorLayoutReq::InternalSwap(SwitchMonitorLayoutReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchMonitorLayoutReq, layout_id_)
      + sizeof(SwitchMonitorLayoutReq::layout_id_)
      - PROTOBUF_FIELD_OFFSET(SwitchMonitorLayoutReq, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchMonitorLayoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[16]);
}

// ===================================================================

class SwtichMonitorLayoutRes::_Internal {
 public:
  static const ::ccs_msg::ResultInfo& result(const SwtichMonitorLayoutRes* msg);
};

const ::ccs_msg::ResultInfo&
SwtichMonitorLayoutRes::_Internal::result(const SwtichMonitorLayoutRes* msg) {
  return *msg->result_;
}
void SwtichMonitorLayoutRes::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
SwtichMonitorLayoutRes::SwtichMonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ccs_msg.SwtichMonitorLayoutRes)
}
SwtichMonitorLayoutRes::SwtichMonitorLayoutRes(const SwtichMonitorLayoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ccs_msg::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  layout_id_ = from.layout_id_;
  // @@protoc_insertion_point(copy_constructor:ccs_msg.SwtichMonitorLayoutRes)
}

inline void SwtichMonitorLayoutRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layout_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(layout_id_));
}

SwtichMonitorLayoutRes::~SwtichMonitorLayoutRes() {
  // @@protoc_insertion_point(destructor:ccs_msg.SwtichMonitorLayoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwtichMonitorLayoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void SwtichMonitorLayoutRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwtichMonitorLayoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccs_msg.SwtichMonitorLayoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  layout_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwtichMonitorLayoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ccs_msg.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ccs_msg.ITCVideoLayoutType layout_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout_id(static_cast<::ccs_msg::ITCVideoLayoutType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwtichMonitorLayoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccs_msg.SwtichMonitorLayoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_layout_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccs_msg.SwtichMonitorLayoutRes)
  return target;
}

size_t SwtichMonitorLayoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccs_msg.SwtichMonitorLayoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ccs_msg.ResultInfo result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  if (this->_internal_layout_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_layout_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwtichMonitorLayoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwtichMonitorLayoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwtichMonitorLayoutRes::GetClassData() const { return &_class_data_; }

void SwtichMonitorLayoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SwtichMonitorLayoutRes *>(to)->MergeFrom(
      static_cast<const SwtichMonitorLayoutRes &>(from));
}


void SwtichMonitorLayoutRes::MergeFrom(const SwtichMonitorLayoutRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccs_msg.SwtichMonitorLayoutRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ccs_msg::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from._internal_layout_id() != 0) {
    _internal_set_layout_id(from._internal_layout_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwtichMonitorLayoutRes::CopyFrom(const SwtichMonitorLayoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccs_msg.SwtichMonitorLayoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwtichMonitorLayoutRes::IsInitialized() const {
  return true;
}

void SwtichMonitorLayoutRes::InternalSwap(SwtichMonitorLayoutRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwtichMonitorLayoutRes, layout_id_)
      + sizeof(SwtichMonitorLayoutRes::layout_id_)
      - PROTOBUF_FIELD_OFFSET(SwtichMonitorLayoutRes, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwtichMonitorLayoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ccs_5fgateway_5fmessage_2eproto_getter, &descriptor_table_ccs_5fgateway_5fmessage_2eproto_once,
      file_level_metadata_ccs_5fgateway_5fmessage_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ccs_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorListReq*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorStreamInfo*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorStreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorStreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorDeviceInfo*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorListRes*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::CollectMonitorReq*
Arena::CreateMaybeMessage< ::ccs_msg::CollectMonitorReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::CollectMonitorReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::CollectMonitorRes*
Arena::CreateMaybeMessage< ::ccs_msg::CollectMonitorRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::CollectMonitorRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorStreamInfoReq*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorStreamInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorStreamInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorStreamInfoRes*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorStreamInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorStreamInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::PtzControlInfo*
Arena::CreateMaybeMessage< ::ccs_msg::PtzControlInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::PtzControlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::PtzControlReq*
Arena::CreateMaybeMessage< ::ccs_msg::PtzControlReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::PtzControlReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::PtzControlRes*
Arena::CreateMaybeMessage< ::ccs_msg::PtzControlRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::PtzControlRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorLayoutReq*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorLayoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorLayoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorWindow*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::MonitorLayoutRes*
Arena::CreateMaybeMessage< ::ccs_msg::MonitorLayoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::MonitorLayoutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::SetMonitorLayoutReq*
Arena::CreateMaybeMessage< ::ccs_msg::SetMonitorLayoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::SetMonitorLayoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::SetMonitorLayoutRes*
Arena::CreateMaybeMessage< ::ccs_msg::SetMonitorLayoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::SetMonitorLayoutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::SwitchMonitorLayoutReq*
Arena::CreateMaybeMessage< ::ccs_msg::SwitchMonitorLayoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::SwitchMonitorLayoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ccs_msg::SwtichMonitorLayoutRes*
Arena::CreateMaybeMessage< ::ccs_msg::SwtichMonitorLayoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ccs_msg::SwtichMonitorLayoutRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
