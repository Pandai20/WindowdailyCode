// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccs_conference_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ccs_5fconference_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ccs_5fconference_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ccs_common_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ccs_5fconference_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ccs_5fconference_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ccs_5fconference_5fmessage_2eproto;
namespace ccs_msg {
class AssignChairmanReq;
struct AssignChairmanReqDefaultTypeInternal;
extern AssignChairmanReqDefaultTypeInternal _AssignChairmanReq_default_instance_;
class AssignChairmanRes;
struct AssignChairmanResDefaultTypeInternal;
extern AssignChairmanResDefaultTypeInternal _AssignChairmanRes_default_instance_;
class ConfInfo;
struct ConfInfoDefaultTypeInternal;
extern ConfInfoDefaultTypeInternal _ConfInfo_default_instance_;
class ConferenceListRes;
struct ConferenceListResDefaultTypeInternal;
extern ConferenceListResDefaultTypeInternal _ConferenceListRes_default_instance_;
class CreateMeetingReq;
struct CreateMeetingReqDefaultTypeInternal;
extern CreateMeetingReqDefaultTypeInternal _CreateMeetingReq_default_instance_;
class CreateMeetingRes;
struct CreateMeetingResDefaultTypeInternal;
extern CreateMeetingResDefaultTypeInternal _CreateMeetingRes_default_instance_;
class DropMemberReq;
struct DropMemberReqDefaultTypeInternal;
extern DropMemberReqDefaultTypeInternal _DropMemberReq_default_instance_;
class DropMemberRes;
struct DropMemberResDefaultTypeInternal;
extern DropMemberResDefaultTypeInternal _DropMemberRes_default_instance_;
class GetMeetingListReq;
struct GetMeetingListReqDefaultTypeInternal;
extern GetMeetingListReqDefaultTypeInternal _GetMeetingListReq_default_instance_;
class GetMembersInfoReq;
struct GetMembersInfoReqDefaultTypeInternal;
extern GetMembersInfoReqDefaultTypeInternal _GetMembersInfoReq_default_instance_;
class GetMembersInfoRes;
struct GetMembersInfoResDefaultTypeInternal;
extern GetMembersInfoResDefaultTypeInternal _GetMembersInfoRes_default_instance_;
class GetVideoLayoutInfoReq;
struct GetVideoLayoutInfoReqDefaultTypeInternal;
extern GetVideoLayoutInfoReqDefaultTypeInternal _GetVideoLayoutInfoReq_default_instance_;
class GetVideoLayoutInfoRes;
struct GetVideoLayoutInfoResDefaultTypeInternal;
extern GetVideoLayoutInfoResDefaultTypeInternal _GetVideoLayoutInfoRes_default_instance_;
class ITCOSDParams;
struct ITCOSDParamsDefaultTypeInternal;
extern ITCOSDParamsDefaultTypeInternal _ITCOSDParams_default_instance_;
class InviteMemberReq;
struct InviteMemberReqDefaultTypeInternal;
extern InviteMemberReqDefaultTypeInternal _InviteMemberReq_default_instance_;
class InviteMemberRes;
struct InviteMemberResDefaultTypeInternal;
extern InviteMemberResDefaultTypeInternal _InviteMemberRes_default_instance_;
class MemberInfo;
struct MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
class MixerParams;
struct MixerParamsDefaultTypeInternal;
extern MixerParamsDefaultTypeInternal _MixerParams_default_instance_;
class MuteAllMemberReq;
struct MuteAllMemberReqDefaultTypeInternal;
extern MuteAllMemberReqDefaultTypeInternal _MuteAllMemberReq_default_instance_;
class MuteAllMemberRes;
struct MuteAllMemberResDefaultTypeInternal;
extern MuteAllMemberResDefaultTypeInternal _MuteAllMemberRes_default_instance_;
class MuteMemberReq;
struct MuteMemberReqDefaultTypeInternal;
extern MuteMemberReqDefaultTypeInternal _MuteMemberReq_default_instance_;
class MuteMemberRes;
struct MuteMemberResDefaultTypeInternal;
extern MuteMemberResDefaultTypeInternal _MuteMemberRes_default_instance_;
class RecordReqInfo;
struct RecordReqInfoDefaultTypeInternal;
extern RecordReqInfoDefaultTypeInternal _RecordReqInfo_default_instance_;
class RecordResInfo;
struct RecordResInfoDefaultTypeInternal;
extern RecordResInfoDefaultTypeInternal _RecordResInfo_default_instance_;
class RemoveConfReq;
struct RemoveConfReqDefaultTypeInternal;
extern RemoveConfReqDefaultTypeInternal _RemoveConfReq_default_instance_;
class RemoveConfRes;
struct RemoveConfResDefaultTypeInternal;
extern RemoveConfResDefaultTypeInternal _RemoveConfRes_default_instance_;
class SetVideoLayoutReq;
struct SetVideoLayoutReqDefaultTypeInternal;
extern SetVideoLayoutReqDefaultTypeInternal _SetVideoLayoutReq_default_instance_;
class SetVideoLayoutRes;
struct SetVideoLayoutResDefaultTypeInternal;
extern SetVideoLayoutResDefaultTypeInternal _SetVideoLayoutRes_default_instance_;
class StartRecordReq;
struct StartRecordReqDefaultTypeInternal;
extern StartRecordReqDefaultTypeInternal _StartRecordReq_default_instance_;
class StartRecordRes;
struct StartRecordResDefaultTypeInternal;
extern StartRecordResDefaultTypeInternal _StartRecordRes_default_instance_;
class StopRecordReq;
struct StopRecordReqDefaultTypeInternal;
extern StopRecordReqDefaultTypeInternal _StopRecordReq_default_instance_;
class StopRecordRes;
struct StopRecordResDefaultTypeInternal;
extern StopRecordResDefaultTypeInternal _StopRecordRes_default_instance_;
class TakePhotoReq;
struct TakePhotoReqDefaultTypeInternal;
extern TakePhotoReqDefaultTypeInternal _TakePhotoReq_default_instance_;
class TakePhotoRes;
struct TakePhotoResDefaultTypeInternal;
extern TakePhotoResDefaultTypeInternal _TakePhotoRes_default_instance_;
class UnmuteAllMemberReq;
struct UnmuteAllMemberReqDefaultTypeInternal;
extern UnmuteAllMemberReqDefaultTypeInternal _UnmuteAllMemberReq_default_instance_;
class UnmuteAllMemberRes;
struct UnmuteAllMemberResDefaultTypeInternal;
extern UnmuteAllMemberResDefaultTypeInternal _UnmuteAllMemberRes_default_instance_;
class UnmuteMemberReq;
struct UnmuteMemberReqDefaultTypeInternal;
extern UnmuteMemberReqDefaultTypeInternal _UnmuteMemberReq_default_instance_;
class UnmuteMemberRes;
struct UnmuteMemberResDefaultTypeInternal;
extern UnmuteMemberResDefaultTypeInternal _UnmuteMemberRes_default_instance_;
class VideoCodec;
struct VideoCodecDefaultTypeInternal;
extern VideoCodecDefaultTypeInternal _VideoCodec_default_instance_;
class VideoLayout;
struct VideoLayoutDefaultTypeInternal;
extern VideoLayoutDefaultTypeInternal _VideoLayout_default_instance_;
class VideoParams;
struct VideoParamsDefaultTypeInternal;
extern VideoParamsDefaultTypeInternal _VideoParams_default_instance_;
class VideoWindow;
struct VideoWindowDefaultTypeInternal;
extern VideoWindowDefaultTypeInternal _VideoWindow_default_instance_;
}  // namespace ccs_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::ccs_msg::AssignChairmanReq* Arena::CreateMaybeMessage<::ccs_msg::AssignChairmanReq>(Arena*);
template<> ::ccs_msg::AssignChairmanRes* Arena::CreateMaybeMessage<::ccs_msg::AssignChairmanRes>(Arena*);
template<> ::ccs_msg::ConfInfo* Arena::CreateMaybeMessage<::ccs_msg::ConfInfo>(Arena*);
template<> ::ccs_msg::ConferenceListRes* Arena::CreateMaybeMessage<::ccs_msg::ConferenceListRes>(Arena*);
template<> ::ccs_msg::CreateMeetingReq* Arena::CreateMaybeMessage<::ccs_msg::CreateMeetingReq>(Arena*);
template<> ::ccs_msg::CreateMeetingRes* Arena::CreateMaybeMessage<::ccs_msg::CreateMeetingRes>(Arena*);
template<> ::ccs_msg::DropMemberReq* Arena::CreateMaybeMessage<::ccs_msg::DropMemberReq>(Arena*);
template<> ::ccs_msg::DropMemberRes* Arena::CreateMaybeMessage<::ccs_msg::DropMemberRes>(Arena*);
template<> ::ccs_msg::GetMeetingListReq* Arena::CreateMaybeMessage<::ccs_msg::GetMeetingListReq>(Arena*);
template<> ::ccs_msg::GetMembersInfoReq* Arena::CreateMaybeMessage<::ccs_msg::GetMembersInfoReq>(Arena*);
template<> ::ccs_msg::GetMembersInfoRes* Arena::CreateMaybeMessage<::ccs_msg::GetMembersInfoRes>(Arena*);
template<> ::ccs_msg::GetVideoLayoutInfoReq* Arena::CreateMaybeMessage<::ccs_msg::GetVideoLayoutInfoReq>(Arena*);
template<> ::ccs_msg::GetVideoLayoutInfoRes* Arena::CreateMaybeMessage<::ccs_msg::GetVideoLayoutInfoRes>(Arena*);
template<> ::ccs_msg::ITCOSDParams* Arena::CreateMaybeMessage<::ccs_msg::ITCOSDParams>(Arena*);
template<> ::ccs_msg::InviteMemberReq* Arena::CreateMaybeMessage<::ccs_msg::InviteMemberReq>(Arena*);
template<> ::ccs_msg::InviteMemberRes* Arena::CreateMaybeMessage<::ccs_msg::InviteMemberRes>(Arena*);
template<> ::ccs_msg::MemberInfo* Arena::CreateMaybeMessage<::ccs_msg::MemberInfo>(Arena*);
template<> ::ccs_msg::MixerParams* Arena::CreateMaybeMessage<::ccs_msg::MixerParams>(Arena*);
template<> ::ccs_msg::MuteAllMemberReq* Arena::CreateMaybeMessage<::ccs_msg::MuteAllMemberReq>(Arena*);
template<> ::ccs_msg::MuteAllMemberRes* Arena::CreateMaybeMessage<::ccs_msg::MuteAllMemberRes>(Arena*);
template<> ::ccs_msg::MuteMemberReq* Arena::CreateMaybeMessage<::ccs_msg::MuteMemberReq>(Arena*);
template<> ::ccs_msg::MuteMemberRes* Arena::CreateMaybeMessage<::ccs_msg::MuteMemberRes>(Arena*);
template<> ::ccs_msg::RecordReqInfo* Arena::CreateMaybeMessage<::ccs_msg::RecordReqInfo>(Arena*);
template<> ::ccs_msg::RecordResInfo* Arena::CreateMaybeMessage<::ccs_msg::RecordResInfo>(Arena*);
template<> ::ccs_msg::RemoveConfReq* Arena::CreateMaybeMessage<::ccs_msg::RemoveConfReq>(Arena*);
template<> ::ccs_msg::RemoveConfRes* Arena::CreateMaybeMessage<::ccs_msg::RemoveConfRes>(Arena*);
template<> ::ccs_msg::SetVideoLayoutReq* Arena::CreateMaybeMessage<::ccs_msg::SetVideoLayoutReq>(Arena*);
template<> ::ccs_msg::SetVideoLayoutRes* Arena::CreateMaybeMessage<::ccs_msg::SetVideoLayoutRes>(Arena*);
template<> ::ccs_msg::StartRecordReq* Arena::CreateMaybeMessage<::ccs_msg::StartRecordReq>(Arena*);
template<> ::ccs_msg::StartRecordRes* Arena::CreateMaybeMessage<::ccs_msg::StartRecordRes>(Arena*);
template<> ::ccs_msg::StopRecordReq* Arena::CreateMaybeMessage<::ccs_msg::StopRecordReq>(Arena*);
template<> ::ccs_msg::StopRecordRes* Arena::CreateMaybeMessage<::ccs_msg::StopRecordRes>(Arena*);
template<> ::ccs_msg::TakePhotoReq* Arena::CreateMaybeMessage<::ccs_msg::TakePhotoReq>(Arena*);
template<> ::ccs_msg::TakePhotoRes* Arena::CreateMaybeMessage<::ccs_msg::TakePhotoRes>(Arena*);
template<> ::ccs_msg::UnmuteAllMemberReq* Arena::CreateMaybeMessage<::ccs_msg::UnmuteAllMemberReq>(Arena*);
template<> ::ccs_msg::UnmuteAllMemberRes* Arena::CreateMaybeMessage<::ccs_msg::UnmuteAllMemberRes>(Arena*);
template<> ::ccs_msg::UnmuteMemberReq* Arena::CreateMaybeMessage<::ccs_msg::UnmuteMemberReq>(Arena*);
template<> ::ccs_msg::UnmuteMemberRes* Arena::CreateMaybeMessage<::ccs_msg::UnmuteMemberRes>(Arena*);
template<> ::ccs_msg::VideoCodec* Arena::CreateMaybeMessage<::ccs_msg::VideoCodec>(Arena*);
template<> ::ccs_msg::VideoLayout* Arena::CreateMaybeMessage<::ccs_msg::VideoLayout>(Arena*);
template<> ::ccs_msg::VideoParams* Arena::CreateMaybeMessage<::ccs_msg::VideoParams>(Arena*);
template<> ::ccs_msg::VideoWindow* Arena::CreateMaybeMessage<::ccs_msg::VideoWindow>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ccs_msg {

enum WinMode : int {
  e_WinNormal = 0,
  e_WinExtVideo = 1,
  e_WinPoll = 2,
  e_WinVad = 3,
  e_WinChair = 4,
  e_WinAutoFilling = 5,
  e_unkonwnWinMode = 6,
  WinMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WinMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WinMode_IsValid(int value);
constexpr WinMode WinMode_MIN = e_WinNormal;
constexpr WinMode WinMode_MAX = e_unkonwnWinMode;
constexpr int WinMode_ARRAYSIZE = WinMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WinMode_descriptor();
template<typename T>
inline const std::string& WinMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WinMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WinMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WinMode_descriptor(), enum_t_value);
}
inline bool WinMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WinMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WinMode>(
    WinMode_descriptor(), name, value);
}
enum BitrateControlAlgorithm : int {
  e_VBR = 0,
  e_CBR = 1,
  BitrateControlAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BitrateControlAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BitrateControlAlgorithm_IsValid(int value);
constexpr BitrateControlAlgorithm BitrateControlAlgorithm_MIN = e_VBR;
constexpr BitrateControlAlgorithm BitrateControlAlgorithm_MAX = e_CBR;
constexpr int BitrateControlAlgorithm_ARRAYSIZE = BitrateControlAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BitrateControlAlgorithm_descriptor();
template<typename T>
inline const std::string& BitrateControlAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BitrateControlAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BitrateControlAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BitrateControlAlgorithm_descriptor(), enum_t_value);
}
inline bool BitrateControlAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BitrateControlAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BitrateControlAlgorithm>(
    BitrateControlAlgorithm_descriptor(), name, value);
}
enum ConfControlMode : int {
  e_FreeMode = 0,
  e_ChairControlMode = 1,
  e_DirectorControlMode = 2,
  ConfControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConfControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConfControlMode_IsValid(int value);
constexpr ConfControlMode ConfControlMode_MIN = e_FreeMode;
constexpr ConfControlMode ConfControlMode_MAX = e_DirectorControlMode;
constexpr int ConfControlMode_ARRAYSIZE = ConfControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfControlMode_descriptor();
template<typename T>
inline const std::string& ConfControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfControlMode_descriptor(), enum_t_value);
}
inline bool ConfControlMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfControlMode>(
    ConfControlMode_descriptor(), name, value);
}
enum ProtoType : int {
  e_ProtoVCS = 0,
  e_ProtoH323 = 1,
  e_ProtoSIP = 2,
  ProtoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProtoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProtoType_IsValid(int value);
constexpr ProtoType ProtoType_MIN = e_ProtoVCS;
constexpr ProtoType ProtoType_MAX = e_ProtoSIP;
constexpr int ProtoType_ARRAYSIZE = ProtoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoType_descriptor();
template<typename T>
inline const std::string& ProtoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtoType_descriptor(), enum_t_value);
}
inline bool ProtoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtoType>(
    ProtoType_descriptor(), name, value);
}
enum InviteMode : int {
  e_alwaysInvite = 0,
  e_refuseInvite = 1,
  e_limitedInvite = 2,
  InviteMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InviteMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InviteMode_IsValid(int value);
constexpr InviteMode InviteMode_MIN = e_alwaysInvite;
constexpr InviteMode InviteMode_MAX = e_limitedInvite;
constexpr int InviteMode_ARRAYSIZE = InviteMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InviteMode_descriptor();
template<typename T>
inline const std::string& InviteMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InviteMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InviteMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InviteMode_descriptor(), enum_t_value);
}
inline bool InviteMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InviteMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InviteMode>(
    InviteMode_descriptor(), name, value);
}
enum ConferenceMediaType : int {
  e_BothVideoAndAudio = 0,
  e_AudioOnly = 1,
  ConferenceMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConferenceMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConferenceMediaType_IsValid(int value);
constexpr ConferenceMediaType ConferenceMediaType_MIN = e_BothVideoAndAudio;
constexpr ConferenceMediaType ConferenceMediaType_MAX = e_AudioOnly;
constexpr int ConferenceMediaType_ARRAYSIZE = ConferenceMediaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConferenceMediaType_descriptor();
template<typename T>
inline const std::string& ConferenceMediaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConferenceMediaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConferenceMediaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConferenceMediaType_descriptor(), enum_t_value);
}
inline bool ConferenceMediaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConferenceMediaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConferenceMediaType>(
    ConferenceMediaType_descriptor(), name, value);
}
enum ConnectionStatus : int {
  e_Connected = 0,
  e_Connecting = 1,
  e_Disconnect = 2,
  ConnectionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionStatus_IsValid(int value);
constexpr ConnectionStatus ConnectionStatus_MIN = e_Connected;
constexpr ConnectionStatus ConnectionStatus_MAX = e_Disconnect;
constexpr int ConnectionStatus_ARRAYSIZE = ConnectionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionStatus_descriptor();
template<typename T>
inline const std::string& ConnectionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionStatus_descriptor(), enum_t_value);
}
inline bool ConnectionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionStatus>(
    ConnectionStatus_descriptor(), name, value);
}
enum RoleType : int {
  e_role_none = 0,
  e_chairmanRole = 1,
  e_speakerRole = 2,
  e_audienceRole = 3,
  RoleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoleType_IsValid(int value);
constexpr RoleType RoleType_MIN = e_role_none;
constexpr RoleType RoleType_MAX = e_audienceRole;
constexpr int RoleType_ARRAYSIZE = RoleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor();
template<typename T>
inline const std::string& RoleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleType_descriptor(), enum_t_value);
}
inline bool RoleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleType>(
    RoleType_descriptor(), name, value);
}
enum NetworkStatus : int {
  e_good = 0,
  e_common = 1,
  e_bad = 2,
  e_terrible = 3,
  e_max_level = 4,
  NetworkStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetworkStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetworkStatus_IsValid(int value);
constexpr NetworkStatus NetworkStatus_MIN = e_good;
constexpr NetworkStatus NetworkStatus_MAX = e_max_level;
constexpr int NetworkStatus_ARRAYSIZE = NetworkStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkStatus_descriptor();
template<typename T>
inline const std::string& NetworkStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkStatus_descriptor(), enum_t_value);
}
inline bool NetworkStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkStatus>(
    NetworkStatus_descriptor(), name, value);
}
enum MuteType : int {
  e_Placeholder1 = 0,
  e_MuteAudioReceive = 1,
  e_MuteAudioTransmit = 2,
  e_Placeholder2 = 3,
  e_MuteVideoReceive = 4,
  e_Placeholder3 = 5,
  e_Placeholder4 = 6,
  e_Placeholder5 = 7,
  e_MuteVideoTransmit = 8,
  MuteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MuteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MuteType_IsValid(int value);
constexpr MuteType MuteType_MIN = e_Placeholder1;
constexpr MuteType MuteType_MAX = e_MuteVideoTransmit;
constexpr int MuteType_ARRAYSIZE = MuteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MuteType_descriptor();
template<typename T>
inline const std::string& MuteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MuteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MuteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MuteType_descriptor(), enum_t_value);
}
inline bool MuteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MuteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MuteType>(
    MuteType_descriptor(), name, value);
}
// ===================================================================

class VideoWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.VideoWindow) */ {
 public:
  inline VideoWindow() : VideoWindow(nullptr) {}
  ~VideoWindow() override;
  explicit PROTOBUF_CONSTEXPR VideoWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoWindow(const VideoWindow& from);
  VideoWindow(VideoWindow&& from) noexcept
    : VideoWindow() {
    *this = ::std::move(from);
  }

  inline VideoWindow& operator=(const VideoWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoWindow& operator=(VideoWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoWindow* internal_default_instance() {
    return reinterpret_cast<const VideoWindow*>(
               &_VideoWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoWindow& a, VideoWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.VideoWindow";
  }
  protected:
  explicit VideoWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kStreamIdFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // int32 member_id = 1;
  void clear_member_id();
  int32_t member_id() const;
  void set_member_id(int32_t value);
  private:
  int32_t _internal_member_id() const;
  void _internal_set_member_id(int32_t value);
  public:

  // uint32 stream_id = 2;
  void clear_stream_id();
  uint32_t stream_id() const;
  void set_stream_id(uint32_t value);
  private:
  uint32_t _internal_stream_id() const;
  void _internal_set_stream_id(uint32_t value);
  public:

  // .ccs_msg.WinMode mode = 3;
  void clear_mode();
  ::ccs_msg::WinMode mode() const;
  void set_mode(::ccs_msg::WinMode value);
  private:
  ::ccs_msg::WinMode _internal_mode() const;
  void _internal_set_mode(::ccs_msg::WinMode value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.VideoWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t member_id_;
  uint32_t stream_id_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class VideoLayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.VideoLayout) */ {
 public:
  inline VideoLayout() : VideoLayout(nullptr) {}
  ~VideoLayout() override;
  explicit PROTOBUF_CONSTEXPR VideoLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoLayout(const VideoLayout& from);
  VideoLayout(VideoLayout&& from) noexcept
    : VideoLayout() {
    *this = ::std::move(from);
  }

  inline VideoLayout& operator=(const VideoLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoLayout& operator=(VideoLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoLayout* internal_default_instance() {
    return reinterpret_cast<const VideoLayout*>(
               &_VideoLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VideoLayout& a, VideoLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoLayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoLayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoLayout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoLayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.VideoLayout";
  }
  protected:
  explicit VideoLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinListFieldNumber = 1,
    kLayoutIdFieldNumber = 2,
    kWindowsFieldNumber = 3,
  };
  // repeated .ccs_msg.VideoWindow win_list = 1;
  int win_list_size() const;
  private:
  int _internal_win_list_size() const;
  public:
  void clear_win_list();
  ::ccs_msg::VideoWindow* mutable_win_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >*
      mutable_win_list();
  private:
  const ::ccs_msg::VideoWindow& _internal_win_list(int index) const;
  ::ccs_msg::VideoWindow* _internal_add_win_list();
  public:
  const ::ccs_msg::VideoWindow& win_list(int index) const;
  ::ccs_msg::VideoWindow* add_win_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >&
      win_list() const;

  // uint32 layout_id = 2;
  void clear_layout_id();
  uint32_t layout_id() const;
  void set_layout_id(uint32_t value);
  private:
  uint32_t _internal_layout_id() const;
  void _internal_set_layout_id(uint32_t value);
  public:

  // uint32 windows = 3;
  void clear_windows();
  uint32_t windows() const;
  void set_windows(uint32_t value);
  private:
  uint32_t _internal_windows() const;
  void _internal_set_windows(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.VideoLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow > win_list_;
  uint32_t layout_id_;
  uint32_t windows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ITCOSDParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.ITCOSDParams) */ {
 public:
  inline ITCOSDParams() : ITCOSDParams(nullptr) {}
  ~ITCOSDParams() override;
  explicit PROTOBUF_CONSTEXPR ITCOSDParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ITCOSDParams(const ITCOSDParams& from);
  ITCOSDParams(ITCOSDParams&& from) noexcept
    : ITCOSDParams() {
    *this = ::std::move(from);
  }

  inline ITCOSDParams& operator=(const ITCOSDParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ITCOSDParams& operator=(ITCOSDParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ITCOSDParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ITCOSDParams* internal_default_instance() {
    return reinterpret_cast<const ITCOSDParams*>(
               &_ITCOSDParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ITCOSDParams& a, ITCOSDParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ITCOSDParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ITCOSDParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ITCOSDParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ITCOSDParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ITCOSDParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ITCOSDParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ITCOSDParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.ITCOSDParams";
  }
  protected:
  explicit ITCOSDParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGlobalAlphaFieldNumber = 2,
    kFontSizeFieldNumber = 3,
    kFontColorFieldNumber = 4,
    kBgColorFieldNumber = 5,
    kOsdEnableFieldNumber = 6,
    kRollingTimesFieldNumber = 7,
    kShowSecondsFieldNumber = 8,
    kFontTypeFieldNumber = 9,
    kEnBoldFieldNumber = 10,
    kPosXFieldNumber = 11,
    kPosYFieldNumber = 12,
  };
  // uint32 position = 1;
  void clear_position();
  uint32_t position() const;
  void set_position(uint32_t value);
  private:
  uint32_t _internal_position() const;
  void _internal_set_position(uint32_t value);
  public:

  // uint32 global_alpha = 2;
  void clear_global_alpha();
  uint32_t global_alpha() const;
  void set_global_alpha(uint32_t value);
  private:
  uint32_t _internal_global_alpha() const;
  void _internal_set_global_alpha(uint32_t value);
  public:

  // uint32 font_size = 3;
  void clear_font_size();
  uint32_t font_size() const;
  void set_font_size(uint32_t value);
  private:
  uint32_t _internal_font_size() const;
  void _internal_set_font_size(uint32_t value);
  public:

  // uint32 font_color = 4;
  void clear_font_color();
  uint32_t font_color() const;
  void set_font_color(uint32_t value);
  private:
  uint32_t _internal_font_color() const;
  void _internal_set_font_color(uint32_t value);
  public:

  // uint32 bg_color = 5;
  void clear_bg_color();
  uint32_t bg_color() const;
  void set_bg_color(uint32_t value);
  private:
  uint32_t _internal_bg_color() const;
  void _internal_set_bg_color(uint32_t value);
  public:

  // uint32 osd_enable = 6;
  void clear_osd_enable();
  uint32_t osd_enable() const;
  void set_osd_enable(uint32_t value);
  private:
  uint32_t _internal_osd_enable() const;
  void _internal_set_osd_enable(uint32_t value);
  public:

  // uint32 rolling_times = 7;
  void clear_rolling_times();
  uint32_t rolling_times() const;
  void set_rolling_times(uint32_t value);
  private:
  uint32_t _internal_rolling_times() const;
  void _internal_set_rolling_times(uint32_t value);
  public:

  // uint32 show_seconds = 8;
  void clear_show_seconds();
  uint32_t show_seconds() const;
  void set_show_seconds(uint32_t value);
  private:
  uint32_t _internal_show_seconds() const;
  void _internal_set_show_seconds(uint32_t value);
  public:

  // uint32 font_type = 9;
  void clear_font_type();
  uint32_t font_type() const;
  void set_font_type(uint32_t value);
  private:
  uint32_t _internal_font_type() const;
  void _internal_set_font_type(uint32_t value);
  public:

  // uint32 en_bold = 10;
  void clear_en_bold();
  uint32_t en_bold() const;
  void set_en_bold(uint32_t value);
  private:
  uint32_t _internal_en_bold() const;
  void _internal_set_en_bold(uint32_t value);
  public:

  // int32 pos_x = 11;
  void clear_pos_x();
  int32_t pos_x() const;
  void set_pos_x(int32_t value);
  private:
  int32_t _internal_pos_x() const;
  void _internal_set_pos_x(int32_t value);
  public:

  // int32 pos_y = 12;
  void clear_pos_y();
  int32_t pos_y() const;
  void set_pos_y(int32_t value);
  private:
  int32_t _internal_pos_y() const;
  void _internal_set_pos_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.ITCOSDParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t position_;
  uint32_t global_alpha_;
  uint32_t font_size_;
  uint32_t font_color_;
  uint32_t bg_color_;
  uint32_t osd_enable_;
  uint32_t rolling_times_;
  uint32_t show_seconds_;
  uint32_t font_type_;
  uint32_t en_bold_;
  int32_t pos_x_;
  int32_t pos_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class VideoCodec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.VideoCodec) */ {
 public:
  inline VideoCodec() : VideoCodec(nullptr) {}
  ~VideoCodec() override;
  explicit PROTOBUF_CONSTEXPR VideoCodec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoCodec(const VideoCodec& from);
  VideoCodec(VideoCodec&& from) noexcept
    : VideoCodec() {
    *this = ::std::move(from);
  }

  inline VideoCodec& operator=(const VideoCodec& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoCodec& operator=(VideoCodec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoCodec& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoCodec* internal_default_instance() {
    return reinterpret_cast<const VideoCodec*>(
               &_VideoCodec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VideoCodec& a, VideoCodec& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoCodec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoCodec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoCodec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoCodec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoCodec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoCodec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoCodec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.VideoCodec";
  }
  protected:
  explicit VideoCodec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kBitrateFieldNumber = 2,
    kBitrateControlFieldNumber = 3,
    kKeyFrameIntervalFieldNumber = 4,
    kEnableMultiSliceModeFieldNumber = 5,
    kChannelIdFieldNumber = 6,
  };
  // string codec = 1;
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // uint32 bitrate = 2;
  void clear_bitrate();
  uint32_t bitrate() const;
  void set_bitrate(uint32_t value);
  private:
  uint32_t _internal_bitrate() const;
  void _internal_set_bitrate(uint32_t value);
  public:

  // .ccs_msg.BitrateControlAlgorithm bitrate_control = 3;
  void clear_bitrate_control();
  ::ccs_msg::BitrateControlAlgorithm bitrate_control() const;
  void set_bitrate_control(::ccs_msg::BitrateControlAlgorithm value);
  private:
  ::ccs_msg::BitrateControlAlgorithm _internal_bitrate_control() const;
  void _internal_set_bitrate_control(::ccs_msg::BitrateControlAlgorithm value);
  public:

  // uint32 key_frame_interval = 4;
  void clear_key_frame_interval();
  uint32_t key_frame_interval() const;
  void set_key_frame_interval(uint32_t value);
  private:
  uint32_t _internal_key_frame_interval() const;
  void _internal_set_key_frame_interval(uint32_t value);
  public:

  // bool enable_multi_slice_mode = 5;
  void clear_enable_multi_slice_mode();
  bool enable_multi_slice_mode() const;
  void set_enable_multi_slice_mode(bool value);
  private:
  bool _internal_enable_multi_slice_mode() const;
  void _internal_set_enable_multi_slice_mode(bool value);
  public:

  // uint32 channel_id = 6;
  void clear_channel_id();
  uint32_t channel_id() const;
  void set_channel_id(uint32_t value);
  private:
  uint32_t _internal_channel_id() const;
  void _internal_set_channel_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.VideoCodec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  uint32_t bitrate_;
  int bitrate_control_;
  uint32_t key_frame_interval_;
  bool enable_multi_slice_mode_;
  uint32_t channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MixerParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MixerParams) */ {
 public:
  inline MixerParams() : MixerParams(nullptr) {}
  ~MixerParams() override;
  explicit PROTOBUF_CONSTEXPR MixerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixerParams(const MixerParams& from);
  MixerParams(MixerParams&& from) noexcept
    : MixerParams() {
    *this = ::std::move(from);
  }

  inline MixerParams& operator=(const MixerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixerParams& operator=(MixerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixerParams* internal_default_instance() {
    return reinterpret_cast<const MixerParams*>(
               &_MixerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MixerParams& a, MixerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MixerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixerParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MixerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MixerParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MixerParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MixerParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MixerParams";
  }
  protected:
  explicit MixerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoCodecsListFieldNumber = 2,
    kBannerTextFieldNumber = 8,
    kRollingTextFieldNumber = 9,
    kIpFieldNumber = 10,
    kOsdNameFieldNumber = 3,
    kOsdBannerFieldNumber = 4,
    kOsdRollingMsgFieldNumber = 5,
    kOsdLogoFieldNumber = 6,
    kOsdSubtitlesFieldNumber = 7,
    kLayoutTypeFieldNumber = 1,
    kChannelsCountFieldNumber = 11,
  };
  // repeated .ccs_msg.VideoCodec video_codecs_list = 2;
  int video_codecs_list_size() const;
  private:
  int _internal_video_codecs_list_size() const;
  public:
  void clear_video_codecs_list();
  ::ccs_msg::VideoCodec* mutable_video_codecs_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoCodec >*
      mutable_video_codecs_list();
  private:
  const ::ccs_msg::VideoCodec& _internal_video_codecs_list(int index) const;
  ::ccs_msg::VideoCodec* _internal_add_video_codecs_list();
  public:
  const ::ccs_msg::VideoCodec& video_codecs_list(int index) const;
  ::ccs_msg::VideoCodec* add_video_codecs_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoCodec >&
      video_codecs_list() const;

  // string banner_text = 8;
  void clear_banner_text();
  const std::string& banner_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_banner_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_banner_text();
  PROTOBUF_NODISCARD std::string* release_banner_text();
  void set_allocated_banner_text(std::string* banner_text);
  private:
  const std::string& _internal_banner_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_banner_text(const std::string& value);
  std::string* _internal_mutable_banner_text();
  public:

  // string rolling_text = 9;
  void clear_rolling_text();
  const std::string& rolling_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolling_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolling_text();
  PROTOBUF_NODISCARD std::string* release_rolling_text();
  void set_allocated_rolling_text(std::string* rolling_text);
  private:
  const std::string& _internal_rolling_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolling_text(const std::string& value);
  std::string* _internal_mutable_rolling_text();
  public:

  // string ip = 10;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .ccs_msg.ITCOSDParams osd_name = 3;
  bool has_osd_name() const;
  private:
  bool _internal_has_osd_name() const;
  public:
  void clear_osd_name();
  const ::ccs_msg::ITCOSDParams& osd_name() const;
  PROTOBUF_NODISCARD ::ccs_msg::ITCOSDParams* release_osd_name();
  ::ccs_msg::ITCOSDParams* mutable_osd_name();
  void set_allocated_osd_name(::ccs_msg::ITCOSDParams* osd_name);
  private:
  const ::ccs_msg::ITCOSDParams& _internal_osd_name() const;
  ::ccs_msg::ITCOSDParams* _internal_mutable_osd_name();
  public:
  void unsafe_arena_set_allocated_osd_name(
      ::ccs_msg::ITCOSDParams* osd_name);
  ::ccs_msg::ITCOSDParams* unsafe_arena_release_osd_name();

  // .ccs_msg.ITCOSDParams osd_banner = 4;
  bool has_osd_banner() const;
  private:
  bool _internal_has_osd_banner() const;
  public:
  void clear_osd_banner();
  const ::ccs_msg::ITCOSDParams& osd_banner() const;
  PROTOBUF_NODISCARD ::ccs_msg::ITCOSDParams* release_osd_banner();
  ::ccs_msg::ITCOSDParams* mutable_osd_banner();
  void set_allocated_osd_banner(::ccs_msg::ITCOSDParams* osd_banner);
  private:
  const ::ccs_msg::ITCOSDParams& _internal_osd_banner() const;
  ::ccs_msg::ITCOSDParams* _internal_mutable_osd_banner();
  public:
  void unsafe_arena_set_allocated_osd_banner(
      ::ccs_msg::ITCOSDParams* osd_banner);
  ::ccs_msg::ITCOSDParams* unsafe_arena_release_osd_banner();

  // .ccs_msg.ITCOSDParams osd_rolling_msg = 5;
  bool has_osd_rolling_msg() const;
  private:
  bool _internal_has_osd_rolling_msg() const;
  public:
  void clear_osd_rolling_msg();
  const ::ccs_msg::ITCOSDParams& osd_rolling_msg() const;
  PROTOBUF_NODISCARD ::ccs_msg::ITCOSDParams* release_osd_rolling_msg();
  ::ccs_msg::ITCOSDParams* mutable_osd_rolling_msg();
  void set_allocated_osd_rolling_msg(::ccs_msg::ITCOSDParams* osd_rolling_msg);
  private:
  const ::ccs_msg::ITCOSDParams& _internal_osd_rolling_msg() const;
  ::ccs_msg::ITCOSDParams* _internal_mutable_osd_rolling_msg();
  public:
  void unsafe_arena_set_allocated_osd_rolling_msg(
      ::ccs_msg::ITCOSDParams* osd_rolling_msg);
  ::ccs_msg::ITCOSDParams* unsafe_arena_release_osd_rolling_msg();

  // .ccs_msg.ITCOSDParams osd_logo = 6;
  bool has_osd_logo() const;
  private:
  bool _internal_has_osd_logo() const;
  public:
  void clear_osd_logo();
  const ::ccs_msg::ITCOSDParams& osd_logo() const;
  PROTOBUF_NODISCARD ::ccs_msg::ITCOSDParams* release_osd_logo();
  ::ccs_msg::ITCOSDParams* mutable_osd_logo();
  void set_allocated_osd_logo(::ccs_msg::ITCOSDParams* osd_logo);
  private:
  const ::ccs_msg::ITCOSDParams& _internal_osd_logo() const;
  ::ccs_msg::ITCOSDParams* _internal_mutable_osd_logo();
  public:
  void unsafe_arena_set_allocated_osd_logo(
      ::ccs_msg::ITCOSDParams* osd_logo);
  ::ccs_msg::ITCOSDParams* unsafe_arena_release_osd_logo();

  // .ccs_msg.ITCOSDParams osd_subtitles = 7;
  bool has_osd_subtitles() const;
  private:
  bool _internal_has_osd_subtitles() const;
  public:
  void clear_osd_subtitles();
  const ::ccs_msg::ITCOSDParams& osd_subtitles() const;
  PROTOBUF_NODISCARD ::ccs_msg::ITCOSDParams* release_osd_subtitles();
  ::ccs_msg::ITCOSDParams* mutable_osd_subtitles();
  void set_allocated_osd_subtitles(::ccs_msg::ITCOSDParams* osd_subtitles);
  private:
  const ::ccs_msg::ITCOSDParams& _internal_osd_subtitles() const;
  ::ccs_msg::ITCOSDParams* _internal_mutable_osd_subtitles();
  public:
  void unsafe_arena_set_allocated_osd_subtitles(
      ::ccs_msg::ITCOSDParams* osd_subtitles);
  ::ccs_msg::ITCOSDParams* unsafe_arena_release_osd_subtitles();

  // .ccs_msg.ITCVideoLayoutType layout_type = 1;
  void clear_layout_type();
  ::ccs_msg::ITCVideoLayoutType layout_type() const;
  void set_layout_type(::ccs_msg::ITCVideoLayoutType value);
  private:
  ::ccs_msg::ITCVideoLayoutType _internal_layout_type() const;
  void _internal_set_layout_type(::ccs_msg::ITCVideoLayoutType value);
  public:

  // uint32 channels_count = 11;
  void clear_channels_count();
  uint32_t channels_count() const;
  void set_channels_count(uint32_t value);
  private:
  uint32_t _internal_channels_count() const;
  void _internal_set_channels_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MixerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoCodec > video_codecs_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr banner_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolling_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::ccs_msg::ITCOSDParams* osd_name_;
  ::ccs_msg::ITCOSDParams* osd_banner_;
  ::ccs_msg::ITCOSDParams* osd_rolling_msg_;
  ::ccs_msg::ITCOSDParams* osd_logo_;
  ::ccs_msg::ITCOSDParams* osd_subtitles_;
  int layout_type_;
  uint32_t channels_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class VideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.VideoParams) */ {
 public:
  inline VideoParams() : VideoParams(nullptr) {}
  ~VideoParams() override;
  explicit PROTOBUF_CONSTEXPR VideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoParams(const VideoParams& from);
  VideoParams(VideoParams&& from) noexcept
    : VideoParams() {
    *this = ::std::move(from);
  }

  inline VideoParams& operator=(const VideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoParams& operator=(VideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoParams* internal_default_instance() {
    return reinterpret_cast<const VideoParams*>(
               &_VideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VideoParams& a, VideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.VideoParams";
  }
  protected:
  explicit VideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMixerParamsListFieldNumber = 4,
    kCodecFieldNumber = 1,
    kDefaultBandWidthFieldNumber = 2,
    kMaxBandwidthFieldNumber = 3,
    kVideoMixerCountFieldNumber = 5,
  };
  // repeated .ccs_msg.MixerParams mixer_params_list = 4;
  int mixer_params_list_size() const;
  private:
  int _internal_mixer_params_list_size() const;
  public:
  void clear_mixer_params_list();
  ::ccs_msg::MixerParams* mutable_mixer_params_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MixerParams >*
      mutable_mixer_params_list();
  private:
  const ::ccs_msg::MixerParams& _internal_mixer_params_list(int index) const;
  ::ccs_msg::MixerParams* _internal_add_mixer_params_list();
  public:
  const ::ccs_msg::MixerParams& mixer_params_list(int index) const;
  ::ccs_msg::MixerParams* add_mixer_params_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MixerParams >&
      mixer_params_list() const;

  // string codec = 1;
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // uint32 default_band_width = 2;
  void clear_default_band_width();
  uint32_t default_band_width() const;
  void set_default_band_width(uint32_t value);
  private:
  uint32_t _internal_default_band_width() const;
  void _internal_set_default_band_width(uint32_t value);
  public:

  // uint32 max_bandwidth = 3;
  void clear_max_bandwidth();
  uint32_t max_bandwidth() const;
  void set_max_bandwidth(uint32_t value);
  private:
  uint32_t _internal_max_bandwidth() const;
  void _internal_set_max_bandwidth(uint32_t value);
  public:

  // uint32 video_mixer_count = 5;
  void clear_video_mixer_count();
  uint32_t video_mixer_count() const;
  void set_video_mixer_count(uint32_t value);
  private:
  uint32_t _internal_video_mixer_count() const;
  void _internal_set_video_mixer_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.VideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MixerParams > mixer_params_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  uint32_t default_band_width_;
  uint32_t max_bandwidth_;
  uint32_t video_mixer_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ConfInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.ConfInfo) */ {
 public:
  inline ConfInfo() : ConfInfo(nullptr) {}
  ~ConfInfo() override;
  explicit PROTOBUF_CONSTEXPR ConfInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfInfo(const ConfInfo& from);
  ConfInfo(ConfInfo&& from) noexcept
    : ConfInfo() {
    *this = ::std::move(from);
  }

  inline ConfInfo& operator=(const ConfInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfInfo& operator=(ConfInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfInfo* internal_default_instance() {
    return reinterpret_cast<const ConfInfo*>(
               &_ConfInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfInfo& a, ConfInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.ConfInfo";
  }
  protected:
  explicit ConfInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeetingIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kRoomNameFieldNumber = 3,
    kCreatorFieldNumber = 4,
    kStartTimeFieldNumber = 10,
    kEndTimeFieldNumber = 11,
    kConfPwFieldNumber = 14,
    kPublishPathFieldNumber = 26,
    kRtmpPlayPathFieldNumber = 27,
    kHlsPlayPathFieldNumber = 28,
    kTimeIntervalFieldNumber = 5,
    kActiveMembersFieldNumber = 6,
    kMaxMemberCountFieldNumber = 7,
    kConferenceModeFieldNumber = 8,
    kProtoTypeFieldNumber = 13,
    kIsRecordingFieldNumber = 9,
    kIsLivingFieldNumber = 12,
    kIsVirtualFieldNumber = 15,
    kEnableVCSManuallySendH239FieldNumber = 18,
    kInviteModeFieldNumber = 16,
    kMaxInviteTimesFieldNumber = 17,
    kEnterpriseIdFieldNumber = 19,
    kActiveLinuxMembersFieldNumber = 20,
    kActiveWindowsMembersFieldNumber = 21,
    kActiveMacMembersFieldNumber = 22,
    kActiveAndroidMembersFieldNumber = 23,
    kActiveIOSMembersFieldNumber = 24,
    kIsExternalLiveFieldNumber = 25,
  };
  // string meeting_id = 1;
  void clear_meeting_id();
  const std::string& meeting_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meeting_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meeting_id();
  PROTOBUF_NODISCARD std::string* release_meeting_id();
  void set_allocated_meeting_id(std::string* meeting_id);
  private:
  const std::string& _internal_meeting_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meeting_id(const std::string& value);
  std::string* _internal_mutable_meeting_id();
  public:

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string room_name = 3;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // string creator = 4;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string start_time = 10;
  void clear_start_time();
  const std::string& start_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* start_time);
  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(const std::string& value);
  std::string* _internal_mutable_start_time();
  public:

  // string end_time = 11;
  void clear_end_time();
  const std::string& end_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_time();
  PROTOBUF_NODISCARD std::string* release_end_time();
  void set_allocated_end_time(std::string* end_time);
  private:
  const std::string& _internal_end_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_time(const std::string& value);
  std::string* _internal_mutable_end_time();
  public:

  // string conf_pw = 14;
  void clear_conf_pw();
  const std::string& conf_pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conf_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conf_pw();
  PROTOBUF_NODISCARD std::string* release_conf_pw();
  void set_allocated_conf_pw(std::string* conf_pw);
  private:
  const std::string& _internal_conf_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conf_pw(const std::string& value);
  std::string* _internal_mutable_conf_pw();
  public:

  // string publish_path = 26;
  void clear_publish_path();
  const std::string& publish_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publish_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publish_path();
  PROTOBUF_NODISCARD std::string* release_publish_path();
  void set_allocated_publish_path(std::string* publish_path);
  private:
  const std::string& _internal_publish_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publish_path(const std::string& value);
  std::string* _internal_mutable_publish_path();
  public:

  // string rtmp_play_path = 27;
  void clear_rtmp_play_path();
  const std::string& rtmp_play_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rtmp_play_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rtmp_play_path();
  PROTOBUF_NODISCARD std::string* release_rtmp_play_path();
  void set_allocated_rtmp_play_path(std::string* rtmp_play_path);
  private:
  const std::string& _internal_rtmp_play_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rtmp_play_path(const std::string& value);
  std::string* _internal_mutable_rtmp_play_path();
  public:

  // string hls_play_path = 28;
  void clear_hls_play_path();
  const std::string& hls_play_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hls_play_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hls_play_path();
  PROTOBUF_NODISCARD std::string* release_hls_play_path();
  void set_allocated_hls_play_path(std::string* hls_play_path);
  private:
  const std::string& _internal_hls_play_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hls_play_path(const std::string& value);
  std::string* _internal_mutable_hls_play_path();
  public:

  // uint32 time_interval = 5;
  void clear_time_interval();
  uint32_t time_interval() const;
  void set_time_interval(uint32_t value);
  private:
  uint32_t _internal_time_interval() const;
  void _internal_set_time_interval(uint32_t value);
  public:

  // uint32 active_members = 6;
  void clear_active_members();
  uint32_t active_members() const;
  void set_active_members(uint32_t value);
  private:
  uint32_t _internal_active_members() const;
  void _internal_set_active_members(uint32_t value);
  public:

  // uint32 max_member_count = 7;
  void clear_max_member_count();
  uint32_t max_member_count() const;
  void set_max_member_count(uint32_t value);
  private:
  uint32_t _internal_max_member_count() const;
  void _internal_set_max_member_count(uint32_t value);
  public:

  // .ccs_msg.ConfControlMode conference_mode = 8;
  void clear_conference_mode();
  ::ccs_msg::ConfControlMode conference_mode() const;
  void set_conference_mode(::ccs_msg::ConfControlMode value);
  private:
  ::ccs_msg::ConfControlMode _internal_conference_mode() const;
  void _internal_set_conference_mode(::ccs_msg::ConfControlMode value);
  public:

  // .ccs_msg.ProtoType proto_type = 13;
  void clear_proto_type();
  ::ccs_msg::ProtoType proto_type() const;
  void set_proto_type(::ccs_msg::ProtoType value);
  private:
  ::ccs_msg::ProtoType _internal_proto_type() const;
  void _internal_set_proto_type(::ccs_msg::ProtoType value);
  public:

  // bool is_recording = 9;
  void clear_is_recording();
  bool is_recording() const;
  void set_is_recording(bool value);
  private:
  bool _internal_is_recording() const;
  void _internal_set_is_recording(bool value);
  public:

  // bool is_living = 12;
  void clear_is_living();
  bool is_living() const;
  void set_is_living(bool value);
  private:
  bool _internal_is_living() const;
  void _internal_set_is_living(bool value);
  public:

  // bool is_virtual = 15;
  void clear_is_virtual();
  bool is_virtual() const;
  void set_is_virtual(bool value);
  private:
  bool _internal_is_virtual() const;
  void _internal_set_is_virtual(bool value);
  public:

  // bool enable_VCS_manually_send_H239 = 18;
  void clear_enable_vcs_manually_send_h239();
  bool enable_vcs_manually_send_h239() const;
  void set_enable_vcs_manually_send_h239(bool value);
  private:
  bool _internal_enable_vcs_manually_send_h239() const;
  void _internal_set_enable_vcs_manually_send_h239(bool value);
  public:

  // .ccs_msg.InviteMode invite_mode = 16;
  void clear_invite_mode();
  ::ccs_msg::InviteMode invite_mode() const;
  void set_invite_mode(::ccs_msg::InviteMode value);
  private:
  ::ccs_msg::InviteMode _internal_invite_mode() const;
  void _internal_set_invite_mode(::ccs_msg::InviteMode value);
  public:

  // uint32 max_invite_times = 17;
  void clear_max_invite_times();
  uint32_t max_invite_times() const;
  void set_max_invite_times(uint32_t value);
  private:
  uint32_t _internal_max_invite_times() const;
  void _internal_set_max_invite_times(uint32_t value);
  public:

  // uint32 enterprise_id = 19;
  void clear_enterprise_id();
  uint32_t enterprise_id() const;
  void set_enterprise_id(uint32_t value);
  private:
  uint32_t _internal_enterprise_id() const;
  void _internal_set_enterprise_id(uint32_t value);
  public:

  // uint32 active_linux_members = 20;
  void clear_active_linux_members();
  uint32_t active_linux_members() const;
  void set_active_linux_members(uint32_t value);
  private:
  uint32_t _internal_active_linux_members() const;
  void _internal_set_active_linux_members(uint32_t value);
  public:

  // uint32 active_windows_members = 21;
  void clear_active_windows_members();
  uint32_t active_windows_members() const;
  void set_active_windows_members(uint32_t value);
  private:
  uint32_t _internal_active_windows_members() const;
  void _internal_set_active_windows_members(uint32_t value);
  public:

  // uint32 active_mac_members = 22;
  void clear_active_mac_members();
  uint32_t active_mac_members() const;
  void set_active_mac_members(uint32_t value);
  private:
  uint32_t _internal_active_mac_members() const;
  void _internal_set_active_mac_members(uint32_t value);
  public:

  // uint32 active_android_members = 23;
  void clear_active_android_members();
  uint32_t active_android_members() const;
  void set_active_android_members(uint32_t value);
  private:
  uint32_t _internal_active_android_members() const;
  void _internal_set_active_android_members(uint32_t value);
  public:

  // uint32 active_IOS_members = 24;
  void clear_active_ios_members();
  uint32_t active_ios_members() const;
  void set_active_ios_members(uint32_t value);
  private:
  uint32_t _internal_active_ios_members() const;
  void _internal_set_active_ios_members(uint32_t value);
  public:

  // bool is_external_live = 25;
  void clear_is_external_live();
  bool is_external_live() const;
  void set_is_external_live(bool value);
  private:
  bool _internal_is_external_live() const;
  void _internal_set_is_external_live(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.ConfInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meeting_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conf_pw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publish_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtmp_play_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hls_play_path_;
  uint32_t time_interval_;
  uint32_t active_members_;
  uint32_t max_member_count_;
  int conference_mode_;
  int proto_type_;
  bool is_recording_;
  bool is_living_;
  bool is_virtual_;
  bool enable_vcs_manually_send_h239_;
  int invite_mode_;
  uint32_t max_invite_times_;
  uint32_t enterprise_id_;
  uint32_t active_linux_members_;
  uint32_t active_windows_members_;
  uint32_t active_mac_members_;
  uint32_t active_android_members_;
  uint32_t active_ios_members_;
  bool is_external_live_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CreateMeetingReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.CreateMeetingReq) */ {
 public:
  inline CreateMeetingReq() : CreateMeetingReq(nullptr) {}
  ~CreateMeetingReq() override;
  explicit PROTOBUF_CONSTEXPR CreateMeetingReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMeetingReq(const CreateMeetingReq& from);
  CreateMeetingReq(CreateMeetingReq&& from) noexcept
    : CreateMeetingReq() {
    *this = ::std::move(from);
  }

  inline CreateMeetingReq& operator=(const CreateMeetingReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMeetingReq& operator=(CreateMeetingReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMeetingReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMeetingReq* internal_default_instance() {
    return reinterpret_cast<const CreateMeetingReq*>(
               &_CreateMeetingReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateMeetingReq& a, CreateMeetingReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMeetingReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMeetingReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMeetingReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMeetingReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMeetingReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateMeetingReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMeetingReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.CreateMeetingReq";
  }
  protected:
  explicit CreateMeetingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kMeetingIDFieldNumber = 3,
    kNameFieldNumber = 4,
    kCreatorFieldNumber = 5,
    kConfPasswordFieldNumber = 6,
    kAudioCodecFieldNumber = 8,
    kStartTimeFieldNumber = 12,
    kEndTimeFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kExVideoCodecFieldNumber = 14,
    kVideoParamsFieldNumber = 15,
    kLayoutFieldNumber = 16,
    kInviteModeFieldNumber = 7,
    kMemberCountLimitFieldNumber = 9,
    kConfMediaTypeFieldNumber = 10,
    kProtoTypeFieldNumber = 11,
  };
  // string room_ID = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string meeting_ID = 3;
  void clear_meeting_id();
  const std::string& meeting_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meeting_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meeting_id();
  PROTOBUF_NODISCARD std::string* release_meeting_id();
  void set_allocated_meeting_id(std::string* meeting_id);
  private:
  const std::string& _internal_meeting_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meeting_id(const std::string& value);
  std::string* _internal_mutable_meeting_id();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string creator = 5;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string conf_Password = 6;
  void clear_conf_password();
  const std::string& conf_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conf_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conf_password();
  PROTOBUF_NODISCARD std::string* release_conf_password();
  void set_allocated_conf_password(std::string* conf_password);
  private:
  const std::string& _internal_conf_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conf_password(const std::string& value);
  std::string* _internal_mutable_conf_password();
  public:

  // string audio_codec = 8;
  void clear_audio_codec();
  const std::string& audio_codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_codec();
  PROTOBUF_NODISCARD std::string* release_audio_codec();
  void set_allocated_audio_codec(std::string* audio_codec);
  private:
  const std::string& _internal_audio_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_codec(const std::string& value);
  std::string* _internal_mutable_audio_codec();
  public:

  // string start_time = 12;
  void clear_start_time();
  const std::string& start_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* start_time);
  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(const std::string& value);
  std::string* _internal_mutable_start_time();
  public:

  // string end_time = 13;
  void clear_end_time();
  const std::string& end_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_time();
  PROTOBUF_NODISCARD std::string* release_end_time();
  void set_allocated_end_time(std::string* end_time);
  private:
  const std::string& _internal_end_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_time(const std::string& value);
  std::string* _internal_mutable_end_time();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.VideoCodec ex_video_codec = 14;
  bool has_ex_video_codec() const;
  private:
  bool _internal_has_ex_video_codec() const;
  public:
  void clear_ex_video_codec();
  const ::ccs_msg::VideoCodec& ex_video_codec() const;
  PROTOBUF_NODISCARD ::ccs_msg::VideoCodec* release_ex_video_codec();
  ::ccs_msg::VideoCodec* mutable_ex_video_codec();
  void set_allocated_ex_video_codec(::ccs_msg::VideoCodec* ex_video_codec);
  private:
  const ::ccs_msg::VideoCodec& _internal_ex_video_codec() const;
  ::ccs_msg::VideoCodec* _internal_mutable_ex_video_codec();
  public:
  void unsafe_arena_set_allocated_ex_video_codec(
      ::ccs_msg::VideoCodec* ex_video_codec);
  ::ccs_msg::VideoCodec* unsafe_arena_release_ex_video_codec();

  // .ccs_msg.VideoParams video_params = 15;
  bool has_video_params() const;
  private:
  bool _internal_has_video_params() const;
  public:
  void clear_video_params();
  const ::ccs_msg::VideoParams& video_params() const;
  PROTOBUF_NODISCARD ::ccs_msg::VideoParams* release_video_params();
  ::ccs_msg::VideoParams* mutable_video_params();
  void set_allocated_video_params(::ccs_msg::VideoParams* video_params);
  private:
  const ::ccs_msg::VideoParams& _internal_video_params() const;
  ::ccs_msg::VideoParams* _internal_mutable_video_params();
  public:
  void unsafe_arena_set_allocated_video_params(
      ::ccs_msg::VideoParams* video_params);
  ::ccs_msg::VideoParams* unsafe_arena_release_video_params();

  // .ccs_msg.VideoLayout layout = 16;
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  const ::ccs_msg::VideoLayout& layout() const;
  PROTOBUF_NODISCARD ::ccs_msg::VideoLayout* release_layout();
  ::ccs_msg::VideoLayout* mutable_layout();
  void set_allocated_layout(::ccs_msg::VideoLayout* layout);
  private:
  const ::ccs_msg::VideoLayout& _internal_layout() const;
  ::ccs_msg::VideoLayout* _internal_mutable_layout();
  public:
  void unsafe_arena_set_allocated_layout(
      ::ccs_msg::VideoLayout* layout);
  ::ccs_msg::VideoLayout* unsafe_arena_release_layout();

  // .ccs_msg.InviteMode invite_mode = 7;
  void clear_invite_mode();
  ::ccs_msg::InviteMode invite_mode() const;
  void set_invite_mode(::ccs_msg::InviteMode value);
  private:
  ::ccs_msg::InviteMode _internal_invite_mode() const;
  void _internal_set_invite_mode(::ccs_msg::InviteMode value);
  public:

  // uint32 member_count_limit = 9;
  void clear_member_count_limit();
  uint32_t member_count_limit() const;
  void set_member_count_limit(uint32_t value);
  private:
  uint32_t _internal_member_count_limit() const;
  void _internal_set_member_count_limit(uint32_t value);
  public:

  // .ccs_msg.ConferenceMediaType conf_media_type = 10;
  void clear_conf_media_type();
  ::ccs_msg::ConferenceMediaType conf_media_type() const;
  void set_conf_media_type(::ccs_msg::ConferenceMediaType value);
  private:
  ::ccs_msg::ConferenceMediaType _internal_conf_media_type() const;
  void _internal_set_conf_media_type(::ccs_msg::ConferenceMediaType value);
  public:

  // .ccs_msg.ProtoType proto_type = 11;
  void clear_proto_type();
  ::ccs_msg::ProtoType proto_type() const;
  void set_proto_type(::ccs_msg::ProtoType value);
  private:
  ::ccs_msg::ProtoType _internal_proto_type() const;
  void _internal_set_proto_type(::ccs_msg::ProtoType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.CreateMeetingReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meeting_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conf_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_time_;
  ::ccs_msg::MsgHeader* header_;
  ::ccs_msg::VideoCodec* ex_video_codec_;
  ::ccs_msg::VideoParams* video_params_;
  ::ccs_msg::VideoLayout* layout_;
  int invite_mode_;
  uint32_t member_count_limit_;
  int conf_media_type_;
  int proto_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CreateMeetingRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.CreateMeetingRes) */ {
 public:
  inline CreateMeetingRes() : CreateMeetingRes(nullptr) {}
  ~CreateMeetingRes() override;
  explicit PROTOBUF_CONSTEXPR CreateMeetingRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMeetingRes(const CreateMeetingRes& from);
  CreateMeetingRes(CreateMeetingRes&& from) noexcept
    : CreateMeetingRes() {
    *this = ::std::move(from);
  }

  inline CreateMeetingRes& operator=(const CreateMeetingRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMeetingRes& operator=(CreateMeetingRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMeetingRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMeetingRes* internal_default_instance() {
    return reinterpret_cast<const CreateMeetingRes*>(
               &_CreateMeetingRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateMeetingRes& a, CreateMeetingRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMeetingRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMeetingRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMeetingRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMeetingRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMeetingRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateMeetingRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMeetingRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.CreateMeetingRes";
  }
  protected:
  explicit CreateMeetingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kMeetingIdFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string meeting_id = 3;
  void clear_meeting_id();
  const std::string& meeting_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meeting_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meeting_id();
  PROTOBUF_NODISCARD std::string* release_meeting_id();
  void set_allocated_meeting_id(std::string* meeting_id);
  private:
  const std::string& _internal_meeting_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meeting_id(const std::string& value);
  std::string* _internal_mutable_meeting_id();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.CreateMeetingRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meeting_id_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GetMeetingListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.GetMeetingListReq) */ {
 public:
  inline GetMeetingListReq() : GetMeetingListReq(nullptr) {}
  ~GetMeetingListReq() override;
  explicit PROTOBUF_CONSTEXPR GetMeetingListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMeetingListReq(const GetMeetingListReq& from);
  GetMeetingListReq(GetMeetingListReq&& from) noexcept
    : GetMeetingListReq() {
    *this = ::std::move(from);
  }

  inline GetMeetingListReq& operator=(const GetMeetingListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMeetingListReq& operator=(GetMeetingListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMeetingListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMeetingListReq* internal_default_instance() {
    return reinterpret_cast<const GetMeetingListReq*>(
               &_GetMeetingListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetMeetingListReq& a, GetMeetingListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMeetingListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMeetingListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMeetingListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMeetingListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMeetingListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMeetingListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMeetingListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.GetMeetingListReq";
  }
  protected:
  explicit GetMeetingListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:ccs_msg.GetMeetingListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::MsgHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ConferenceListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.ConferenceListRes) */ {
 public:
  inline ConferenceListRes() : ConferenceListRes(nullptr) {}
  ~ConferenceListRes() override;
  explicit PROTOBUF_CONSTEXPR ConferenceListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConferenceListRes(const ConferenceListRes& from);
  ConferenceListRes(ConferenceListRes&& from) noexcept
    : ConferenceListRes() {
    *this = ::std::move(from);
  }

  inline ConferenceListRes& operator=(const ConferenceListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConferenceListRes& operator=(ConferenceListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConferenceListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConferenceListRes* internal_default_instance() {
    return reinterpret_cast<const ConferenceListRes*>(
               &_ConferenceListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConferenceListRes& a, ConferenceListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ConferenceListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConferenceListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConferenceListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConferenceListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConferenceListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConferenceListRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConferenceListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.ConferenceListRes";
  }
  protected:
  explicit ConferenceListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfInfoListFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .ccs_msg.ConfInfo conf_info_list = 2;
  int conf_info_list_size() const;
  private:
  int _internal_conf_info_list_size() const;
  public:
  void clear_conf_info_list();
  ::ccs_msg::ConfInfo* mutable_conf_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::ConfInfo >*
      mutable_conf_info_list();
  private:
  const ::ccs_msg::ConfInfo& _internal_conf_info_list(int index) const;
  ::ccs_msg::ConfInfo* _internal_add_conf_info_list();
  public:
  const ::ccs_msg::ConfInfo& conf_info_list(int index) const;
  ::ccs_msg::ConfInfo* add_conf_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::ConfInfo >&
      conf_info_list() const;

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.ConferenceListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::ConfInfo > conf_info_list_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class InviteMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.InviteMemberReq) */ {
 public:
  inline InviteMemberReq() : InviteMemberReq(nullptr) {}
  ~InviteMemberReq() override;
  explicit PROTOBUF_CONSTEXPR InviteMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteMemberReq(const InviteMemberReq& from);
  InviteMemberReq(InviteMemberReq&& from) noexcept
    : InviteMemberReq() {
    *this = ::std::move(from);
  }

  inline InviteMemberReq& operator=(const InviteMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteMemberReq& operator=(InviteMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InviteMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteMemberReq* internal_default_instance() {
    return reinterpret_cast<const InviteMemberReq*>(
               &_InviteMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InviteMemberReq& a, InviteMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InviteMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InviteMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InviteMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InviteMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InviteMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.InviteMemberReq";
  }
  protected:
  explicit InviteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kInviteNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kIsAddFieldNumber = 4,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // string inviteName = 3;
  void clear_invitename();
  const std::string& invitename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitename();
  PROTOBUF_NODISCARD std::string* release_invitename();
  void set_allocated_invitename(std::string* invitename);
  private:
  const std::string& _internal_invitename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitename(const std::string& value);
  std::string* _internal_mutable_invitename();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // bool isAdd = 4;
  void clear_isadd();
  bool isadd() const;
  void set_isadd(bool value);
  private:
  bool _internal_isadd() const;
  void _internal_set_isadd(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.InviteMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitename_;
  ::ccs_msg::MsgHeader* header_;
  bool isadd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class InviteMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.InviteMemberRes) */ {
 public:
  inline InviteMemberRes() : InviteMemberRes(nullptr) {}
  ~InviteMemberRes() override;
  explicit PROTOBUF_CONSTEXPR InviteMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteMemberRes(const InviteMemberRes& from);
  InviteMemberRes(InviteMemberRes&& from) noexcept
    : InviteMemberRes() {
    *this = ::std::move(from);
  }

  inline InviteMemberRes& operator=(const InviteMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteMemberRes& operator=(InviteMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InviteMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteMemberRes* internal_default_instance() {
    return reinterpret_cast<const InviteMemberRes*>(
               &_InviteMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InviteMemberRes& a, InviteMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InviteMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InviteMemberRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InviteMemberRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InviteMemberRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InviteMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.InviteMemberRes";
  }
  protected:
  explicit InviteMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kInviteNameFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // string inviteName = 3;
  void clear_invitename();
  const std::string& invitename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitename();
  PROTOBUF_NODISCARD std::string* release_invitename();
  void set_allocated_invitename(std::string* invitename);
  private:
  const std::string& _internal_invitename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitename(const std::string& value);
  std::string* _internal_mutable_invitename();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.InviteMemberRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitename_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DropMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.DropMemberReq) */ {
 public:
  inline DropMemberReq() : DropMemberReq(nullptr) {}
  ~DropMemberReq() override;
  explicit PROTOBUF_CONSTEXPR DropMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropMemberReq(const DropMemberReq& from);
  DropMemberReq(DropMemberReq&& from) noexcept
    : DropMemberReq() {
    *this = ::std::move(from);
  }

  inline DropMemberReq& operator=(const DropMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropMemberReq& operator=(DropMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropMemberReq* internal_default_instance() {
    return reinterpret_cast<const DropMemberReq*>(
               &_DropMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DropMemberReq& a, DropMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DropMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DropMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.DropMemberReq";
  }
  protected:
  explicit DropMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMemberIDFieldNumber = 3,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint64 memberID = 3;
  void clear_memberid();
  uint64_t memberid() const;
  void set_memberid(uint64_t value);
  private:
  uint64_t _internal_memberid() const;
  void _internal_set_memberid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.DropMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::MsgHeader* header_;
  uint64_t memberid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DropMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.DropMemberRes) */ {
 public:
  inline DropMemberRes() : DropMemberRes(nullptr) {}
  ~DropMemberRes() override;
  explicit PROTOBUF_CONSTEXPR DropMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropMemberRes(const DropMemberRes& from);
  DropMemberRes(DropMemberRes&& from) noexcept
    : DropMemberRes() {
    *this = ::std::move(from);
  }

  inline DropMemberRes& operator=(const DropMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropMemberRes& operator=(DropMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropMemberRes* internal_default_instance() {
    return reinterpret_cast<const DropMemberRes*>(
               &_DropMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DropMemberRes& a, DropMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(DropMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropMemberRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropMemberRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DropMemberRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.DropMemberRes";
  }
  protected:
  explicit DropMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kResultFieldNumber = 1,
    kMemberIDFieldNumber = 3,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // uint64 memberID = 3;
  void clear_memberid();
  uint64_t memberid() const;
  void set_memberid(uint64_t value);
  private:
  uint64_t _internal_memberid() const;
  void _internal_set_memberid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.DropMemberRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::ResultInfo* result_;
  uint64_t memberid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RemoveConfReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.RemoveConfReq) */ {
 public:
  inline RemoveConfReq() : RemoveConfReq(nullptr) {}
  ~RemoveConfReq() override;
  explicit PROTOBUF_CONSTEXPR RemoveConfReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveConfReq(const RemoveConfReq& from);
  RemoveConfReq(RemoveConfReq&& from) noexcept
    : RemoveConfReq() {
    *this = ::std::move(from);
  }

  inline RemoveConfReq& operator=(const RemoveConfReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveConfReq& operator=(RemoveConfReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveConfReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveConfReq* internal_default_instance() {
    return reinterpret_cast<const RemoveConfReq*>(
               &_RemoveConfReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RemoveConfReq& a, RemoveConfReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveConfReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveConfReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveConfReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveConfReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveConfReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveConfReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveConfReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.RemoveConfReq";
  }
  protected:
  explicit RemoveConfReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:ccs_msg.RemoveConfReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::MsgHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RemoveConfRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.RemoveConfRes) */ {
 public:
  inline RemoveConfRes() : RemoveConfRes(nullptr) {}
  ~RemoveConfRes() override;
  explicit PROTOBUF_CONSTEXPR RemoveConfRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveConfRes(const RemoveConfRes& from);
  RemoveConfRes(RemoveConfRes&& from) noexcept
    : RemoveConfRes() {
    *this = ::std::move(from);
  }

  inline RemoveConfRes& operator=(const RemoveConfRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveConfRes& operator=(RemoveConfRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveConfRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveConfRes* internal_default_instance() {
    return reinterpret_cast<const RemoveConfRes*>(
               &_RemoveConfRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RemoveConfRes& a, RemoveConfRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveConfRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveConfRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveConfRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveConfRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveConfRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveConfRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveConfRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.RemoveConfRes";
  }
  protected:
  explicit RemoveConfRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.RemoveConfRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GetVideoLayoutInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.GetVideoLayoutInfoReq) */ {
 public:
  inline GetVideoLayoutInfoReq() : GetVideoLayoutInfoReq(nullptr) {}
  ~GetVideoLayoutInfoReq() override;
  explicit PROTOBUF_CONSTEXPR GetVideoLayoutInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVideoLayoutInfoReq(const GetVideoLayoutInfoReq& from);
  GetVideoLayoutInfoReq(GetVideoLayoutInfoReq&& from) noexcept
    : GetVideoLayoutInfoReq() {
    *this = ::std::move(from);
  }

  inline GetVideoLayoutInfoReq& operator=(const GetVideoLayoutInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoLayoutInfoReq& operator=(GetVideoLayoutInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVideoLayoutInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVideoLayoutInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetVideoLayoutInfoReq*>(
               &_GetVideoLayoutInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetVideoLayoutInfoReq& a, GetVideoLayoutInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVideoLayoutInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVideoLayoutInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVideoLayoutInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVideoLayoutInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVideoLayoutInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVideoLayoutInfoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoLayoutInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.GetVideoLayoutInfoReq";
  }
  protected:
  explicit GetVideoLayoutInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMixerIDFieldNumber = 3,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint32 mixerID = 3;
  void clear_mixerid();
  uint32_t mixerid() const;
  void set_mixerid(uint32_t value);
  private:
  uint32_t _internal_mixerid() const;
  void _internal_set_mixerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.GetVideoLayoutInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::MsgHeader* header_;
  uint32_t mixerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GetVideoLayoutInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.GetVideoLayoutInfoRes) */ {
 public:
  inline GetVideoLayoutInfoRes() : GetVideoLayoutInfoRes(nullptr) {}
  ~GetVideoLayoutInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetVideoLayoutInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVideoLayoutInfoRes(const GetVideoLayoutInfoRes& from);
  GetVideoLayoutInfoRes(GetVideoLayoutInfoRes&& from) noexcept
    : GetVideoLayoutInfoRes() {
    *this = ::std::move(from);
  }

  inline GetVideoLayoutInfoRes& operator=(const GetVideoLayoutInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoLayoutInfoRes& operator=(GetVideoLayoutInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVideoLayoutInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVideoLayoutInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetVideoLayoutInfoRes*>(
               &_GetVideoLayoutInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetVideoLayoutInfoRes& a, GetVideoLayoutInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVideoLayoutInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVideoLayoutInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVideoLayoutInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVideoLayoutInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVideoLayoutInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVideoLayoutInfoRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoLayoutInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.GetVideoLayoutInfoRes";
  }
  protected:
  explicit GetVideoLayoutInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinListFieldNumber = 2,
    kResultFieldNumber = 1,
    kLayoutIdFieldNumber = 3,
    kWindowsFieldNumber = 4,
  };
  // repeated .ccs_msg.VideoWindow win_list = 2;
  int win_list_size() const;
  private:
  int _internal_win_list_size() const;
  public:
  void clear_win_list();
  ::ccs_msg::VideoWindow* mutable_win_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >*
      mutable_win_list();
  private:
  const ::ccs_msg::VideoWindow& _internal_win_list(int index) const;
  ::ccs_msg::VideoWindow* _internal_add_win_list();
  public:
  const ::ccs_msg::VideoWindow& win_list(int index) const;
  ::ccs_msg::VideoWindow* add_win_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >&
      win_list() const;

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // uint32 layout_id = 3;
  void clear_layout_id();
  uint32_t layout_id() const;
  void set_layout_id(uint32_t value);
  private:
  uint32_t _internal_layout_id() const;
  void _internal_set_layout_id(uint32_t value);
  public:

  // uint32 windows = 4;
  void clear_windows();
  uint32_t windows() const;
  void set_windows(uint32_t value);
  private:
  uint32_t _internal_windows() const;
  void _internal_set_windows(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.GetVideoLayoutInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow > win_list_;
  ::ccs_msg::ResultInfo* result_;
  uint32_t layout_id_;
  uint32_t windows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SetVideoLayoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.SetVideoLayoutReq) */ {
 public:
  inline SetVideoLayoutReq() : SetVideoLayoutReq(nullptr) {}
  ~SetVideoLayoutReq() override;
  explicit PROTOBUF_CONSTEXPR SetVideoLayoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVideoLayoutReq(const SetVideoLayoutReq& from);
  SetVideoLayoutReq(SetVideoLayoutReq&& from) noexcept
    : SetVideoLayoutReq() {
    *this = ::std::move(from);
  }

  inline SetVideoLayoutReq& operator=(const SetVideoLayoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVideoLayoutReq& operator=(SetVideoLayoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVideoLayoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVideoLayoutReq* internal_default_instance() {
    return reinterpret_cast<const SetVideoLayoutReq*>(
               &_SetVideoLayoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetVideoLayoutReq& a, SetVideoLayoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVideoLayoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVideoLayoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVideoLayoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVideoLayoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVideoLayoutReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVideoLayoutReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVideoLayoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.SetVideoLayoutReq";
  }
  protected:
  explicit SetVideoLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMixerIDFieldNumber = 3,
    kLayoutIDFieldNumber = 4,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint32 mixerID = 3;
  void clear_mixerid();
  uint32_t mixerid() const;
  void set_mixerid(uint32_t value);
  private:
  uint32_t _internal_mixerid() const;
  void _internal_set_mixerid(uint32_t value);
  public:

  // uint32 layoutID = 4;
  void clear_layoutid();
  uint32_t layoutid() const;
  void set_layoutid(uint32_t value);
  private:
  uint32_t _internal_layoutid() const;
  void _internal_set_layoutid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.SetVideoLayoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::MsgHeader* header_;
  uint32_t mixerid_;
  uint32_t layoutid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SetVideoLayoutRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.SetVideoLayoutRes) */ {
 public:
  inline SetVideoLayoutRes() : SetVideoLayoutRes(nullptr) {}
  ~SetVideoLayoutRes() override;
  explicit PROTOBUF_CONSTEXPR SetVideoLayoutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVideoLayoutRes(const SetVideoLayoutRes& from);
  SetVideoLayoutRes(SetVideoLayoutRes&& from) noexcept
    : SetVideoLayoutRes() {
    *this = ::std::move(from);
  }

  inline SetVideoLayoutRes& operator=(const SetVideoLayoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVideoLayoutRes& operator=(SetVideoLayoutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVideoLayoutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVideoLayoutRes* internal_default_instance() {
    return reinterpret_cast<const SetVideoLayoutRes*>(
               &_SetVideoLayoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetVideoLayoutRes& a, SetVideoLayoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVideoLayoutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVideoLayoutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVideoLayoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVideoLayoutRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetVideoLayoutRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetVideoLayoutRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVideoLayoutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.SetVideoLayoutRes";
  }
  protected:
  explicit SetVideoLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kResultFieldNumber = 1,
    kMixerIDFieldNumber = 3,
    kLayoutIDFieldNumber = 4,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // uint32 mixerID = 3;
  void clear_mixerid();
  uint32_t mixerid() const;
  void set_mixerid(uint32_t value);
  private:
  uint32_t _internal_mixerid() const;
  void _internal_set_mixerid(uint32_t value);
  public:

  // uint32 layoutID = 4;
  void clear_layoutid();
  uint32_t layoutid() const;
  void set_layoutid(uint32_t value);
  private:
  uint32_t _internal_layoutid() const;
  void _internal_set_layoutid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.SetVideoLayoutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::ResultInfo* result_;
  uint32_t mixerid_;
  uint32_t layoutid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GetMembersInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.GetMembersInfoReq) */ {
 public:
  inline GetMembersInfoReq() : GetMembersInfoReq(nullptr) {}
  ~GetMembersInfoReq() override;
  explicit PROTOBUF_CONSTEXPR GetMembersInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMembersInfoReq(const GetMembersInfoReq& from);
  GetMembersInfoReq(GetMembersInfoReq&& from) noexcept
    : GetMembersInfoReq() {
    *this = ::std::move(from);
  }

  inline GetMembersInfoReq& operator=(const GetMembersInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMembersInfoReq& operator=(GetMembersInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMembersInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMembersInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetMembersInfoReq*>(
               &_GetMembersInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetMembersInfoReq& a, GetMembersInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMembersInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMembersInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMembersInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMembersInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMembersInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMembersInfoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.GetMembersInfoReq";
  }
  protected:
  explicit GetMembersInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMixerIDFieldNumber = 3,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint32 mixerID = 3;
  void clear_mixerid();
  uint32_t mixerid() const;
  void set_mixerid(uint32_t value);
  private:
  uint32_t _internal_mixerid() const;
  void _internal_set_mixerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.GetMembersInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ccs_msg::MsgHeader* header_;
  uint32_t mixerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MemberInfo) */ {
 public:
  inline MemberInfo() : MemberInfo(nullptr) {}
  ~MemberInfo() override;
  explicit PROTOBUF_CONSTEXPR MemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemberInfo(const MemberInfo& from);
  MemberInfo(MemberInfo&& from) noexcept
    : MemberInfo() {
    *this = ::std::move(from);
  }

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberInfo& operator=(MemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MemberInfo& a, MemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemberInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MemberInfo";
  }
  protected:
  explicit MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCombinNameFieldNumber = 1,
    kVcsAccountFieldNumber = 26,
    kMemberIdFieldNumber = 2,
    kRoleTypeFieldNumber = 4,
    kIsActiveFieldNumber = 3,
    kIsSoundReceiveMuteFieldNumber = 5,
    kIsSoundTransmitMuteFieldNumber = 6,
    kIsVideoReceiveMuteFieldNumber = 7,
    kAudioLevelFieldNumber = 10,
    kManualGainDbFieldNumber = 11,
    kOutputGainDbFieldNumber = 12,
    kIsVideoTransmitMuteFieldNumber = 8,
    kEnableVadFieldNumber = 9,
    kIsChairmanFieldNumber = 16,
    kIsH239PrivilegeFieldNumber = 17,
    kWindowPositionFieldNumber = 13,
    kExwindowPositionFieldNumber = 14,
    kVideoChannelIdFieldNumber = 15,
    kIsH239ShareFieldNumber = 18,
    kIsH239PermissionFieldNumber = 19,
    kIsMcuFieldNumber = 20,
    kIsAnonymouseFieldNumber = 21,
    kVideoSourceIdFieldNumber = 23,
    kConnectionStatusFieldNumber = 24,
    kIsInBlacklistFieldNumber = 22,
    kIsVcsUserFieldNumber = 25,
    kIsRecordingFieldNumber = 27,
    kNetworkStatusFieldNumber = 28,
    kAudioSourceIdFieldNumber = 29,
  };
  // bytes combin_name = 1;
  void clear_combin_name();
  const std::string& combin_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combin_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combin_name();
  PROTOBUF_NODISCARD std::string* release_combin_name();
  void set_allocated_combin_name(std::string* combin_name);
  private:
  const std::string& _internal_combin_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combin_name(const std::string& value);
  std::string* _internal_mutable_combin_name();
  public:

  // string vcs_account = 26;
  void clear_vcs_account();
  const std::string& vcs_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vcs_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vcs_account();
  PROTOBUF_NODISCARD std::string* release_vcs_account();
  void set_allocated_vcs_account(std::string* vcs_account);
  private:
  const std::string& _internal_vcs_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vcs_account(const std::string& value);
  std::string* _internal_mutable_vcs_account();
  public:

  // uint32 member_id = 2;
  void clear_member_id();
  uint32_t member_id() const;
  void set_member_id(uint32_t value);
  private:
  uint32_t _internal_member_id() const;
  void _internal_set_member_id(uint32_t value);
  public:

  // .ccs_msg.RoleType role_type = 4;
  void clear_role_type();
  ::ccs_msg::RoleType role_type() const;
  void set_role_type(::ccs_msg::RoleType value);
  private:
  ::ccs_msg::RoleType _internal_role_type() const;
  void _internal_set_role_type(::ccs_msg::RoleType value);
  public:

  // bool is_active = 3;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool is_sound_receive_mute = 5;
  void clear_is_sound_receive_mute();
  bool is_sound_receive_mute() const;
  void set_is_sound_receive_mute(bool value);
  private:
  bool _internal_is_sound_receive_mute() const;
  void _internal_set_is_sound_receive_mute(bool value);
  public:

  // bool is_sound_transmit_mute = 6;
  void clear_is_sound_transmit_mute();
  bool is_sound_transmit_mute() const;
  void set_is_sound_transmit_mute(bool value);
  private:
  bool _internal_is_sound_transmit_mute() const;
  void _internal_set_is_sound_transmit_mute(bool value);
  public:

  // bool is_video_receive_mute = 7;
  void clear_is_video_receive_mute();
  bool is_video_receive_mute() const;
  void set_is_video_receive_mute(bool value);
  private:
  bool _internal_is_video_receive_mute() const;
  void _internal_set_is_video_receive_mute(bool value);
  public:

  // uint32 audio_level = 10;
  void clear_audio_level();
  uint32_t audio_level() const;
  void set_audio_level(uint32_t value);
  private:
  uint32_t _internal_audio_level() const;
  void _internal_set_audio_level(uint32_t value);
  public:

  // uint32 manual_gain_db = 11;
  void clear_manual_gain_db();
  uint32_t manual_gain_db() const;
  void set_manual_gain_db(uint32_t value);
  private:
  uint32_t _internal_manual_gain_db() const;
  void _internal_set_manual_gain_db(uint32_t value);
  public:

  // uint32 output_gain_db = 12;
  void clear_output_gain_db();
  uint32_t output_gain_db() const;
  void set_output_gain_db(uint32_t value);
  private:
  uint32_t _internal_output_gain_db() const;
  void _internal_set_output_gain_db(uint32_t value);
  public:

  // bool is_video_transmit_mute = 8;
  void clear_is_video_transmit_mute();
  bool is_video_transmit_mute() const;
  void set_is_video_transmit_mute(bool value);
  private:
  bool _internal_is_video_transmit_mute() const;
  void _internal_set_is_video_transmit_mute(bool value);
  public:

  // bool enable_vad = 9;
  void clear_enable_vad();
  bool enable_vad() const;
  void set_enable_vad(bool value);
  private:
  bool _internal_enable_vad() const;
  void _internal_set_enable_vad(bool value);
  public:

  // bool is_chairman = 16;
  void clear_is_chairman();
  bool is_chairman() const;
  void set_is_chairman(bool value);
  private:
  bool _internal_is_chairman() const;
  void _internal_set_is_chairman(bool value);
  public:

  // bool is_H239_privilege = 17;
  void clear_is_h239_privilege();
  bool is_h239_privilege() const;
  void set_is_h239_privilege(bool value);
  private:
  bool _internal_is_h239_privilege() const;
  void _internal_set_is_h239_privilege(bool value);
  public:

  // uint32 window_position = 13;
  void clear_window_position();
  uint32_t window_position() const;
  void set_window_position(uint32_t value);
  private:
  uint32_t _internal_window_position() const;
  void _internal_set_window_position(uint32_t value);
  public:

  // uint32 exwindow_position = 14;
  void clear_exwindow_position();
  uint32_t exwindow_position() const;
  void set_exwindow_position(uint32_t value);
  private:
  uint32_t _internal_exwindow_position() const;
  void _internal_set_exwindow_position(uint32_t value);
  public:

  // uint32 video_channel_id = 15;
  void clear_video_channel_id();
  uint32_t video_channel_id() const;
  void set_video_channel_id(uint32_t value);
  private:
  uint32_t _internal_video_channel_id() const;
  void _internal_set_video_channel_id(uint32_t value);
  public:

  // bool is_H239_share = 18;
  void clear_is_h239_share();
  bool is_h239_share() const;
  void set_is_h239_share(bool value);
  private:
  bool _internal_is_h239_share() const;
  void _internal_set_is_h239_share(bool value);
  public:

  // bool is_H239_permission = 19;
  void clear_is_h239_permission();
  bool is_h239_permission() const;
  void set_is_h239_permission(bool value);
  private:
  bool _internal_is_h239_permission() const;
  void _internal_set_is_h239_permission(bool value);
  public:

  // bool is_mcu = 20;
  void clear_is_mcu();
  bool is_mcu() const;
  void set_is_mcu(bool value);
  private:
  bool _internal_is_mcu() const;
  void _internal_set_is_mcu(bool value);
  public:

  // bool is_anonymouse = 21;
  void clear_is_anonymouse();
  bool is_anonymouse() const;
  void set_is_anonymouse(bool value);
  private:
  bool _internal_is_anonymouse() const;
  void _internal_set_is_anonymouse(bool value);
  public:

  // uint32 video_source_id = 23;
  void clear_video_source_id();
  uint32_t video_source_id() const;
  void set_video_source_id(uint32_t value);
  private:
  uint32_t _internal_video_source_id() const;
  void _internal_set_video_source_id(uint32_t value);
  public:

  // .ccs_msg.ConnectionStatus connection_status = 24;
  void clear_connection_status();
  ::ccs_msg::ConnectionStatus connection_status() const;
  void set_connection_status(::ccs_msg::ConnectionStatus value);
  private:
  ::ccs_msg::ConnectionStatus _internal_connection_status() const;
  void _internal_set_connection_status(::ccs_msg::ConnectionStatus value);
  public:

  // bool is_in_blacklist = 22;
  void clear_is_in_blacklist();
  bool is_in_blacklist() const;
  void set_is_in_blacklist(bool value);
  private:
  bool _internal_is_in_blacklist() const;
  void _internal_set_is_in_blacklist(bool value);
  public:

  // bool is_vcs_user = 25;
  void clear_is_vcs_user();
  bool is_vcs_user() const;
  void set_is_vcs_user(bool value);
  private:
  bool _internal_is_vcs_user() const;
  void _internal_set_is_vcs_user(bool value);
  public:

  // bool is_recording = 27;
  void clear_is_recording();
  bool is_recording() const;
  void set_is_recording(bool value);
  private:
  bool _internal_is_recording() const;
  void _internal_set_is_recording(bool value);
  public:

  // .ccs_msg.NetworkStatus network_status = 28;
  void clear_network_status();
  ::ccs_msg::NetworkStatus network_status() const;
  void set_network_status(::ccs_msg::NetworkStatus value);
  private:
  ::ccs_msg::NetworkStatus _internal_network_status() const;
  void _internal_set_network_status(::ccs_msg::NetworkStatus value);
  public:

  // uint32 audio_source_id = 29;
  void clear_audio_source_id();
  uint32_t audio_source_id() const;
  void set_audio_source_id(uint32_t value);
  private:
  uint32_t _internal_audio_source_id() const;
  void _internal_set_audio_source_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combin_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vcs_account_;
  uint32_t member_id_;
  int role_type_;
  bool is_active_;
  bool is_sound_receive_mute_;
  bool is_sound_transmit_mute_;
  bool is_video_receive_mute_;
  uint32_t audio_level_;
  uint32_t manual_gain_db_;
  uint32_t output_gain_db_;
  bool is_video_transmit_mute_;
  bool enable_vad_;
  bool is_chairman_;
  bool is_h239_privilege_;
  uint32_t window_position_;
  uint32_t exwindow_position_;
  uint32_t video_channel_id_;
  bool is_h239_share_;
  bool is_h239_permission_;
  bool is_mcu_;
  bool is_anonymouse_;
  uint32_t video_source_id_;
  int connection_status_;
  bool is_in_blacklist_;
  bool is_vcs_user_;
  bool is_recording_;
  int network_status_;
  uint32_t audio_source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GetMembersInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.GetMembersInfoRes) */ {
 public:
  inline GetMembersInfoRes() : GetMembersInfoRes(nullptr) {}
  ~GetMembersInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetMembersInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMembersInfoRes(const GetMembersInfoRes& from);
  GetMembersInfoRes(GetMembersInfoRes&& from) noexcept
    : GetMembersInfoRes() {
    *this = ::std::move(from);
  }

  inline GetMembersInfoRes& operator=(const GetMembersInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMembersInfoRes& operator=(GetMembersInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMembersInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMembersInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetMembersInfoRes*>(
               &_GetMembersInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetMembersInfoRes& a, GetMembersInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMembersInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMembersInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMembersInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMembersInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMembersInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMembersInfoRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.GetMembersInfoRes";
  }
  protected:
  explicit GetMembersInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberInfoListFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .ccs_msg.MemberInfo member_info_list = 2;
  int member_info_list_size() const;
  private:
  int _internal_member_info_list_size() const;
  public:
  void clear_member_info_list();
  ::ccs_msg::MemberInfo* mutable_member_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MemberInfo >*
      mutable_member_info_list();
  private:
  const ::ccs_msg::MemberInfo& _internal_member_info_list(int index) const;
  ::ccs_msg::MemberInfo* _internal_add_member_info_list();
  public:
  const ::ccs_msg::MemberInfo& member_info_list(int index) const;
  ::ccs_msg::MemberInfo* add_member_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MemberInfo >&
      member_info_list() const;

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.GetMembersInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MemberInfo > member_info_list_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RecordReqInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.RecordReqInfo) */ {
 public:
  inline RecordReqInfo() : RecordReqInfo(nullptr) {}
  ~RecordReqInfo() override;
  explicit PROTOBUF_CONSTEXPR RecordReqInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordReqInfo(const RecordReqInfo& from);
  RecordReqInfo(RecordReqInfo&& from) noexcept
    : RecordReqInfo() {
    *this = ::std::move(from);
  }

  inline RecordReqInfo& operator=(const RecordReqInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordReqInfo& operator=(RecordReqInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordReqInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordReqInfo* internal_default_instance() {
    return reinterpret_cast<const RecordReqInfo*>(
               &_RecordReqInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RecordReqInfo& a, RecordReqInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordReqInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordReqInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordReqInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordReqInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordReqInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordReqInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordReqInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.RecordReqInfo";
  }
  protected:
  explicit RecordReqInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecorderVideoSrcIdFieldNumber = 1,
    kRecorderVideoQualityIdFieldNumber = 2,
  };
  // uint32 recorder_video_src_id = 1;
  void clear_recorder_video_src_id();
  uint32_t recorder_video_src_id() const;
  void set_recorder_video_src_id(uint32_t value);
  private:
  uint32_t _internal_recorder_video_src_id() const;
  void _internal_set_recorder_video_src_id(uint32_t value);
  public:

  // uint32 recorder_video_quality_id = 2;
  void clear_recorder_video_quality_id();
  uint32_t recorder_video_quality_id() const;
  void set_recorder_video_quality_id(uint32_t value);
  private:
  uint32_t _internal_recorder_video_quality_id() const;
  void _internal_set_recorder_video_quality_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.RecordReqInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t recorder_video_src_id_;
  uint32_t recorder_video_quality_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StartRecordReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.StartRecordReq) */ {
 public:
  inline StartRecordReq() : StartRecordReq(nullptr) {}
  ~StartRecordReq() override;
  explicit PROTOBUF_CONSTEXPR StartRecordReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRecordReq(const StartRecordReq& from);
  StartRecordReq(StartRecordReq&& from) noexcept
    : StartRecordReq() {
    *this = ::std::move(from);
  }

  inline StartRecordReq& operator=(const StartRecordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRecordReq& operator=(StartRecordReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRecordReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRecordReq* internal_default_instance() {
    return reinterpret_cast<const StartRecordReq*>(
               &_StartRecordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StartRecordReq& a, StartRecordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRecordReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRecordReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRecordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRecordReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRecordReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRecordReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRecordReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.StartRecordReq";
  }
  protected:
  explicit StartRecordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordInfoListFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .ccs_msg.RecordReqInfo record_info_list = 3;
  int record_info_list_size() const;
  private:
  int _internal_record_info_list_size() const;
  public:
  void clear_record_info_list();
  ::ccs_msg::RecordReqInfo* mutable_record_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordReqInfo >*
      mutable_record_info_list();
  private:
  const ::ccs_msg::RecordReqInfo& _internal_record_info_list(int index) const;
  ::ccs_msg::RecordReqInfo* _internal_add_record_info_list();
  public:
  const ::ccs_msg::RecordReqInfo& record_info_list(int index) const;
  ::ccs_msg::RecordReqInfo* add_record_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordReqInfo >&
      record_info_list() const;

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:ccs_msg.StartRecordReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordReqInfo > record_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RecordResInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.RecordResInfo) */ {
 public:
  inline RecordResInfo() : RecordResInfo(nullptr) {}
  ~RecordResInfo() override;
  explicit PROTOBUF_CONSTEXPR RecordResInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordResInfo(const RecordResInfo& from);
  RecordResInfo(RecordResInfo&& from) noexcept
    : RecordResInfo() {
    *this = ::std::move(from);
  }

  inline RecordResInfo& operator=(const RecordResInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordResInfo& operator=(RecordResInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordResInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordResInfo* internal_default_instance() {
    return reinterpret_cast<const RecordResInfo*>(
               &_RecordResInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RecordResInfo& a, RecordResInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordResInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordResInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordResInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordResInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordResInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordResInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordResInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.RecordResInfo";
  }
  protected:
  explicit RecordResInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kRecorderVideoSrcIdFieldNumber = 1,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint32 recorder_video_src_id = 1;
  void clear_recorder_video_src_id();
  uint32_t recorder_video_src_id() const;
  void set_recorder_video_src_id(uint32_t value);
  private:
  uint32_t _internal_recorder_video_src_id() const;
  void _internal_set_recorder_video_src_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.RecordResInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t recorder_video_src_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StartRecordRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.StartRecordRes) */ {
 public:
  inline StartRecordRes() : StartRecordRes(nullptr) {}
  ~StartRecordRes() override;
  explicit PROTOBUF_CONSTEXPR StartRecordRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRecordRes(const StartRecordRes& from);
  StartRecordRes(StartRecordRes&& from) noexcept
    : StartRecordRes() {
    *this = ::std::move(from);
  }

  inline StartRecordRes& operator=(const StartRecordRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRecordRes& operator=(StartRecordRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRecordRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRecordRes* internal_default_instance() {
    return reinterpret_cast<const StartRecordRes*>(
               &_StartRecordRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(StartRecordRes& a, StartRecordRes& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRecordRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRecordRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRecordRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRecordRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRecordRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRecordRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRecordRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.StartRecordRes";
  }
  protected:
  explicit StartRecordRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordInfoListFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .ccs_msg.RecordResInfo record_info_list = 2;
  int record_info_list_size() const;
  private:
  int _internal_record_info_list_size() const;
  public:
  void clear_record_info_list();
  ::ccs_msg::RecordResInfo* mutable_record_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordResInfo >*
      mutable_record_info_list();
  private:
  const ::ccs_msg::RecordResInfo& _internal_record_info_list(int index) const;
  ::ccs_msg::RecordResInfo* _internal_add_record_info_list();
  public:
  const ::ccs_msg::RecordResInfo& record_info_list(int index) const;
  ::ccs_msg::RecordResInfo* add_record_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordResInfo >&
      record_info_list() const;

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.StartRecordRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordResInfo > record_info_list_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StopRecordReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.StopRecordReq) */ {
 public:
  inline StopRecordReq() : StopRecordReq(nullptr) {}
  ~StopRecordReq() override;
  explicit PROTOBUF_CONSTEXPR StopRecordReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRecordReq(const StopRecordReq& from);
  StopRecordReq(StopRecordReq&& from) noexcept
    : StopRecordReq() {
    *this = ::std::move(from);
  }

  inline StopRecordReq& operator=(const StopRecordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRecordReq& operator=(StopRecordReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRecordReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRecordReq* internal_default_instance() {
    return reinterpret_cast<const StopRecordReq*>(
               &_StopRecordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(StopRecordReq& a, StopRecordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRecordReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRecordReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRecordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRecordReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopRecordReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopRecordReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRecordReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.StopRecordReq";
  }
  protected:
  explicit StopRecordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kRecorderVideoSrcIdFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint32 recorderVideoSrcId = 3;
  void clear_recordervideosrcid();
  uint32_t recordervideosrcid() const;
  void set_recordervideosrcid(uint32_t value);
  private:
  uint32_t _internal_recordervideosrcid() const;
  void _internal_set_recordervideosrcid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.StopRecordReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  uint32_t recordervideosrcid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StopRecordRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.StopRecordRes) */ {
 public:
  inline StopRecordRes() : StopRecordRes(nullptr) {}
  ~StopRecordRes() override;
  explicit PROTOBUF_CONSTEXPR StopRecordRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRecordRes(const StopRecordRes& from);
  StopRecordRes(StopRecordRes&& from) noexcept
    : StopRecordRes() {
    *this = ::std::move(from);
  }

  inline StopRecordRes& operator=(const StopRecordRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRecordRes& operator=(StopRecordRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRecordRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRecordRes* internal_default_instance() {
    return reinterpret_cast<const StopRecordRes*>(
               &_StopRecordRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StopRecordRes& a, StopRecordRes& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRecordRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRecordRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRecordRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRecordRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopRecordRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopRecordRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRecordRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.StopRecordRes";
  }
  protected:
  explicit StopRecordRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.StopRecordRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MuteMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MuteMemberReq) */ {
 public:
  inline MuteMemberReq() : MuteMemberReq(nullptr) {}
  ~MuteMemberReq() override;
  explicit PROTOBUF_CONSTEXPR MuteMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteMemberReq(const MuteMemberReq& from);
  MuteMemberReq(MuteMemberReq&& from) noexcept
    : MuteMemberReq() {
    *this = ::std::move(from);
  }

  inline MuteMemberReq& operator=(const MuteMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteMemberReq& operator=(MuteMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MuteMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteMemberReq* internal_default_instance() {
    return reinterpret_cast<const MuteMemberReq*>(
               &_MuteMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MuteMemberReq& a, MuteMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MuteMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MuteMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MuteMemberReq";
  }
  protected:
  explicit MuteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMuteTypeFieldNumber = 4,
  };
  // repeated int32 member_id_list = 3;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  private:
  int32_t _internal_member_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_member_id_list() const;
  void _internal_add_member_id_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_member_id_list();
  public:
  int32_t member_id_list(int index) const;
  void set_member_id_list(int index, int32_t value);
  void add_member_id_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_member_id_list();

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.MuteType mute_type = 4;
  void clear_mute_type();
  ::ccs_msg::MuteType mute_type() const;
  void set_mute_type(::ccs_msg::MuteType value);
  private:
  ::ccs_msg::MuteType _internal_mute_type() const;
  void _internal_set_mute_type(::ccs_msg::MuteType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MuteMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > member_id_list_;
  mutable std::atomic<int> _member_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  int mute_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MuteMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MuteMemberRes) */ {
 public:
  inline MuteMemberRes() : MuteMemberRes(nullptr) {}
  ~MuteMemberRes() override;
  explicit PROTOBUF_CONSTEXPR MuteMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteMemberRes(const MuteMemberRes& from);
  MuteMemberRes(MuteMemberRes&& from) noexcept
    : MuteMemberRes() {
    *this = ::std::move(from);
  }

  inline MuteMemberRes& operator=(const MuteMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteMemberRes& operator=(MuteMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MuteMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteMemberRes* internal_default_instance() {
    return reinterpret_cast<const MuteMemberRes*>(
               &_MuteMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MuteMemberRes& a, MuteMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteMemberRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MuteMemberRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MuteMemberRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MuteMemberRes";
  }
  protected:
  explicit MuteMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.MuteMemberRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class UnmuteMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.UnmuteMemberReq) */ {
 public:
  inline UnmuteMemberReq() : UnmuteMemberReq(nullptr) {}
  ~UnmuteMemberReq() override;
  explicit PROTOBUF_CONSTEXPR UnmuteMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteMemberReq(const UnmuteMemberReq& from);
  UnmuteMemberReq(UnmuteMemberReq&& from) noexcept
    : UnmuteMemberReq() {
    *this = ::std::move(from);
  }

  inline UnmuteMemberReq& operator=(const UnmuteMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteMemberReq& operator=(UnmuteMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnmuteMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteMemberReq* internal_default_instance() {
    return reinterpret_cast<const UnmuteMemberReq*>(
               &_UnmuteMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UnmuteMemberReq& a, UnmuteMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnmuteMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnmuteMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmuteMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.UnmuteMemberReq";
  }
  protected:
  explicit UnmuteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 3,
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMuteTypeFieldNumber = 4,
  };
  // repeated int32 member_id_list = 3;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  private:
  int32_t _internal_member_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_member_id_list() const;
  void _internal_add_member_id_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_member_id_list();
  public:
  int32_t member_id_list(int index) const;
  void set_member_id_list(int index, int32_t value);
  void add_member_id_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_member_id_list();

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.MuteType mute_type = 4;
  void clear_mute_type();
  ::ccs_msg::MuteType mute_type() const;
  void set_mute_type(::ccs_msg::MuteType value);
  private:
  ::ccs_msg::MuteType _internal_mute_type() const;
  void _internal_set_mute_type(::ccs_msg::MuteType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.UnmuteMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > member_id_list_;
  mutable std::atomic<int> _member_id_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  int mute_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class UnmuteMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.UnmuteMemberRes) */ {
 public:
  inline UnmuteMemberRes() : UnmuteMemberRes(nullptr) {}
  ~UnmuteMemberRes() override;
  explicit PROTOBUF_CONSTEXPR UnmuteMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteMemberRes(const UnmuteMemberRes& from);
  UnmuteMemberRes(UnmuteMemberRes&& from) noexcept
    : UnmuteMemberRes() {
    *this = ::std::move(from);
  }

  inline UnmuteMemberRes& operator=(const UnmuteMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteMemberRes& operator=(UnmuteMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnmuteMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteMemberRes* internal_default_instance() {
    return reinterpret_cast<const UnmuteMemberRes*>(
               &_UnmuteMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UnmuteMemberRes& a, UnmuteMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteMemberRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnmuteMemberRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnmuteMemberRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmuteMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.UnmuteMemberRes";
  }
  protected:
  explicit UnmuteMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.UnmuteMemberRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MuteAllMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MuteAllMemberReq) */ {
 public:
  inline MuteAllMemberReq() : MuteAllMemberReq(nullptr) {}
  ~MuteAllMemberReq() override;
  explicit PROTOBUF_CONSTEXPR MuteAllMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteAllMemberReq(const MuteAllMemberReq& from);
  MuteAllMemberReq(MuteAllMemberReq&& from) noexcept
    : MuteAllMemberReq() {
    *this = ::std::move(from);
  }

  inline MuteAllMemberReq& operator=(const MuteAllMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteAllMemberReq& operator=(MuteAllMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MuteAllMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteAllMemberReq* internal_default_instance() {
    return reinterpret_cast<const MuteAllMemberReq*>(
               &_MuteAllMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MuteAllMemberReq& a, MuteAllMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteAllMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteAllMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteAllMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteAllMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MuteAllMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MuteAllMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteAllMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MuteAllMemberReq";
  }
  protected:
  explicit MuteAllMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMuteTypeFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.MuteType mute_type = 3;
  void clear_mute_type();
  ::ccs_msg::MuteType mute_type() const;
  void set_mute_type(::ccs_msg::MuteType value);
  private:
  ::ccs_msg::MuteType _internal_mute_type() const;
  void _internal_set_mute_type(::ccs_msg::MuteType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MuteAllMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  int mute_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MuteAllMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MuteAllMemberRes) */ {
 public:
  inline MuteAllMemberRes() : MuteAllMemberRes(nullptr) {}
  ~MuteAllMemberRes() override;
  explicit PROTOBUF_CONSTEXPR MuteAllMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteAllMemberRes(const MuteAllMemberRes& from);
  MuteAllMemberRes(MuteAllMemberRes&& from) noexcept
    : MuteAllMemberRes() {
    *this = ::std::move(from);
  }

  inline MuteAllMemberRes& operator=(const MuteAllMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteAllMemberRes& operator=(MuteAllMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MuteAllMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteAllMemberRes* internal_default_instance() {
    return reinterpret_cast<const MuteAllMemberRes*>(
               &_MuteAllMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MuteAllMemberRes& a, MuteAllMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteAllMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteAllMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteAllMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteAllMemberRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MuteAllMemberRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MuteAllMemberRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteAllMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MuteAllMemberRes";
  }
  protected:
  explicit MuteAllMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.MuteAllMemberRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class UnmuteAllMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.UnmuteAllMemberReq) */ {
 public:
  inline UnmuteAllMemberReq() : UnmuteAllMemberReq(nullptr) {}
  ~UnmuteAllMemberReq() override;
  explicit PROTOBUF_CONSTEXPR UnmuteAllMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteAllMemberReq(const UnmuteAllMemberReq& from);
  UnmuteAllMemberReq(UnmuteAllMemberReq&& from) noexcept
    : UnmuteAllMemberReq() {
    *this = ::std::move(from);
  }

  inline UnmuteAllMemberReq& operator=(const UnmuteAllMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteAllMemberReq& operator=(UnmuteAllMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnmuteAllMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteAllMemberReq* internal_default_instance() {
    return reinterpret_cast<const UnmuteAllMemberReq*>(
               &_UnmuteAllMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UnmuteAllMemberReq& a, UnmuteAllMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteAllMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteAllMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteAllMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteAllMemberReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnmuteAllMemberReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnmuteAllMemberReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmuteAllMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.UnmuteAllMemberReq";
  }
  protected:
  explicit UnmuteAllMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMuteTypeFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.MuteType mute_type = 3;
  void clear_mute_type();
  ::ccs_msg::MuteType mute_type() const;
  void set_mute_type(::ccs_msg::MuteType value);
  private:
  ::ccs_msg::MuteType _internal_mute_type() const;
  void _internal_set_mute_type(::ccs_msg::MuteType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.UnmuteAllMemberReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  int mute_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class UnmuteAllMemberRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.UnmuteAllMemberRes) */ {
 public:
  inline UnmuteAllMemberRes() : UnmuteAllMemberRes(nullptr) {}
  ~UnmuteAllMemberRes() override;
  explicit PROTOBUF_CONSTEXPR UnmuteAllMemberRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteAllMemberRes(const UnmuteAllMemberRes& from);
  UnmuteAllMemberRes(UnmuteAllMemberRes&& from) noexcept
    : UnmuteAllMemberRes() {
    *this = ::std::move(from);
  }

  inline UnmuteAllMemberRes& operator=(const UnmuteAllMemberRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteAllMemberRes& operator=(UnmuteAllMemberRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnmuteAllMemberRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteAllMemberRes* internal_default_instance() {
    return reinterpret_cast<const UnmuteAllMemberRes*>(
               &_UnmuteAllMemberRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(UnmuteAllMemberRes& a, UnmuteAllMemberRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteAllMemberRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteAllMemberRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteAllMemberRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteAllMemberRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnmuteAllMemberRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnmuteAllMemberRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmuteAllMemberRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.UnmuteAllMemberRes";
  }
  protected:
  explicit UnmuteAllMemberRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.UnmuteAllMemberRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AssignChairmanReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.AssignChairmanReq) */ {
 public:
  inline AssignChairmanReq() : AssignChairmanReq(nullptr) {}
  ~AssignChairmanReq() override;
  explicit PROTOBUF_CONSTEXPR AssignChairmanReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssignChairmanReq(const AssignChairmanReq& from);
  AssignChairmanReq(AssignChairmanReq&& from) noexcept
    : AssignChairmanReq() {
    *this = ::std::move(from);
  }

  inline AssignChairmanReq& operator=(const AssignChairmanReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignChairmanReq& operator=(AssignChairmanReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignChairmanReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignChairmanReq* internal_default_instance() {
    return reinterpret_cast<const AssignChairmanReq*>(
               &_AssignChairmanReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AssignChairmanReq& a, AssignChairmanReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignChairmanReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignChairmanReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignChairmanReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignChairmanReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssignChairmanReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssignChairmanReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignChairmanReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.AssignChairmanReq";
  }
  protected:
  explicit AssignChairmanReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMemberIdFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // int32 member_id = 3;
  void clear_member_id();
  int32_t member_id() const;
  void set_member_id(int32_t value);
  private:
  int32_t _internal_member_id() const;
  void _internal_set_member_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.AssignChairmanReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  int32_t member_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AssignChairmanRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.AssignChairmanRes) */ {
 public:
  inline AssignChairmanRes() : AssignChairmanRes(nullptr) {}
  ~AssignChairmanRes() override;
  explicit PROTOBUF_CONSTEXPR AssignChairmanRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssignChairmanRes(const AssignChairmanRes& from);
  AssignChairmanRes(AssignChairmanRes&& from) noexcept
    : AssignChairmanRes() {
    *this = ::std::move(from);
  }

  inline AssignChairmanRes& operator=(const AssignChairmanRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignChairmanRes& operator=(AssignChairmanRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignChairmanRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignChairmanRes* internal_default_instance() {
    return reinterpret_cast<const AssignChairmanRes*>(
               &_AssignChairmanRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AssignChairmanRes& a, AssignChairmanRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignChairmanRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignChairmanRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignChairmanRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignChairmanRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssignChairmanRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssignChairmanRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignChairmanRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.AssignChairmanRes";
  }
  protected:
  explicit AssignChairmanRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.AssignChairmanRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TakePhotoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.TakePhotoReq) */ {
 public:
  inline TakePhotoReq() : TakePhotoReq(nullptr) {}
  ~TakePhotoReq() override;
  explicit PROTOBUF_CONSTEXPR TakePhotoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakePhotoReq(const TakePhotoReq& from);
  TakePhotoReq(TakePhotoReq&& from) noexcept
    : TakePhotoReq() {
    *this = ::std::move(from);
  }

  inline TakePhotoReq& operator=(const TakePhotoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoReq& operator=(TakePhotoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakePhotoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakePhotoReq* internal_default_instance() {
    return reinterpret_cast<const TakePhotoReq*>(
               &_TakePhotoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TakePhotoReq& a, TakePhotoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakePhotoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakePhotoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakePhotoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakePhotoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TakePhotoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.TakePhotoReq";
  }
  protected:
  explicit TakePhotoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kMixerIdFieldNumber = 3,
    kWindowIdFieldNumber = 4,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint32 mixer_id = 3;
  void clear_mixer_id();
  uint32_t mixer_id() const;
  void set_mixer_id(uint32_t value);
  private:
  uint32_t _internal_mixer_id() const;
  void _internal_set_mixer_id(uint32_t value);
  public:

  // uint32 window_id = 4;
  void clear_window_id();
  uint32_t window_id() const;
  void set_window_id(uint32_t value);
  private:
  uint32_t _internal_window_id() const;
  void _internal_set_window_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.TakePhotoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::ccs_msg::MsgHeader* header_;
  uint32_t mixer_id_;
  uint32_t window_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TakePhotoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.TakePhotoRes) */ {
 public:
  inline TakePhotoRes() : TakePhotoRes(nullptr) {}
  ~TakePhotoRes() override;
  explicit PROTOBUF_CONSTEXPR TakePhotoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TakePhotoRes(const TakePhotoRes& from);
  TakePhotoRes(TakePhotoRes&& from) noexcept
    : TakePhotoRes() {
    *this = ::std::move(from);
  }

  inline TakePhotoRes& operator=(const TakePhotoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoRes& operator=(TakePhotoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakePhotoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakePhotoRes* internal_default_instance() {
    return reinterpret_cast<const TakePhotoRes*>(
               &_TakePhotoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TakePhotoRes& a, TakePhotoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakePhotoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakePhotoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakePhotoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TakePhotoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TakePhotoRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.TakePhotoRes";
  }
  protected:
  explicit TakePhotoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.TakePhotoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fconference_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoWindow

// int32 member_id = 1;
inline void VideoWindow::clear_member_id() {
  member_id_ = 0;
}
inline int32_t VideoWindow::_internal_member_id() const {
  return member_id_;
}
inline int32_t VideoWindow::member_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoWindow.member_id)
  return _internal_member_id();
}
inline void VideoWindow::_internal_set_member_id(int32_t value) {
  
  member_id_ = value;
}
inline void VideoWindow::set_member_id(int32_t value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoWindow.member_id)
}

// uint32 stream_id = 2;
inline void VideoWindow::clear_stream_id() {
  stream_id_ = 0u;
}
inline uint32_t VideoWindow::_internal_stream_id() const {
  return stream_id_;
}
inline uint32_t VideoWindow::stream_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoWindow.stream_id)
  return _internal_stream_id();
}
inline void VideoWindow::_internal_set_stream_id(uint32_t value) {
  
  stream_id_ = value;
}
inline void VideoWindow::set_stream_id(uint32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoWindow.stream_id)
}

// .ccs_msg.WinMode mode = 3;
inline void VideoWindow::clear_mode() {
  mode_ = 0;
}
inline ::ccs_msg::WinMode VideoWindow::_internal_mode() const {
  return static_cast< ::ccs_msg::WinMode >(mode_);
}
inline ::ccs_msg::WinMode VideoWindow::mode() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoWindow.mode)
  return _internal_mode();
}
inline void VideoWindow::_internal_set_mode(::ccs_msg::WinMode value) {
  
  mode_ = value;
}
inline void VideoWindow::set_mode(::ccs_msg::WinMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoWindow.mode)
}

// -------------------------------------------------------------------

// VideoLayout

// repeated .ccs_msg.VideoWindow win_list = 1;
inline int VideoLayout::_internal_win_list_size() const {
  return win_list_.size();
}
inline int VideoLayout::win_list_size() const {
  return _internal_win_list_size();
}
inline void VideoLayout::clear_win_list() {
  win_list_.Clear();
}
inline ::ccs_msg::VideoWindow* VideoLayout::mutable_win_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.VideoLayout.win_list)
  return win_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >*
VideoLayout::mutable_win_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.VideoLayout.win_list)
  return &win_list_;
}
inline const ::ccs_msg::VideoWindow& VideoLayout::_internal_win_list(int index) const {
  return win_list_.Get(index);
}
inline const ::ccs_msg::VideoWindow& VideoLayout::win_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoLayout.win_list)
  return _internal_win_list(index);
}
inline ::ccs_msg::VideoWindow* VideoLayout::_internal_add_win_list() {
  return win_list_.Add();
}
inline ::ccs_msg::VideoWindow* VideoLayout::add_win_list() {
  ::ccs_msg::VideoWindow* _add = _internal_add_win_list();
  // @@protoc_insertion_point(field_add:ccs_msg.VideoLayout.win_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >&
VideoLayout::win_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.VideoLayout.win_list)
  return win_list_;
}

// uint32 layout_id = 2;
inline void VideoLayout::clear_layout_id() {
  layout_id_ = 0u;
}
inline uint32_t VideoLayout::_internal_layout_id() const {
  return layout_id_;
}
inline uint32_t VideoLayout::layout_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoLayout.layout_id)
  return _internal_layout_id();
}
inline void VideoLayout::_internal_set_layout_id(uint32_t value) {
  
  layout_id_ = value;
}
inline void VideoLayout::set_layout_id(uint32_t value) {
  _internal_set_layout_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoLayout.layout_id)
}

// uint32 windows = 3;
inline void VideoLayout::clear_windows() {
  windows_ = 0u;
}
inline uint32_t VideoLayout::_internal_windows() const {
  return windows_;
}
inline uint32_t VideoLayout::windows() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoLayout.windows)
  return _internal_windows();
}
inline void VideoLayout::_internal_set_windows(uint32_t value) {
  
  windows_ = value;
}
inline void VideoLayout::set_windows(uint32_t value) {
  _internal_set_windows(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoLayout.windows)
}

// -------------------------------------------------------------------

// ITCOSDParams

// uint32 position = 1;
inline void ITCOSDParams::clear_position() {
  position_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_position() const {
  return position_;
}
inline uint32_t ITCOSDParams::position() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.position)
  return _internal_position();
}
inline void ITCOSDParams::_internal_set_position(uint32_t value) {
  
  position_ = value;
}
inline void ITCOSDParams::set_position(uint32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.position)
}

// uint32 global_alpha = 2;
inline void ITCOSDParams::clear_global_alpha() {
  global_alpha_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_global_alpha() const {
  return global_alpha_;
}
inline uint32_t ITCOSDParams::global_alpha() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.global_alpha)
  return _internal_global_alpha();
}
inline void ITCOSDParams::_internal_set_global_alpha(uint32_t value) {
  
  global_alpha_ = value;
}
inline void ITCOSDParams::set_global_alpha(uint32_t value) {
  _internal_set_global_alpha(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.global_alpha)
}

// uint32 font_size = 3;
inline void ITCOSDParams::clear_font_size() {
  font_size_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_font_size() const {
  return font_size_;
}
inline uint32_t ITCOSDParams::font_size() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.font_size)
  return _internal_font_size();
}
inline void ITCOSDParams::_internal_set_font_size(uint32_t value) {
  
  font_size_ = value;
}
inline void ITCOSDParams::set_font_size(uint32_t value) {
  _internal_set_font_size(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.font_size)
}

// uint32 font_color = 4;
inline void ITCOSDParams::clear_font_color() {
  font_color_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_font_color() const {
  return font_color_;
}
inline uint32_t ITCOSDParams::font_color() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.font_color)
  return _internal_font_color();
}
inline void ITCOSDParams::_internal_set_font_color(uint32_t value) {
  
  font_color_ = value;
}
inline void ITCOSDParams::set_font_color(uint32_t value) {
  _internal_set_font_color(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.font_color)
}

// uint32 bg_color = 5;
inline void ITCOSDParams::clear_bg_color() {
  bg_color_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_bg_color() const {
  return bg_color_;
}
inline uint32_t ITCOSDParams::bg_color() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.bg_color)
  return _internal_bg_color();
}
inline void ITCOSDParams::_internal_set_bg_color(uint32_t value) {
  
  bg_color_ = value;
}
inline void ITCOSDParams::set_bg_color(uint32_t value) {
  _internal_set_bg_color(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.bg_color)
}

// uint32 osd_enable = 6;
inline void ITCOSDParams::clear_osd_enable() {
  osd_enable_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_osd_enable() const {
  return osd_enable_;
}
inline uint32_t ITCOSDParams::osd_enable() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.osd_enable)
  return _internal_osd_enable();
}
inline void ITCOSDParams::_internal_set_osd_enable(uint32_t value) {
  
  osd_enable_ = value;
}
inline void ITCOSDParams::set_osd_enable(uint32_t value) {
  _internal_set_osd_enable(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.osd_enable)
}

// uint32 rolling_times = 7;
inline void ITCOSDParams::clear_rolling_times() {
  rolling_times_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_rolling_times() const {
  return rolling_times_;
}
inline uint32_t ITCOSDParams::rolling_times() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.rolling_times)
  return _internal_rolling_times();
}
inline void ITCOSDParams::_internal_set_rolling_times(uint32_t value) {
  
  rolling_times_ = value;
}
inline void ITCOSDParams::set_rolling_times(uint32_t value) {
  _internal_set_rolling_times(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.rolling_times)
}

// uint32 show_seconds = 8;
inline void ITCOSDParams::clear_show_seconds() {
  show_seconds_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_show_seconds() const {
  return show_seconds_;
}
inline uint32_t ITCOSDParams::show_seconds() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.show_seconds)
  return _internal_show_seconds();
}
inline void ITCOSDParams::_internal_set_show_seconds(uint32_t value) {
  
  show_seconds_ = value;
}
inline void ITCOSDParams::set_show_seconds(uint32_t value) {
  _internal_set_show_seconds(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.show_seconds)
}

// uint32 font_type = 9;
inline void ITCOSDParams::clear_font_type() {
  font_type_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_font_type() const {
  return font_type_;
}
inline uint32_t ITCOSDParams::font_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.font_type)
  return _internal_font_type();
}
inline void ITCOSDParams::_internal_set_font_type(uint32_t value) {
  
  font_type_ = value;
}
inline void ITCOSDParams::set_font_type(uint32_t value) {
  _internal_set_font_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.font_type)
}

// uint32 en_bold = 10;
inline void ITCOSDParams::clear_en_bold() {
  en_bold_ = 0u;
}
inline uint32_t ITCOSDParams::_internal_en_bold() const {
  return en_bold_;
}
inline uint32_t ITCOSDParams::en_bold() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.en_bold)
  return _internal_en_bold();
}
inline void ITCOSDParams::_internal_set_en_bold(uint32_t value) {
  
  en_bold_ = value;
}
inline void ITCOSDParams::set_en_bold(uint32_t value) {
  _internal_set_en_bold(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.en_bold)
}

// int32 pos_x = 11;
inline void ITCOSDParams::clear_pos_x() {
  pos_x_ = 0;
}
inline int32_t ITCOSDParams::_internal_pos_x() const {
  return pos_x_;
}
inline int32_t ITCOSDParams::pos_x() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.pos_x)
  return _internal_pos_x();
}
inline void ITCOSDParams::_internal_set_pos_x(int32_t value) {
  
  pos_x_ = value;
}
inline void ITCOSDParams::set_pos_x(int32_t value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.pos_x)
}

// int32 pos_y = 12;
inline void ITCOSDParams::clear_pos_y() {
  pos_y_ = 0;
}
inline int32_t ITCOSDParams::_internal_pos_y() const {
  return pos_y_;
}
inline int32_t ITCOSDParams::pos_y() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ITCOSDParams.pos_y)
  return _internal_pos_y();
}
inline void ITCOSDParams::_internal_set_pos_y(int32_t value) {
  
  pos_y_ = value;
}
inline void ITCOSDParams::set_pos_y(int32_t value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ITCOSDParams.pos_y)
}

// -------------------------------------------------------------------

// VideoCodec

// string codec = 1;
inline void VideoCodec::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& VideoCodec::codec() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoCodec.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoCodec::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.VideoCodec.codec)
}
inline std::string* VideoCodec::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:ccs_msg.VideoCodec.codec)
  return _s;
}
inline const std::string& VideoCodec::_internal_codec() const {
  return codec_.Get();
}
inline void VideoCodec::_internal_set_codec(const std::string& value) {
  
  codec_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoCodec::_internal_mutable_codec() {
  
  return codec_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoCodec::release_codec() {
  // @@protoc_insertion_point(field_release:ccs_msg.VideoCodec.codec)
  return codec_.Release();
}
inline void VideoCodec::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(codec, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault()) {
    codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.VideoCodec.codec)
}

// uint32 bitrate = 2;
inline void VideoCodec::clear_bitrate() {
  bitrate_ = 0u;
}
inline uint32_t VideoCodec::_internal_bitrate() const {
  return bitrate_;
}
inline uint32_t VideoCodec::bitrate() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoCodec.bitrate)
  return _internal_bitrate();
}
inline void VideoCodec::_internal_set_bitrate(uint32_t value) {
  
  bitrate_ = value;
}
inline void VideoCodec::set_bitrate(uint32_t value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoCodec.bitrate)
}

// .ccs_msg.BitrateControlAlgorithm bitrate_control = 3;
inline void VideoCodec::clear_bitrate_control() {
  bitrate_control_ = 0;
}
inline ::ccs_msg::BitrateControlAlgorithm VideoCodec::_internal_bitrate_control() const {
  return static_cast< ::ccs_msg::BitrateControlAlgorithm >(bitrate_control_);
}
inline ::ccs_msg::BitrateControlAlgorithm VideoCodec::bitrate_control() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoCodec.bitrate_control)
  return _internal_bitrate_control();
}
inline void VideoCodec::_internal_set_bitrate_control(::ccs_msg::BitrateControlAlgorithm value) {
  
  bitrate_control_ = value;
}
inline void VideoCodec::set_bitrate_control(::ccs_msg::BitrateControlAlgorithm value) {
  _internal_set_bitrate_control(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoCodec.bitrate_control)
}

// uint32 key_frame_interval = 4;
inline void VideoCodec::clear_key_frame_interval() {
  key_frame_interval_ = 0u;
}
inline uint32_t VideoCodec::_internal_key_frame_interval() const {
  return key_frame_interval_;
}
inline uint32_t VideoCodec::key_frame_interval() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoCodec.key_frame_interval)
  return _internal_key_frame_interval();
}
inline void VideoCodec::_internal_set_key_frame_interval(uint32_t value) {
  
  key_frame_interval_ = value;
}
inline void VideoCodec::set_key_frame_interval(uint32_t value) {
  _internal_set_key_frame_interval(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoCodec.key_frame_interval)
}

// bool enable_multi_slice_mode = 5;
inline void VideoCodec::clear_enable_multi_slice_mode() {
  enable_multi_slice_mode_ = false;
}
inline bool VideoCodec::_internal_enable_multi_slice_mode() const {
  return enable_multi_slice_mode_;
}
inline bool VideoCodec::enable_multi_slice_mode() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoCodec.enable_multi_slice_mode)
  return _internal_enable_multi_slice_mode();
}
inline void VideoCodec::_internal_set_enable_multi_slice_mode(bool value) {
  
  enable_multi_slice_mode_ = value;
}
inline void VideoCodec::set_enable_multi_slice_mode(bool value) {
  _internal_set_enable_multi_slice_mode(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoCodec.enable_multi_slice_mode)
}

// uint32 channel_id = 6;
inline void VideoCodec::clear_channel_id() {
  channel_id_ = 0u;
}
inline uint32_t VideoCodec::_internal_channel_id() const {
  return channel_id_;
}
inline uint32_t VideoCodec::channel_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoCodec.channel_id)
  return _internal_channel_id();
}
inline void VideoCodec::_internal_set_channel_id(uint32_t value) {
  
  channel_id_ = value;
}
inline void VideoCodec::set_channel_id(uint32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoCodec.channel_id)
}

// -------------------------------------------------------------------

// MixerParams

// .ccs_msg.ITCVideoLayoutType layout_type = 1;
inline void MixerParams::clear_layout_type() {
  layout_type_ = 0;
}
inline ::ccs_msg::ITCVideoLayoutType MixerParams::_internal_layout_type() const {
  return static_cast< ::ccs_msg::ITCVideoLayoutType >(layout_type_);
}
inline ::ccs_msg::ITCVideoLayoutType MixerParams::layout_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.layout_type)
  return _internal_layout_type();
}
inline void MixerParams::_internal_set_layout_type(::ccs_msg::ITCVideoLayoutType value) {
  
  layout_type_ = value;
}
inline void MixerParams::set_layout_type(::ccs_msg::ITCVideoLayoutType value) {
  _internal_set_layout_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MixerParams.layout_type)
}

// repeated .ccs_msg.VideoCodec video_codecs_list = 2;
inline int MixerParams::_internal_video_codecs_list_size() const {
  return video_codecs_list_.size();
}
inline int MixerParams::video_codecs_list_size() const {
  return _internal_video_codecs_list_size();
}
inline void MixerParams::clear_video_codecs_list() {
  video_codecs_list_.Clear();
}
inline ::ccs_msg::VideoCodec* MixerParams::mutable_video_codecs_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.video_codecs_list)
  return video_codecs_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoCodec >*
MixerParams::mutable_video_codecs_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.MixerParams.video_codecs_list)
  return &video_codecs_list_;
}
inline const ::ccs_msg::VideoCodec& MixerParams::_internal_video_codecs_list(int index) const {
  return video_codecs_list_.Get(index);
}
inline const ::ccs_msg::VideoCodec& MixerParams::video_codecs_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.video_codecs_list)
  return _internal_video_codecs_list(index);
}
inline ::ccs_msg::VideoCodec* MixerParams::_internal_add_video_codecs_list() {
  return video_codecs_list_.Add();
}
inline ::ccs_msg::VideoCodec* MixerParams::add_video_codecs_list() {
  ::ccs_msg::VideoCodec* _add = _internal_add_video_codecs_list();
  // @@protoc_insertion_point(field_add:ccs_msg.MixerParams.video_codecs_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoCodec >&
MixerParams::video_codecs_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.MixerParams.video_codecs_list)
  return video_codecs_list_;
}

// .ccs_msg.ITCOSDParams osd_name = 3;
inline bool MixerParams::_internal_has_osd_name() const {
  return this != internal_default_instance() && osd_name_ != nullptr;
}
inline bool MixerParams::has_osd_name() const {
  return _internal_has_osd_name();
}
inline void MixerParams::clear_osd_name() {
  if (GetArenaForAllocation() == nullptr && osd_name_ != nullptr) {
    delete osd_name_;
  }
  osd_name_ = nullptr;
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::_internal_osd_name() const {
  const ::ccs_msg::ITCOSDParams* p = osd_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ITCOSDParams&>(
      ::ccs_msg::_ITCOSDParams_default_instance_);
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::osd_name() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.osd_name)
  return _internal_osd_name();
}
inline void MixerParams::unsafe_arena_set_allocated_osd_name(
    ::ccs_msg::ITCOSDParams* osd_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osd_name_);
  }
  osd_name_ = osd_name;
  if (osd_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MixerParams.osd_name)
}
inline ::ccs_msg::ITCOSDParams* MixerParams::release_osd_name() {
  
  ::ccs_msg::ITCOSDParams* temp = osd_name_;
  osd_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::unsafe_arena_release_osd_name() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.osd_name)
  
  ::ccs_msg::ITCOSDParams* temp = osd_name_;
  osd_name_ = nullptr;
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::_internal_mutable_osd_name() {
  
  if (osd_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ITCOSDParams>(GetArenaForAllocation());
    osd_name_ = p;
  }
  return osd_name_;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::mutable_osd_name() {
  ::ccs_msg::ITCOSDParams* _msg = _internal_mutable_osd_name();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.osd_name)
  return _msg;
}
inline void MixerParams::set_allocated_osd_name(::ccs_msg::ITCOSDParams* osd_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osd_name_;
  }
  if (osd_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osd_name);
    if (message_arena != submessage_arena) {
      osd_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_name, submessage_arena);
    }
    
  } else {
    
  }
  osd_name_ = osd_name;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.osd_name)
}

// .ccs_msg.ITCOSDParams osd_banner = 4;
inline bool MixerParams::_internal_has_osd_banner() const {
  return this != internal_default_instance() && osd_banner_ != nullptr;
}
inline bool MixerParams::has_osd_banner() const {
  return _internal_has_osd_banner();
}
inline void MixerParams::clear_osd_banner() {
  if (GetArenaForAllocation() == nullptr && osd_banner_ != nullptr) {
    delete osd_banner_;
  }
  osd_banner_ = nullptr;
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::_internal_osd_banner() const {
  const ::ccs_msg::ITCOSDParams* p = osd_banner_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ITCOSDParams&>(
      ::ccs_msg::_ITCOSDParams_default_instance_);
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::osd_banner() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.osd_banner)
  return _internal_osd_banner();
}
inline void MixerParams::unsafe_arena_set_allocated_osd_banner(
    ::ccs_msg::ITCOSDParams* osd_banner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osd_banner_);
  }
  osd_banner_ = osd_banner;
  if (osd_banner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MixerParams.osd_banner)
}
inline ::ccs_msg::ITCOSDParams* MixerParams::release_osd_banner() {
  
  ::ccs_msg::ITCOSDParams* temp = osd_banner_;
  osd_banner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::unsafe_arena_release_osd_banner() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.osd_banner)
  
  ::ccs_msg::ITCOSDParams* temp = osd_banner_;
  osd_banner_ = nullptr;
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::_internal_mutable_osd_banner() {
  
  if (osd_banner_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ITCOSDParams>(GetArenaForAllocation());
    osd_banner_ = p;
  }
  return osd_banner_;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::mutable_osd_banner() {
  ::ccs_msg::ITCOSDParams* _msg = _internal_mutable_osd_banner();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.osd_banner)
  return _msg;
}
inline void MixerParams::set_allocated_osd_banner(::ccs_msg::ITCOSDParams* osd_banner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osd_banner_;
  }
  if (osd_banner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osd_banner);
    if (message_arena != submessage_arena) {
      osd_banner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_banner, submessage_arena);
    }
    
  } else {
    
  }
  osd_banner_ = osd_banner;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.osd_banner)
}

// .ccs_msg.ITCOSDParams osd_rolling_msg = 5;
inline bool MixerParams::_internal_has_osd_rolling_msg() const {
  return this != internal_default_instance() && osd_rolling_msg_ != nullptr;
}
inline bool MixerParams::has_osd_rolling_msg() const {
  return _internal_has_osd_rolling_msg();
}
inline void MixerParams::clear_osd_rolling_msg() {
  if (GetArenaForAllocation() == nullptr && osd_rolling_msg_ != nullptr) {
    delete osd_rolling_msg_;
  }
  osd_rolling_msg_ = nullptr;
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::_internal_osd_rolling_msg() const {
  const ::ccs_msg::ITCOSDParams* p = osd_rolling_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ITCOSDParams&>(
      ::ccs_msg::_ITCOSDParams_default_instance_);
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::osd_rolling_msg() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.osd_rolling_msg)
  return _internal_osd_rolling_msg();
}
inline void MixerParams::unsafe_arena_set_allocated_osd_rolling_msg(
    ::ccs_msg::ITCOSDParams* osd_rolling_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osd_rolling_msg_);
  }
  osd_rolling_msg_ = osd_rolling_msg;
  if (osd_rolling_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MixerParams.osd_rolling_msg)
}
inline ::ccs_msg::ITCOSDParams* MixerParams::release_osd_rolling_msg() {
  
  ::ccs_msg::ITCOSDParams* temp = osd_rolling_msg_;
  osd_rolling_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::unsafe_arena_release_osd_rolling_msg() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.osd_rolling_msg)
  
  ::ccs_msg::ITCOSDParams* temp = osd_rolling_msg_;
  osd_rolling_msg_ = nullptr;
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::_internal_mutable_osd_rolling_msg() {
  
  if (osd_rolling_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ITCOSDParams>(GetArenaForAllocation());
    osd_rolling_msg_ = p;
  }
  return osd_rolling_msg_;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::mutable_osd_rolling_msg() {
  ::ccs_msg::ITCOSDParams* _msg = _internal_mutable_osd_rolling_msg();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.osd_rolling_msg)
  return _msg;
}
inline void MixerParams::set_allocated_osd_rolling_msg(::ccs_msg::ITCOSDParams* osd_rolling_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osd_rolling_msg_;
  }
  if (osd_rolling_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osd_rolling_msg);
    if (message_arena != submessage_arena) {
      osd_rolling_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_rolling_msg, submessage_arena);
    }
    
  } else {
    
  }
  osd_rolling_msg_ = osd_rolling_msg;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.osd_rolling_msg)
}

// .ccs_msg.ITCOSDParams osd_logo = 6;
inline bool MixerParams::_internal_has_osd_logo() const {
  return this != internal_default_instance() && osd_logo_ != nullptr;
}
inline bool MixerParams::has_osd_logo() const {
  return _internal_has_osd_logo();
}
inline void MixerParams::clear_osd_logo() {
  if (GetArenaForAllocation() == nullptr && osd_logo_ != nullptr) {
    delete osd_logo_;
  }
  osd_logo_ = nullptr;
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::_internal_osd_logo() const {
  const ::ccs_msg::ITCOSDParams* p = osd_logo_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ITCOSDParams&>(
      ::ccs_msg::_ITCOSDParams_default_instance_);
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::osd_logo() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.osd_logo)
  return _internal_osd_logo();
}
inline void MixerParams::unsafe_arena_set_allocated_osd_logo(
    ::ccs_msg::ITCOSDParams* osd_logo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osd_logo_);
  }
  osd_logo_ = osd_logo;
  if (osd_logo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MixerParams.osd_logo)
}
inline ::ccs_msg::ITCOSDParams* MixerParams::release_osd_logo() {
  
  ::ccs_msg::ITCOSDParams* temp = osd_logo_;
  osd_logo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::unsafe_arena_release_osd_logo() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.osd_logo)
  
  ::ccs_msg::ITCOSDParams* temp = osd_logo_;
  osd_logo_ = nullptr;
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::_internal_mutable_osd_logo() {
  
  if (osd_logo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ITCOSDParams>(GetArenaForAllocation());
    osd_logo_ = p;
  }
  return osd_logo_;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::mutable_osd_logo() {
  ::ccs_msg::ITCOSDParams* _msg = _internal_mutable_osd_logo();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.osd_logo)
  return _msg;
}
inline void MixerParams::set_allocated_osd_logo(::ccs_msg::ITCOSDParams* osd_logo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osd_logo_;
  }
  if (osd_logo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osd_logo);
    if (message_arena != submessage_arena) {
      osd_logo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_logo, submessage_arena);
    }
    
  } else {
    
  }
  osd_logo_ = osd_logo;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.osd_logo)
}

// .ccs_msg.ITCOSDParams osd_subtitles = 7;
inline bool MixerParams::_internal_has_osd_subtitles() const {
  return this != internal_default_instance() && osd_subtitles_ != nullptr;
}
inline bool MixerParams::has_osd_subtitles() const {
  return _internal_has_osd_subtitles();
}
inline void MixerParams::clear_osd_subtitles() {
  if (GetArenaForAllocation() == nullptr && osd_subtitles_ != nullptr) {
    delete osd_subtitles_;
  }
  osd_subtitles_ = nullptr;
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::_internal_osd_subtitles() const {
  const ::ccs_msg::ITCOSDParams* p = osd_subtitles_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ITCOSDParams&>(
      ::ccs_msg::_ITCOSDParams_default_instance_);
}
inline const ::ccs_msg::ITCOSDParams& MixerParams::osd_subtitles() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.osd_subtitles)
  return _internal_osd_subtitles();
}
inline void MixerParams::unsafe_arena_set_allocated_osd_subtitles(
    ::ccs_msg::ITCOSDParams* osd_subtitles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osd_subtitles_);
  }
  osd_subtitles_ = osd_subtitles;
  if (osd_subtitles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MixerParams.osd_subtitles)
}
inline ::ccs_msg::ITCOSDParams* MixerParams::release_osd_subtitles() {
  
  ::ccs_msg::ITCOSDParams* temp = osd_subtitles_;
  osd_subtitles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::unsafe_arena_release_osd_subtitles() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.osd_subtitles)
  
  ::ccs_msg::ITCOSDParams* temp = osd_subtitles_;
  osd_subtitles_ = nullptr;
  return temp;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::_internal_mutable_osd_subtitles() {
  
  if (osd_subtitles_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ITCOSDParams>(GetArenaForAllocation());
    osd_subtitles_ = p;
  }
  return osd_subtitles_;
}
inline ::ccs_msg::ITCOSDParams* MixerParams::mutable_osd_subtitles() {
  ::ccs_msg::ITCOSDParams* _msg = _internal_mutable_osd_subtitles();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.osd_subtitles)
  return _msg;
}
inline void MixerParams::set_allocated_osd_subtitles(::ccs_msg::ITCOSDParams* osd_subtitles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete osd_subtitles_;
  }
  if (osd_subtitles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osd_subtitles);
    if (message_arena != submessage_arena) {
      osd_subtitles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_subtitles, submessage_arena);
    }
    
  } else {
    
  }
  osd_subtitles_ = osd_subtitles;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.osd_subtitles)
}

// string banner_text = 8;
inline void MixerParams::clear_banner_text() {
  banner_text_.ClearToEmpty();
}
inline const std::string& MixerParams::banner_text() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.banner_text)
  return _internal_banner_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MixerParams::set_banner_text(ArgT0&& arg0, ArgT... args) {
 
 banner_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MixerParams.banner_text)
}
inline std::string* MixerParams::mutable_banner_text() {
  std::string* _s = _internal_mutable_banner_text();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.banner_text)
  return _s;
}
inline const std::string& MixerParams::_internal_banner_text() const {
  return banner_text_.Get();
}
inline void MixerParams::_internal_set_banner_text(const std::string& value) {
  
  banner_text_.Set(value, GetArenaForAllocation());
}
inline std::string* MixerParams::_internal_mutable_banner_text() {
  
  return banner_text_.Mutable(GetArenaForAllocation());
}
inline std::string* MixerParams::release_banner_text() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.banner_text)
  return banner_text_.Release();
}
inline void MixerParams::set_allocated_banner_text(std::string* banner_text) {
  if (banner_text != nullptr) {
    
  } else {
    
  }
  banner_text_.SetAllocated(banner_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (banner_text_.IsDefault()) {
    banner_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.banner_text)
}

// string rolling_text = 9;
inline void MixerParams::clear_rolling_text() {
  rolling_text_.ClearToEmpty();
}
inline const std::string& MixerParams::rolling_text() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.rolling_text)
  return _internal_rolling_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MixerParams::set_rolling_text(ArgT0&& arg0, ArgT... args) {
 
 rolling_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MixerParams.rolling_text)
}
inline std::string* MixerParams::mutable_rolling_text() {
  std::string* _s = _internal_mutable_rolling_text();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.rolling_text)
  return _s;
}
inline const std::string& MixerParams::_internal_rolling_text() const {
  return rolling_text_.Get();
}
inline void MixerParams::_internal_set_rolling_text(const std::string& value) {
  
  rolling_text_.Set(value, GetArenaForAllocation());
}
inline std::string* MixerParams::_internal_mutable_rolling_text() {
  
  return rolling_text_.Mutable(GetArenaForAllocation());
}
inline std::string* MixerParams::release_rolling_text() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.rolling_text)
  return rolling_text_.Release();
}
inline void MixerParams::set_allocated_rolling_text(std::string* rolling_text) {
  if (rolling_text != nullptr) {
    
  } else {
    
  }
  rolling_text_.SetAllocated(rolling_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rolling_text_.IsDefault()) {
    rolling_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.rolling_text)
}

// string ip = 10;
inline void MixerParams::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& MixerParams::ip() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MixerParams::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MixerParams.ip)
}
inline std::string* MixerParams::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MixerParams.ip)
  return _s;
}
inline const std::string& MixerParams::_internal_ip() const {
  return ip_.Get();
}
inline void MixerParams::_internal_set_ip(const std::string& value) {
  
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* MixerParams::_internal_mutable_ip() {
  
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* MixerParams::release_ip() {
  // @@protoc_insertion_point(field_release:ccs_msg.MixerParams.ip)
  return ip_.Release();
}
inline void MixerParams::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MixerParams.ip)
}

// uint32 channels_count = 11;
inline void MixerParams::clear_channels_count() {
  channels_count_ = 0u;
}
inline uint32_t MixerParams::_internal_channels_count() const {
  return channels_count_;
}
inline uint32_t MixerParams::channels_count() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MixerParams.channels_count)
  return _internal_channels_count();
}
inline void MixerParams::_internal_set_channels_count(uint32_t value) {
  
  channels_count_ = value;
}
inline void MixerParams::set_channels_count(uint32_t value) {
  _internal_set_channels_count(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MixerParams.channels_count)
}

// -------------------------------------------------------------------

// VideoParams

// string codec = 1;
inline void VideoParams::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& VideoParams::codec() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoParams.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoParams::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.VideoParams.codec)
}
inline std::string* VideoParams::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:ccs_msg.VideoParams.codec)
  return _s;
}
inline const std::string& VideoParams::_internal_codec() const {
  return codec_.Get();
}
inline void VideoParams::_internal_set_codec(const std::string& value) {
  
  codec_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoParams::_internal_mutable_codec() {
  
  return codec_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoParams::release_codec() {
  // @@protoc_insertion_point(field_release:ccs_msg.VideoParams.codec)
  return codec_.Release();
}
inline void VideoParams::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(codec, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault()) {
    codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.VideoParams.codec)
}

// uint32 default_band_width = 2;
inline void VideoParams::clear_default_band_width() {
  default_band_width_ = 0u;
}
inline uint32_t VideoParams::_internal_default_band_width() const {
  return default_band_width_;
}
inline uint32_t VideoParams::default_band_width() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoParams.default_band_width)
  return _internal_default_band_width();
}
inline void VideoParams::_internal_set_default_band_width(uint32_t value) {
  
  default_band_width_ = value;
}
inline void VideoParams::set_default_band_width(uint32_t value) {
  _internal_set_default_band_width(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoParams.default_band_width)
}

// uint32 max_bandwidth = 3;
inline void VideoParams::clear_max_bandwidth() {
  max_bandwidth_ = 0u;
}
inline uint32_t VideoParams::_internal_max_bandwidth() const {
  return max_bandwidth_;
}
inline uint32_t VideoParams::max_bandwidth() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoParams.max_bandwidth)
  return _internal_max_bandwidth();
}
inline void VideoParams::_internal_set_max_bandwidth(uint32_t value) {
  
  max_bandwidth_ = value;
}
inline void VideoParams::set_max_bandwidth(uint32_t value) {
  _internal_set_max_bandwidth(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoParams.max_bandwidth)
}

// repeated .ccs_msg.MixerParams mixer_params_list = 4;
inline int VideoParams::_internal_mixer_params_list_size() const {
  return mixer_params_list_.size();
}
inline int VideoParams::mixer_params_list_size() const {
  return _internal_mixer_params_list_size();
}
inline void VideoParams::clear_mixer_params_list() {
  mixer_params_list_.Clear();
}
inline ::ccs_msg::MixerParams* VideoParams::mutable_mixer_params_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.VideoParams.mixer_params_list)
  return mixer_params_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MixerParams >*
VideoParams::mutable_mixer_params_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.VideoParams.mixer_params_list)
  return &mixer_params_list_;
}
inline const ::ccs_msg::MixerParams& VideoParams::_internal_mixer_params_list(int index) const {
  return mixer_params_list_.Get(index);
}
inline const ::ccs_msg::MixerParams& VideoParams::mixer_params_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoParams.mixer_params_list)
  return _internal_mixer_params_list(index);
}
inline ::ccs_msg::MixerParams* VideoParams::_internal_add_mixer_params_list() {
  return mixer_params_list_.Add();
}
inline ::ccs_msg::MixerParams* VideoParams::add_mixer_params_list() {
  ::ccs_msg::MixerParams* _add = _internal_add_mixer_params_list();
  // @@protoc_insertion_point(field_add:ccs_msg.VideoParams.mixer_params_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MixerParams >&
VideoParams::mixer_params_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.VideoParams.mixer_params_list)
  return mixer_params_list_;
}

// uint32 video_mixer_count = 5;
inline void VideoParams::clear_video_mixer_count() {
  video_mixer_count_ = 0u;
}
inline uint32_t VideoParams::_internal_video_mixer_count() const {
  return video_mixer_count_;
}
inline uint32_t VideoParams::video_mixer_count() const {
  // @@protoc_insertion_point(field_get:ccs_msg.VideoParams.video_mixer_count)
  return _internal_video_mixer_count();
}
inline void VideoParams::_internal_set_video_mixer_count(uint32_t value) {
  
  video_mixer_count_ = value;
}
inline void VideoParams::set_video_mixer_count(uint32_t value) {
  _internal_set_video_mixer_count(value);
  // @@protoc_insertion_point(field_set:ccs_msg.VideoParams.video_mixer_count)
}

// -------------------------------------------------------------------

// ConfInfo

// string meeting_id = 1;
inline void ConfInfo::clear_meeting_id() {
  meeting_id_.ClearToEmpty();
}
inline const std::string& ConfInfo::meeting_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.meeting_id)
  return _internal_meeting_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_meeting_id(ArgT0&& arg0, ArgT... args) {
 
 meeting_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.meeting_id)
}
inline std::string* ConfInfo::mutable_meeting_id() {
  std::string* _s = _internal_mutable_meeting_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.meeting_id)
  return _s;
}
inline const std::string& ConfInfo::_internal_meeting_id() const {
  return meeting_id_.Get();
}
inline void ConfInfo::_internal_set_meeting_id(const std::string& value) {
  
  meeting_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_meeting_id() {
  
  return meeting_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_meeting_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.meeting_id)
  return meeting_id_.Release();
}
inline void ConfInfo::set_allocated_meeting_id(std::string* meeting_id) {
  if (meeting_id != nullptr) {
    
  } else {
    
  }
  meeting_id_.SetAllocated(meeting_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (meeting_id_.IsDefault()) {
    meeting_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.meeting_id)
}

// string room_id = 2;
inline void ConfInfo::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ConfInfo::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.room_id)
}
inline std::string* ConfInfo::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.room_id)
  return _s;
}
inline const std::string& ConfInfo::_internal_room_id() const {
  return room_id_.Get();
}
inline void ConfInfo::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.room_id)
  return room_id_.Release();
}
inline void ConfInfo::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.room_id)
}

// string room_name = 3;
inline void ConfInfo::clear_room_name() {
  room_name_.ClearToEmpty();
}
inline const std::string& ConfInfo::room_name() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.room_name)
}
inline std::string* ConfInfo::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.room_name)
  return _s;
}
inline const std::string& ConfInfo::_internal_room_name() const {
  return room_name_.Get();
}
inline void ConfInfo::_internal_set_room_name(const std::string& value) {
  
  room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_room_name() {
  
  return room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_room_name() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.room_name)
  return room_name_.Release();
}
inline void ConfInfo::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_name_.IsDefault()) {
    room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.room_name)
}

// string creator = 4;
inline void ConfInfo::clear_creator() {
  creator_.ClearToEmpty();
}
inline const std::string& ConfInfo::creator() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_creator(ArgT0&& arg0, ArgT... args) {
 
 creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.creator)
}
inline std::string* ConfInfo::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.creator)
  return _s;
}
inline const std::string& ConfInfo::_internal_creator() const {
  return creator_.Get();
}
inline void ConfInfo::_internal_set_creator(const std::string& value) {
  
  creator_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_creator() {
  
  return creator_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_creator() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.creator)
  return creator_.Release();
}
inline void ConfInfo::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_.IsDefault()) {
    creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.creator)
}

// uint32 time_interval = 5;
inline void ConfInfo::clear_time_interval() {
  time_interval_ = 0u;
}
inline uint32_t ConfInfo::_internal_time_interval() const {
  return time_interval_;
}
inline uint32_t ConfInfo::time_interval() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.time_interval)
  return _internal_time_interval();
}
inline void ConfInfo::_internal_set_time_interval(uint32_t value) {
  
  time_interval_ = value;
}
inline void ConfInfo::set_time_interval(uint32_t value) {
  _internal_set_time_interval(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.time_interval)
}

// uint32 active_members = 6;
inline void ConfInfo::clear_active_members() {
  active_members_ = 0u;
}
inline uint32_t ConfInfo::_internal_active_members() const {
  return active_members_;
}
inline uint32_t ConfInfo::active_members() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.active_members)
  return _internal_active_members();
}
inline void ConfInfo::_internal_set_active_members(uint32_t value) {
  
  active_members_ = value;
}
inline void ConfInfo::set_active_members(uint32_t value) {
  _internal_set_active_members(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.active_members)
}

// uint32 max_member_count = 7;
inline void ConfInfo::clear_max_member_count() {
  max_member_count_ = 0u;
}
inline uint32_t ConfInfo::_internal_max_member_count() const {
  return max_member_count_;
}
inline uint32_t ConfInfo::max_member_count() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.max_member_count)
  return _internal_max_member_count();
}
inline void ConfInfo::_internal_set_max_member_count(uint32_t value) {
  
  max_member_count_ = value;
}
inline void ConfInfo::set_max_member_count(uint32_t value) {
  _internal_set_max_member_count(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.max_member_count)
}

// .ccs_msg.ConfControlMode conference_mode = 8;
inline void ConfInfo::clear_conference_mode() {
  conference_mode_ = 0;
}
inline ::ccs_msg::ConfControlMode ConfInfo::_internal_conference_mode() const {
  return static_cast< ::ccs_msg::ConfControlMode >(conference_mode_);
}
inline ::ccs_msg::ConfControlMode ConfInfo::conference_mode() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.conference_mode)
  return _internal_conference_mode();
}
inline void ConfInfo::_internal_set_conference_mode(::ccs_msg::ConfControlMode value) {
  
  conference_mode_ = value;
}
inline void ConfInfo::set_conference_mode(::ccs_msg::ConfControlMode value) {
  _internal_set_conference_mode(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.conference_mode)
}

// bool is_recording = 9;
inline void ConfInfo::clear_is_recording() {
  is_recording_ = false;
}
inline bool ConfInfo::_internal_is_recording() const {
  return is_recording_;
}
inline bool ConfInfo::is_recording() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.is_recording)
  return _internal_is_recording();
}
inline void ConfInfo::_internal_set_is_recording(bool value) {
  
  is_recording_ = value;
}
inline void ConfInfo::set_is_recording(bool value) {
  _internal_set_is_recording(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.is_recording)
}

// string start_time = 10;
inline void ConfInfo::clear_start_time() {
  start_time_.ClearToEmpty();
}
inline const std::string& ConfInfo::start_time() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.start_time)
  return _internal_start_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_start_time(ArgT0&& arg0, ArgT... args) {
 
 start_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.start_time)
}
inline std::string* ConfInfo::mutable_start_time() {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.start_time)
  return _s;
}
inline const std::string& ConfInfo::_internal_start_time() const {
  return start_time_.Get();
}
inline void ConfInfo::_internal_set_start_time(const std::string& value) {
  
  start_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_start_time() {
  
  return start_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_start_time() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.start_time)
  return start_time_.Release();
}
inline void ConfInfo::set_allocated_start_time(std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocated(start_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_time_.IsDefault()) {
    start_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.start_time)
}

// string end_time = 11;
inline void ConfInfo::clear_end_time() {
  end_time_.ClearToEmpty();
}
inline const std::string& ConfInfo::end_time() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.end_time)
  return _internal_end_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_end_time(ArgT0&& arg0, ArgT... args) {
 
 end_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.end_time)
}
inline std::string* ConfInfo::mutable_end_time() {
  std::string* _s = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.end_time)
  return _s;
}
inline const std::string& ConfInfo::_internal_end_time() const {
  return end_time_.Get();
}
inline void ConfInfo::_internal_set_end_time(const std::string& value) {
  
  end_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_end_time() {
  
  return end_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.end_time)
  return end_time_.Release();
}
inline void ConfInfo::set_allocated_end_time(std::string* end_time) {
  if (end_time != nullptr) {
    
  } else {
    
  }
  end_time_.SetAllocated(end_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (end_time_.IsDefault()) {
    end_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.end_time)
}

// bool is_living = 12;
inline void ConfInfo::clear_is_living() {
  is_living_ = false;
}
inline bool ConfInfo::_internal_is_living() const {
  return is_living_;
}
inline bool ConfInfo::is_living() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.is_living)
  return _internal_is_living();
}
inline void ConfInfo::_internal_set_is_living(bool value) {
  
  is_living_ = value;
}
inline void ConfInfo::set_is_living(bool value) {
  _internal_set_is_living(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.is_living)
}

// .ccs_msg.ProtoType proto_type = 13;
inline void ConfInfo::clear_proto_type() {
  proto_type_ = 0;
}
inline ::ccs_msg::ProtoType ConfInfo::_internal_proto_type() const {
  return static_cast< ::ccs_msg::ProtoType >(proto_type_);
}
inline ::ccs_msg::ProtoType ConfInfo::proto_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.proto_type)
  return _internal_proto_type();
}
inline void ConfInfo::_internal_set_proto_type(::ccs_msg::ProtoType value) {
  
  proto_type_ = value;
}
inline void ConfInfo::set_proto_type(::ccs_msg::ProtoType value) {
  _internal_set_proto_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.proto_type)
}

// string conf_pw = 14;
inline void ConfInfo::clear_conf_pw() {
  conf_pw_.ClearToEmpty();
}
inline const std::string& ConfInfo::conf_pw() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.conf_pw)
  return _internal_conf_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_conf_pw(ArgT0&& arg0, ArgT... args) {
 
 conf_pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.conf_pw)
}
inline std::string* ConfInfo::mutable_conf_pw() {
  std::string* _s = _internal_mutable_conf_pw();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.conf_pw)
  return _s;
}
inline const std::string& ConfInfo::_internal_conf_pw() const {
  return conf_pw_.Get();
}
inline void ConfInfo::_internal_set_conf_pw(const std::string& value) {
  
  conf_pw_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_conf_pw() {
  
  return conf_pw_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_conf_pw() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.conf_pw)
  return conf_pw_.Release();
}
inline void ConfInfo::set_allocated_conf_pw(std::string* conf_pw) {
  if (conf_pw != nullptr) {
    
  } else {
    
  }
  conf_pw_.SetAllocated(conf_pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (conf_pw_.IsDefault()) {
    conf_pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.conf_pw)
}

// bool is_virtual = 15;
inline void ConfInfo::clear_is_virtual() {
  is_virtual_ = false;
}
inline bool ConfInfo::_internal_is_virtual() const {
  return is_virtual_;
}
inline bool ConfInfo::is_virtual() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.is_virtual)
  return _internal_is_virtual();
}
inline void ConfInfo::_internal_set_is_virtual(bool value) {
  
  is_virtual_ = value;
}
inline void ConfInfo::set_is_virtual(bool value) {
  _internal_set_is_virtual(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.is_virtual)
}

// .ccs_msg.InviteMode invite_mode = 16;
inline void ConfInfo::clear_invite_mode() {
  invite_mode_ = 0;
}
inline ::ccs_msg::InviteMode ConfInfo::_internal_invite_mode() const {
  return static_cast< ::ccs_msg::InviteMode >(invite_mode_);
}
inline ::ccs_msg::InviteMode ConfInfo::invite_mode() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.invite_mode)
  return _internal_invite_mode();
}
inline void ConfInfo::_internal_set_invite_mode(::ccs_msg::InviteMode value) {
  
  invite_mode_ = value;
}
inline void ConfInfo::set_invite_mode(::ccs_msg::InviteMode value) {
  _internal_set_invite_mode(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.invite_mode)
}

// uint32 max_invite_times = 17;
inline void ConfInfo::clear_max_invite_times() {
  max_invite_times_ = 0u;
}
inline uint32_t ConfInfo::_internal_max_invite_times() const {
  return max_invite_times_;
}
inline uint32_t ConfInfo::max_invite_times() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.max_invite_times)
  return _internal_max_invite_times();
}
inline void ConfInfo::_internal_set_max_invite_times(uint32_t value) {
  
  max_invite_times_ = value;
}
inline void ConfInfo::set_max_invite_times(uint32_t value) {
  _internal_set_max_invite_times(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.max_invite_times)
}

// bool enable_VCS_manually_send_H239 = 18;
inline void ConfInfo::clear_enable_vcs_manually_send_h239() {
  enable_vcs_manually_send_h239_ = false;
}
inline bool ConfInfo::_internal_enable_vcs_manually_send_h239() const {
  return enable_vcs_manually_send_h239_;
}
inline bool ConfInfo::enable_vcs_manually_send_h239() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.enable_VCS_manually_send_H239)
  return _internal_enable_vcs_manually_send_h239();
}
inline void ConfInfo::_internal_set_enable_vcs_manually_send_h239(bool value) {
  
  enable_vcs_manually_send_h239_ = value;
}
inline void ConfInfo::set_enable_vcs_manually_send_h239(bool value) {
  _internal_set_enable_vcs_manually_send_h239(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.enable_VCS_manually_send_H239)
}

// uint32 enterprise_id = 19;
inline void ConfInfo::clear_enterprise_id() {
  enterprise_id_ = 0u;
}
inline uint32_t ConfInfo::_internal_enterprise_id() const {
  return enterprise_id_;
}
inline uint32_t ConfInfo::enterprise_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.enterprise_id)
  return _internal_enterprise_id();
}
inline void ConfInfo::_internal_set_enterprise_id(uint32_t value) {
  
  enterprise_id_ = value;
}
inline void ConfInfo::set_enterprise_id(uint32_t value) {
  _internal_set_enterprise_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.enterprise_id)
}

// uint32 active_linux_members = 20;
inline void ConfInfo::clear_active_linux_members() {
  active_linux_members_ = 0u;
}
inline uint32_t ConfInfo::_internal_active_linux_members() const {
  return active_linux_members_;
}
inline uint32_t ConfInfo::active_linux_members() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.active_linux_members)
  return _internal_active_linux_members();
}
inline void ConfInfo::_internal_set_active_linux_members(uint32_t value) {
  
  active_linux_members_ = value;
}
inline void ConfInfo::set_active_linux_members(uint32_t value) {
  _internal_set_active_linux_members(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.active_linux_members)
}

// uint32 active_windows_members = 21;
inline void ConfInfo::clear_active_windows_members() {
  active_windows_members_ = 0u;
}
inline uint32_t ConfInfo::_internal_active_windows_members() const {
  return active_windows_members_;
}
inline uint32_t ConfInfo::active_windows_members() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.active_windows_members)
  return _internal_active_windows_members();
}
inline void ConfInfo::_internal_set_active_windows_members(uint32_t value) {
  
  active_windows_members_ = value;
}
inline void ConfInfo::set_active_windows_members(uint32_t value) {
  _internal_set_active_windows_members(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.active_windows_members)
}

// uint32 active_mac_members = 22;
inline void ConfInfo::clear_active_mac_members() {
  active_mac_members_ = 0u;
}
inline uint32_t ConfInfo::_internal_active_mac_members() const {
  return active_mac_members_;
}
inline uint32_t ConfInfo::active_mac_members() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.active_mac_members)
  return _internal_active_mac_members();
}
inline void ConfInfo::_internal_set_active_mac_members(uint32_t value) {
  
  active_mac_members_ = value;
}
inline void ConfInfo::set_active_mac_members(uint32_t value) {
  _internal_set_active_mac_members(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.active_mac_members)
}

// uint32 active_android_members = 23;
inline void ConfInfo::clear_active_android_members() {
  active_android_members_ = 0u;
}
inline uint32_t ConfInfo::_internal_active_android_members() const {
  return active_android_members_;
}
inline uint32_t ConfInfo::active_android_members() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.active_android_members)
  return _internal_active_android_members();
}
inline void ConfInfo::_internal_set_active_android_members(uint32_t value) {
  
  active_android_members_ = value;
}
inline void ConfInfo::set_active_android_members(uint32_t value) {
  _internal_set_active_android_members(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.active_android_members)
}

// uint32 active_IOS_members = 24;
inline void ConfInfo::clear_active_ios_members() {
  active_ios_members_ = 0u;
}
inline uint32_t ConfInfo::_internal_active_ios_members() const {
  return active_ios_members_;
}
inline uint32_t ConfInfo::active_ios_members() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.active_IOS_members)
  return _internal_active_ios_members();
}
inline void ConfInfo::_internal_set_active_ios_members(uint32_t value) {
  
  active_ios_members_ = value;
}
inline void ConfInfo::set_active_ios_members(uint32_t value) {
  _internal_set_active_ios_members(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.active_IOS_members)
}

// bool is_external_live = 25;
inline void ConfInfo::clear_is_external_live() {
  is_external_live_ = false;
}
inline bool ConfInfo::_internal_is_external_live() const {
  return is_external_live_;
}
inline bool ConfInfo::is_external_live() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.is_external_live)
  return _internal_is_external_live();
}
inline void ConfInfo::_internal_set_is_external_live(bool value) {
  
  is_external_live_ = value;
}
inline void ConfInfo::set_is_external_live(bool value) {
  _internal_set_is_external_live(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.is_external_live)
}

// string publish_path = 26;
inline void ConfInfo::clear_publish_path() {
  publish_path_.ClearToEmpty();
}
inline const std::string& ConfInfo::publish_path() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.publish_path)
  return _internal_publish_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_publish_path(ArgT0&& arg0, ArgT... args) {
 
 publish_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.publish_path)
}
inline std::string* ConfInfo::mutable_publish_path() {
  std::string* _s = _internal_mutable_publish_path();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.publish_path)
  return _s;
}
inline const std::string& ConfInfo::_internal_publish_path() const {
  return publish_path_.Get();
}
inline void ConfInfo::_internal_set_publish_path(const std::string& value) {
  
  publish_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_publish_path() {
  
  return publish_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_publish_path() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.publish_path)
  return publish_path_.Release();
}
inline void ConfInfo::set_allocated_publish_path(std::string* publish_path) {
  if (publish_path != nullptr) {
    
  } else {
    
  }
  publish_path_.SetAllocated(publish_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publish_path_.IsDefault()) {
    publish_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.publish_path)
}

// string rtmp_play_path = 27;
inline void ConfInfo::clear_rtmp_play_path() {
  rtmp_play_path_.ClearToEmpty();
}
inline const std::string& ConfInfo::rtmp_play_path() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.rtmp_play_path)
  return _internal_rtmp_play_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_rtmp_play_path(ArgT0&& arg0, ArgT... args) {
 
 rtmp_play_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.rtmp_play_path)
}
inline std::string* ConfInfo::mutable_rtmp_play_path() {
  std::string* _s = _internal_mutable_rtmp_play_path();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.rtmp_play_path)
  return _s;
}
inline const std::string& ConfInfo::_internal_rtmp_play_path() const {
  return rtmp_play_path_.Get();
}
inline void ConfInfo::_internal_set_rtmp_play_path(const std::string& value) {
  
  rtmp_play_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_rtmp_play_path() {
  
  return rtmp_play_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_rtmp_play_path() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.rtmp_play_path)
  return rtmp_play_path_.Release();
}
inline void ConfInfo::set_allocated_rtmp_play_path(std::string* rtmp_play_path) {
  if (rtmp_play_path != nullptr) {
    
  } else {
    
  }
  rtmp_play_path_.SetAllocated(rtmp_play_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rtmp_play_path_.IsDefault()) {
    rtmp_play_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.rtmp_play_path)
}

// string hls_play_path = 28;
inline void ConfInfo::clear_hls_play_path() {
  hls_play_path_.ClearToEmpty();
}
inline const std::string& ConfInfo::hls_play_path() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConfInfo.hls_play_path)
  return _internal_hls_play_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfInfo::set_hls_play_path(ArgT0&& arg0, ArgT... args) {
 
 hls_play_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ConfInfo.hls_play_path)
}
inline std::string* ConfInfo::mutable_hls_play_path() {
  std::string* _s = _internal_mutable_hls_play_path();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConfInfo.hls_play_path)
  return _s;
}
inline const std::string& ConfInfo::_internal_hls_play_path() const {
  return hls_play_path_.Get();
}
inline void ConfInfo::_internal_set_hls_play_path(const std::string& value) {
  
  hls_play_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfInfo::_internal_mutable_hls_play_path() {
  
  return hls_play_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfInfo::release_hls_play_path() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConfInfo.hls_play_path)
  return hls_play_path_.Release();
}
inline void ConfInfo::set_allocated_hls_play_path(std::string* hls_play_path) {
  if (hls_play_path != nullptr) {
    
  } else {
    
  }
  hls_play_path_.SetAllocated(hls_play_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hls_play_path_.IsDefault()) {
    hls_play_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConfInfo.hls_play_path)
}

// -------------------------------------------------------------------

// CreateMeetingReq

// .ccs_msg.MsgHeader header = 1;
inline bool CreateMeetingReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CreateMeetingReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& CreateMeetingReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& CreateMeetingReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.header)
  return _internal_header();
}
inline void CreateMeetingReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CreateMeetingReq.header)
}
inline ::ccs_msg::MsgHeader* CreateMeetingReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* CreateMeetingReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* CreateMeetingReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* CreateMeetingReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.header)
  return _msg;
}
inline void CreateMeetingReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.header)
}

// string room_ID = 2;
inline void CreateMeetingReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.room_ID)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.room_ID)
}
inline std::string* CreateMeetingReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.room_ID)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void CreateMeetingReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.room_ID)
  return room_id_.Release();
}
inline void CreateMeetingReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.room_ID)
}

// string meeting_ID = 3;
inline void CreateMeetingReq::clear_meeting_id() {
  meeting_id_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::meeting_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.meeting_ID)
  return _internal_meeting_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_meeting_id(ArgT0&& arg0, ArgT... args) {
 
 meeting_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.meeting_ID)
}
inline std::string* CreateMeetingReq::mutable_meeting_id() {
  std::string* _s = _internal_mutable_meeting_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.meeting_ID)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_meeting_id() const {
  return meeting_id_.Get();
}
inline void CreateMeetingReq::_internal_set_meeting_id(const std::string& value) {
  
  meeting_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_meeting_id() {
  
  return meeting_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_meeting_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.meeting_ID)
  return meeting_id_.Release();
}
inline void CreateMeetingReq::set_allocated_meeting_id(std::string* meeting_id) {
  if (meeting_id != nullptr) {
    
  } else {
    
  }
  meeting_id_.SetAllocated(meeting_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (meeting_id_.IsDefault()) {
    meeting_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.meeting_ID)
}

// string name = 4;
inline void CreateMeetingReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::name() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.name)
}
inline std::string* CreateMeetingReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.name)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_name() const {
  return name_.Get();
}
inline void CreateMeetingReq::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_name() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.name)
  return name_.Release();
}
inline void CreateMeetingReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.name)
}

// string creator = 5;
inline void CreateMeetingReq::clear_creator() {
  creator_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::creator() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_creator(ArgT0&& arg0, ArgT... args) {
 
 creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.creator)
}
inline std::string* CreateMeetingReq::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.creator)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_creator() const {
  return creator_.Get();
}
inline void CreateMeetingReq::_internal_set_creator(const std::string& value) {
  
  creator_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_creator() {
  
  return creator_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_creator() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.creator)
  return creator_.Release();
}
inline void CreateMeetingReq::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_.IsDefault()) {
    creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.creator)
}

// string conf_Password = 6;
inline void CreateMeetingReq::clear_conf_password() {
  conf_password_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::conf_password() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.conf_Password)
  return _internal_conf_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_conf_password(ArgT0&& arg0, ArgT... args) {
 
 conf_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.conf_Password)
}
inline std::string* CreateMeetingReq::mutable_conf_password() {
  std::string* _s = _internal_mutable_conf_password();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.conf_Password)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_conf_password() const {
  return conf_password_.Get();
}
inline void CreateMeetingReq::_internal_set_conf_password(const std::string& value) {
  
  conf_password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_conf_password() {
  
  return conf_password_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_conf_password() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.conf_Password)
  return conf_password_.Release();
}
inline void CreateMeetingReq::set_allocated_conf_password(std::string* conf_password) {
  if (conf_password != nullptr) {
    
  } else {
    
  }
  conf_password_.SetAllocated(conf_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (conf_password_.IsDefault()) {
    conf_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.conf_Password)
}

// .ccs_msg.InviteMode invite_mode = 7;
inline void CreateMeetingReq::clear_invite_mode() {
  invite_mode_ = 0;
}
inline ::ccs_msg::InviteMode CreateMeetingReq::_internal_invite_mode() const {
  return static_cast< ::ccs_msg::InviteMode >(invite_mode_);
}
inline ::ccs_msg::InviteMode CreateMeetingReq::invite_mode() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.invite_mode)
  return _internal_invite_mode();
}
inline void CreateMeetingReq::_internal_set_invite_mode(::ccs_msg::InviteMode value) {
  
  invite_mode_ = value;
}
inline void CreateMeetingReq::set_invite_mode(::ccs_msg::InviteMode value) {
  _internal_set_invite_mode(value);
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.invite_mode)
}

// string audio_codec = 8;
inline void CreateMeetingReq::clear_audio_codec() {
  audio_codec_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::audio_codec() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.audio_codec)
  return _internal_audio_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_audio_codec(ArgT0&& arg0, ArgT... args) {
 
 audio_codec_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.audio_codec)
}
inline std::string* CreateMeetingReq::mutable_audio_codec() {
  std::string* _s = _internal_mutable_audio_codec();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.audio_codec)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_audio_codec() const {
  return audio_codec_.Get();
}
inline void CreateMeetingReq::_internal_set_audio_codec(const std::string& value) {
  
  audio_codec_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_audio_codec() {
  
  return audio_codec_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_audio_codec() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.audio_codec)
  return audio_codec_.Release();
}
inline void CreateMeetingReq::set_allocated_audio_codec(std::string* audio_codec) {
  if (audio_codec != nullptr) {
    
  } else {
    
  }
  audio_codec_.SetAllocated(audio_codec, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (audio_codec_.IsDefault()) {
    audio_codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.audio_codec)
}

// uint32 member_count_limit = 9;
inline void CreateMeetingReq::clear_member_count_limit() {
  member_count_limit_ = 0u;
}
inline uint32_t CreateMeetingReq::_internal_member_count_limit() const {
  return member_count_limit_;
}
inline uint32_t CreateMeetingReq::member_count_limit() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.member_count_limit)
  return _internal_member_count_limit();
}
inline void CreateMeetingReq::_internal_set_member_count_limit(uint32_t value) {
  
  member_count_limit_ = value;
}
inline void CreateMeetingReq::set_member_count_limit(uint32_t value) {
  _internal_set_member_count_limit(value);
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.member_count_limit)
}

// .ccs_msg.ConferenceMediaType conf_media_type = 10;
inline void CreateMeetingReq::clear_conf_media_type() {
  conf_media_type_ = 0;
}
inline ::ccs_msg::ConferenceMediaType CreateMeetingReq::_internal_conf_media_type() const {
  return static_cast< ::ccs_msg::ConferenceMediaType >(conf_media_type_);
}
inline ::ccs_msg::ConferenceMediaType CreateMeetingReq::conf_media_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.conf_media_type)
  return _internal_conf_media_type();
}
inline void CreateMeetingReq::_internal_set_conf_media_type(::ccs_msg::ConferenceMediaType value) {
  
  conf_media_type_ = value;
}
inline void CreateMeetingReq::set_conf_media_type(::ccs_msg::ConferenceMediaType value) {
  _internal_set_conf_media_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.conf_media_type)
}

// .ccs_msg.ProtoType proto_type = 11;
inline void CreateMeetingReq::clear_proto_type() {
  proto_type_ = 0;
}
inline ::ccs_msg::ProtoType CreateMeetingReq::_internal_proto_type() const {
  return static_cast< ::ccs_msg::ProtoType >(proto_type_);
}
inline ::ccs_msg::ProtoType CreateMeetingReq::proto_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.proto_type)
  return _internal_proto_type();
}
inline void CreateMeetingReq::_internal_set_proto_type(::ccs_msg::ProtoType value) {
  
  proto_type_ = value;
}
inline void CreateMeetingReq::set_proto_type(::ccs_msg::ProtoType value) {
  _internal_set_proto_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.proto_type)
}

// string start_time = 12;
inline void CreateMeetingReq::clear_start_time() {
  start_time_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::start_time() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.start_time)
  return _internal_start_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_start_time(ArgT0&& arg0, ArgT... args) {
 
 start_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.start_time)
}
inline std::string* CreateMeetingReq::mutable_start_time() {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.start_time)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_start_time() const {
  return start_time_.Get();
}
inline void CreateMeetingReq::_internal_set_start_time(const std::string& value) {
  
  start_time_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_start_time() {
  
  return start_time_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_start_time() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.start_time)
  return start_time_.Release();
}
inline void CreateMeetingReq::set_allocated_start_time(std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocated(start_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_time_.IsDefault()) {
    start_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.start_time)
}

// string end_time = 13;
inline void CreateMeetingReq::clear_end_time() {
  end_time_.ClearToEmpty();
}
inline const std::string& CreateMeetingReq::end_time() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.end_time)
  return _internal_end_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingReq::set_end_time(ArgT0&& arg0, ArgT... args) {
 
 end_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingReq.end_time)
}
inline std::string* CreateMeetingReq::mutable_end_time() {
  std::string* _s = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.end_time)
  return _s;
}
inline const std::string& CreateMeetingReq::_internal_end_time() const {
  return end_time_.Get();
}
inline void CreateMeetingReq::_internal_set_end_time(const std::string& value) {
  
  end_time_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::_internal_mutable_end_time() {
  
  return end_time_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingReq::release_end_time() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.end_time)
  return end_time_.Release();
}
inline void CreateMeetingReq::set_allocated_end_time(std::string* end_time) {
  if (end_time != nullptr) {
    
  } else {
    
  }
  end_time_.SetAllocated(end_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (end_time_.IsDefault()) {
    end_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.end_time)
}

// .ccs_msg.VideoCodec ex_video_codec = 14;
inline bool CreateMeetingReq::_internal_has_ex_video_codec() const {
  return this != internal_default_instance() && ex_video_codec_ != nullptr;
}
inline bool CreateMeetingReq::has_ex_video_codec() const {
  return _internal_has_ex_video_codec();
}
inline void CreateMeetingReq::clear_ex_video_codec() {
  if (GetArenaForAllocation() == nullptr && ex_video_codec_ != nullptr) {
    delete ex_video_codec_;
  }
  ex_video_codec_ = nullptr;
}
inline const ::ccs_msg::VideoCodec& CreateMeetingReq::_internal_ex_video_codec() const {
  const ::ccs_msg::VideoCodec* p = ex_video_codec_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::VideoCodec&>(
      ::ccs_msg::_VideoCodec_default_instance_);
}
inline const ::ccs_msg::VideoCodec& CreateMeetingReq::ex_video_codec() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.ex_video_codec)
  return _internal_ex_video_codec();
}
inline void CreateMeetingReq::unsafe_arena_set_allocated_ex_video_codec(
    ::ccs_msg::VideoCodec* ex_video_codec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ex_video_codec_);
  }
  ex_video_codec_ = ex_video_codec;
  if (ex_video_codec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CreateMeetingReq.ex_video_codec)
}
inline ::ccs_msg::VideoCodec* CreateMeetingReq::release_ex_video_codec() {
  
  ::ccs_msg::VideoCodec* temp = ex_video_codec_;
  ex_video_codec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::VideoCodec* CreateMeetingReq::unsafe_arena_release_ex_video_codec() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.ex_video_codec)
  
  ::ccs_msg::VideoCodec* temp = ex_video_codec_;
  ex_video_codec_ = nullptr;
  return temp;
}
inline ::ccs_msg::VideoCodec* CreateMeetingReq::_internal_mutable_ex_video_codec() {
  
  if (ex_video_codec_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::VideoCodec>(GetArenaForAllocation());
    ex_video_codec_ = p;
  }
  return ex_video_codec_;
}
inline ::ccs_msg::VideoCodec* CreateMeetingReq::mutable_ex_video_codec() {
  ::ccs_msg::VideoCodec* _msg = _internal_mutable_ex_video_codec();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.ex_video_codec)
  return _msg;
}
inline void CreateMeetingReq::set_allocated_ex_video_codec(::ccs_msg::VideoCodec* ex_video_codec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ex_video_codec_;
  }
  if (ex_video_codec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ex_video_codec);
    if (message_arena != submessage_arena) {
      ex_video_codec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ex_video_codec, submessage_arena);
    }
    
  } else {
    
  }
  ex_video_codec_ = ex_video_codec;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.ex_video_codec)
}

// .ccs_msg.VideoParams video_params = 15;
inline bool CreateMeetingReq::_internal_has_video_params() const {
  return this != internal_default_instance() && video_params_ != nullptr;
}
inline bool CreateMeetingReq::has_video_params() const {
  return _internal_has_video_params();
}
inline void CreateMeetingReq::clear_video_params() {
  if (GetArenaForAllocation() == nullptr && video_params_ != nullptr) {
    delete video_params_;
  }
  video_params_ = nullptr;
}
inline const ::ccs_msg::VideoParams& CreateMeetingReq::_internal_video_params() const {
  const ::ccs_msg::VideoParams* p = video_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::VideoParams&>(
      ::ccs_msg::_VideoParams_default_instance_);
}
inline const ::ccs_msg::VideoParams& CreateMeetingReq::video_params() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.video_params)
  return _internal_video_params();
}
inline void CreateMeetingReq::unsafe_arena_set_allocated_video_params(
    ::ccs_msg::VideoParams* video_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_params_);
  }
  video_params_ = video_params;
  if (video_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CreateMeetingReq.video_params)
}
inline ::ccs_msg::VideoParams* CreateMeetingReq::release_video_params() {
  
  ::ccs_msg::VideoParams* temp = video_params_;
  video_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::VideoParams* CreateMeetingReq::unsafe_arena_release_video_params() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.video_params)
  
  ::ccs_msg::VideoParams* temp = video_params_;
  video_params_ = nullptr;
  return temp;
}
inline ::ccs_msg::VideoParams* CreateMeetingReq::_internal_mutable_video_params() {
  
  if (video_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::VideoParams>(GetArenaForAllocation());
    video_params_ = p;
  }
  return video_params_;
}
inline ::ccs_msg::VideoParams* CreateMeetingReq::mutable_video_params() {
  ::ccs_msg::VideoParams* _msg = _internal_mutable_video_params();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.video_params)
  return _msg;
}
inline void CreateMeetingReq::set_allocated_video_params(::ccs_msg::VideoParams* video_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete video_params_;
  }
  if (video_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video_params);
    if (message_arena != submessage_arena) {
      video_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_params, submessage_arena);
    }
    
  } else {
    
  }
  video_params_ = video_params;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.video_params)
}

// .ccs_msg.VideoLayout layout = 16;
inline bool CreateMeetingReq::_internal_has_layout() const {
  return this != internal_default_instance() && layout_ != nullptr;
}
inline bool CreateMeetingReq::has_layout() const {
  return _internal_has_layout();
}
inline void CreateMeetingReq::clear_layout() {
  if (GetArenaForAllocation() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
}
inline const ::ccs_msg::VideoLayout& CreateMeetingReq::_internal_layout() const {
  const ::ccs_msg::VideoLayout* p = layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::VideoLayout&>(
      ::ccs_msg::_VideoLayout_default_instance_);
}
inline const ::ccs_msg::VideoLayout& CreateMeetingReq::layout() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingReq.layout)
  return _internal_layout();
}
inline void CreateMeetingReq::unsafe_arena_set_allocated_layout(
    ::ccs_msg::VideoLayout* layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_);
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CreateMeetingReq.layout)
}
inline ::ccs_msg::VideoLayout* CreateMeetingReq::release_layout() {
  
  ::ccs_msg::VideoLayout* temp = layout_;
  layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::VideoLayout* CreateMeetingReq::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingReq.layout)
  
  ::ccs_msg::VideoLayout* temp = layout_;
  layout_ = nullptr;
  return temp;
}
inline ::ccs_msg::VideoLayout* CreateMeetingReq::_internal_mutable_layout() {
  
  if (layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::VideoLayout>(GetArenaForAllocation());
    layout_ = p;
  }
  return layout_;
}
inline ::ccs_msg::VideoLayout* CreateMeetingReq::mutable_layout() {
  ::ccs_msg::VideoLayout* _msg = _internal_mutable_layout();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingReq.layout)
  return _msg;
}
inline void CreateMeetingReq::set_allocated_layout(::ccs_msg::VideoLayout* layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete layout_;
  }
  if (layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layout);
    if (message_arena != submessage_arena) {
      layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout, submessage_arena);
    }
    
  } else {
    
  }
  layout_ = layout;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingReq.layout)
}

// -------------------------------------------------------------------

// CreateMeetingRes

// .ccs_msg.ResultInfo result = 1;
inline bool CreateMeetingRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateMeetingRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& CreateMeetingRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& CreateMeetingRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingRes.result)
  return _internal_result();
}
inline void CreateMeetingRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CreateMeetingRes.result)
}
inline ::ccs_msg::ResultInfo* CreateMeetingRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* CreateMeetingRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* CreateMeetingRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* CreateMeetingRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingRes.result)
  return _msg;
}
inline void CreateMeetingRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingRes.result)
}

// string room_id = 2;
inline void CreateMeetingRes::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& CreateMeetingRes::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingRes.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingRes::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingRes.room_id)
}
inline std::string* CreateMeetingRes::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingRes.room_id)
  return _s;
}
inline const std::string& CreateMeetingRes::_internal_room_id() const {
  return room_id_.Get();
}
inline void CreateMeetingRes::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingRes::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingRes::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingRes.room_id)
  return room_id_.Release();
}
inline void CreateMeetingRes::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingRes.room_id)
}

// string meeting_id = 3;
inline void CreateMeetingRes::clear_meeting_id() {
  meeting_id_.ClearToEmpty();
}
inline const std::string& CreateMeetingRes::meeting_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CreateMeetingRes.meeting_id)
  return _internal_meeting_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMeetingRes::set_meeting_id(ArgT0&& arg0, ArgT... args) {
 
 meeting_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CreateMeetingRes.meeting_id)
}
inline std::string* CreateMeetingRes::mutable_meeting_id() {
  std::string* _s = _internal_mutable_meeting_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CreateMeetingRes.meeting_id)
  return _s;
}
inline const std::string& CreateMeetingRes::_internal_meeting_id() const {
  return meeting_id_.Get();
}
inline void CreateMeetingRes::_internal_set_meeting_id(const std::string& value) {
  
  meeting_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMeetingRes::_internal_mutable_meeting_id() {
  
  return meeting_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateMeetingRes::release_meeting_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.CreateMeetingRes.meeting_id)
  return meeting_id_.Release();
}
inline void CreateMeetingRes::set_allocated_meeting_id(std::string* meeting_id) {
  if (meeting_id != nullptr) {
    
  } else {
    
  }
  meeting_id_.SetAllocated(meeting_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (meeting_id_.IsDefault()) {
    meeting_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CreateMeetingRes.meeting_id)
}

// -------------------------------------------------------------------

// GetMeetingListReq

// .ccs_msg.MsgHeader header = 1;
inline bool GetMeetingListReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetMeetingListReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& GetMeetingListReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& GetMeetingListReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetMeetingListReq.header)
  return _internal_header();
}
inline void GetMeetingListReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.GetMeetingListReq.header)
}
inline ::ccs_msg::MsgHeader* GetMeetingListReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* GetMeetingListReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetMeetingListReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* GetMeetingListReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* GetMeetingListReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetMeetingListReq.header)
  return _msg;
}
inline void GetMeetingListReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetMeetingListReq.header)
}

// -------------------------------------------------------------------

// ConferenceListRes

// .ccs_msg.ResultInfo result = 1;
inline bool ConferenceListRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ConferenceListRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& ConferenceListRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& ConferenceListRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConferenceListRes.result)
  return _internal_result();
}
inline void ConferenceListRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.ConferenceListRes.result)
}
inline ::ccs_msg::ResultInfo* ConferenceListRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* ConferenceListRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.ConferenceListRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* ConferenceListRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* ConferenceListRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConferenceListRes.result)
  return _msg;
}
inline void ConferenceListRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ConferenceListRes.result)
}

// repeated .ccs_msg.ConfInfo conf_info_list = 2;
inline int ConferenceListRes::_internal_conf_info_list_size() const {
  return conf_info_list_.size();
}
inline int ConferenceListRes::conf_info_list_size() const {
  return _internal_conf_info_list_size();
}
inline void ConferenceListRes::clear_conf_info_list() {
  conf_info_list_.Clear();
}
inline ::ccs_msg::ConfInfo* ConferenceListRes::mutable_conf_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.ConferenceListRes.conf_info_list)
  return conf_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::ConfInfo >*
ConferenceListRes::mutable_conf_info_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.ConferenceListRes.conf_info_list)
  return &conf_info_list_;
}
inline const ::ccs_msg::ConfInfo& ConferenceListRes::_internal_conf_info_list(int index) const {
  return conf_info_list_.Get(index);
}
inline const ::ccs_msg::ConfInfo& ConferenceListRes::conf_info_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.ConferenceListRes.conf_info_list)
  return _internal_conf_info_list(index);
}
inline ::ccs_msg::ConfInfo* ConferenceListRes::_internal_add_conf_info_list() {
  return conf_info_list_.Add();
}
inline ::ccs_msg::ConfInfo* ConferenceListRes::add_conf_info_list() {
  ::ccs_msg::ConfInfo* _add = _internal_add_conf_info_list();
  // @@protoc_insertion_point(field_add:ccs_msg.ConferenceListRes.conf_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::ConfInfo >&
ConferenceListRes::conf_info_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.ConferenceListRes.conf_info_list)
  return conf_info_list_;
}

// -------------------------------------------------------------------

// InviteMemberReq

// .ccs_msg.MsgHeader header = 1;
inline bool InviteMemberReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InviteMemberReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& InviteMemberReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& InviteMemberReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberReq.header)
  return _internal_header();
}
inline void InviteMemberReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.InviteMemberReq.header)
}
inline ::ccs_msg::MsgHeader* InviteMemberReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* InviteMemberReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.InviteMemberReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* InviteMemberReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* InviteMemberReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.InviteMemberReq.header)
  return _msg;
}
inline void InviteMemberReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.InviteMemberReq.header)
}

// string roomID = 2;
inline void InviteMemberReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& InviteMemberReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMemberReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.InviteMemberReq.roomID)
}
inline std::string* InviteMemberReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.InviteMemberReq.roomID)
  return _s;
}
inline const std::string& InviteMemberReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void InviteMemberReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMemberReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMemberReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.InviteMemberReq.roomID)
  return roomid_.Release();
}
inline void InviteMemberReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.InviteMemberReq.roomID)
}

// string inviteName = 3;
inline void InviteMemberReq::clear_invitename() {
  invitename_.ClearToEmpty();
}
inline const std::string& InviteMemberReq::invitename() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberReq.inviteName)
  return _internal_invitename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMemberReq::set_invitename(ArgT0&& arg0, ArgT... args) {
 
 invitename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.InviteMemberReq.inviteName)
}
inline std::string* InviteMemberReq::mutable_invitename() {
  std::string* _s = _internal_mutable_invitename();
  // @@protoc_insertion_point(field_mutable:ccs_msg.InviteMemberReq.inviteName)
  return _s;
}
inline const std::string& InviteMemberReq::_internal_invitename() const {
  return invitename_.Get();
}
inline void InviteMemberReq::_internal_set_invitename(const std::string& value) {
  
  invitename_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMemberReq::_internal_mutable_invitename() {
  
  return invitename_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMemberReq::release_invitename() {
  // @@protoc_insertion_point(field_release:ccs_msg.InviteMemberReq.inviteName)
  return invitename_.Release();
}
inline void InviteMemberReq::set_allocated_invitename(std::string* invitename) {
  if (invitename != nullptr) {
    
  } else {
    
  }
  invitename_.SetAllocated(invitename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitename_.IsDefault()) {
    invitename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.InviteMemberReq.inviteName)
}

// bool isAdd = 4;
inline void InviteMemberReq::clear_isadd() {
  isadd_ = false;
}
inline bool InviteMemberReq::_internal_isadd() const {
  return isadd_;
}
inline bool InviteMemberReq::isadd() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberReq.isAdd)
  return _internal_isadd();
}
inline void InviteMemberReq::_internal_set_isadd(bool value) {
  
  isadd_ = value;
}
inline void InviteMemberReq::set_isadd(bool value) {
  _internal_set_isadd(value);
  // @@protoc_insertion_point(field_set:ccs_msg.InviteMemberReq.isAdd)
}

// -------------------------------------------------------------------

// InviteMemberRes

// .ccs_msg.ResultInfo result = 1;
inline bool InviteMemberRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool InviteMemberRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& InviteMemberRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& InviteMemberRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberRes.result)
  return _internal_result();
}
inline void InviteMemberRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.InviteMemberRes.result)
}
inline ::ccs_msg::ResultInfo* InviteMemberRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* InviteMemberRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.InviteMemberRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* InviteMemberRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* InviteMemberRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.InviteMemberRes.result)
  return _msg;
}
inline void InviteMemberRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.InviteMemberRes.result)
}

// string roomID = 2;
inline void InviteMemberRes::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& InviteMemberRes::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberRes.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMemberRes::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.InviteMemberRes.roomID)
}
inline std::string* InviteMemberRes::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.InviteMemberRes.roomID)
  return _s;
}
inline const std::string& InviteMemberRes::_internal_roomid() const {
  return roomid_.Get();
}
inline void InviteMemberRes::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMemberRes::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMemberRes::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.InviteMemberRes.roomID)
  return roomid_.Release();
}
inline void InviteMemberRes::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.InviteMemberRes.roomID)
}

// string inviteName = 3;
inline void InviteMemberRes::clear_invitename() {
  invitename_.ClearToEmpty();
}
inline const std::string& InviteMemberRes::invitename() const {
  // @@protoc_insertion_point(field_get:ccs_msg.InviteMemberRes.inviteName)
  return _internal_invitename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMemberRes::set_invitename(ArgT0&& arg0, ArgT... args) {
 
 invitename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.InviteMemberRes.inviteName)
}
inline std::string* InviteMemberRes::mutable_invitename() {
  std::string* _s = _internal_mutable_invitename();
  // @@protoc_insertion_point(field_mutable:ccs_msg.InviteMemberRes.inviteName)
  return _s;
}
inline const std::string& InviteMemberRes::_internal_invitename() const {
  return invitename_.Get();
}
inline void InviteMemberRes::_internal_set_invitename(const std::string& value) {
  
  invitename_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMemberRes::_internal_mutable_invitename() {
  
  return invitename_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMemberRes::release_invitename() {
  // @@protoc_insertion_point(field_release:ccs_msg.InviteMemberRes.inviteName)
  return invitename_.Release();
}
inline void InviteMemberRes::set_allocated_invitename(std::string* invitename) {
  if (invitename != nullptr) {
    
  } else {
    
  }
  invitename_.SetAllocated(invitename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitename_.IsDefault()) {
    invitename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.InviteMemberRes.inviteName)
}

// -------------------------------------------------------------------

// DropMemberReq

// .ccs_msg.MsgHeader header = 1;
inline bool DropMemberReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DropMemberReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& DropMemberReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& DropMemberReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.DropMemberReq.header)
  return _internal_header();
}
inline void DropMemberReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.DropMemberReq.header)
}
inline ::ccs_msg::MsgHeader* DropMemberReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* DropMemberReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.DropMemberReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* DropMemberReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* DropMemberReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.DropMemberReq.header)
  return _msg;
}
inline void DropMemberReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.DropMemberReq.header)
}

// string roomID = 2;
inline void DropMemberReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& DropMemberReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.DropMemberReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropMemberReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.DropMemberReq.roomID)
}
inline std::string* DropMemberReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.DropMemberReq.roomID)
  return _s;
}
inline const std::string& DropMemberReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void DropMemberReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* DropMemberReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* DropMemberReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.DropMemberReq.roomID)
  return roomid_.Release();
}
inline void DropMemberReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.DropMemberReq.roomID)
}

// uint64 memberID = 3;
inline void DropMemberReq::clear_memberid() {
  memberid_ = uint64_t{0u};
}
inline uint64_t DropMemberReq::_internal_memberid() const {
  return memberid_;
}
inline uint64_t DropMemberReq::memberid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.DropMemberReq.memberID)
  return _internal_memberid();
}
inline void DropMemberReq::_internal_set_memberid(uint64_t value) {
  
  memberid_ = value;
}
inline void DropMemberReq::set_memberid(uint64_t value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.DropMemberReq.memberID)
}

// -------------------------------------------------------------------

// DropMemberRes

// .ccs_msg.ResultInfo result = 1;
inline bool DropMemberRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DropMemberRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& DropMemberRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& DropMemberRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.DropMemberRes.result)
  return _internal_result();
}
inline void DropMemberRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.DropMemberRes.result)
}
inline ::ccs_msg::ResultInfo* DropMemberRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* DropMemberRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.DropMemberRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* DropMemberRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* DropMemberRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.DropMemberRes.result)
  return _msg;
}
inline void DropMemberRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.DropMemberRes.result)
}

// string roomID = 2;
inline void DropMemberRes::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& DropMemberRes::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.DropMemberRes.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DropMemberRes::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.DropMemberRes.roomID)
}
inline std::string* DropMemberRes::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.DropMemberRes.roomID)
  return _s;
}
inline const std::string& DropMemberRes::_internal_roomid() const {
  return roomid_.Get();
}
inline void DropMemberRes::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* DropMemberRes::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* DropMemberRes::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.DropMemberRes.roomID)
  return roomid_.Release();
}
inline void DropMemberRes::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.DropMemberRes.roomID)
}

// uint64 memberID = 3;
inline void DropMemberRes::clear_memberid() {
  memberid_ = uint64_t{0u};
}
inline uint64_t DropMemberRes::_internal_memberid() const {
  return memberid_;
}
inline uint64_t DropMemberRes::memberid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.DropMemberRes.memberID)
  return _internal_memberid();
}
inline void DropMemberRes::_internal_set_memberid(uint64_t value) {
  
  memberid_ = value;
}
inline void DropMemberRes::set_memberid(uint64_t value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.DropMemberRes.memberID)
}

// -------------------------------------------------------------------

// RemoveConfReq

// .ccs_msg.MsgHeader header = 1;
inline bool RemoveConfReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RemoveConfReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& RemoveConfReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& RemoveConfReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RemoveConfReq.header)
  return _internal_header();
}
inline void RemoveConfReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.RemoveConfReq.header)
}
inline ::ccs_msg::MsgHeader* RemoveConfReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* RemoveConfReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.RemoveConfReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* RemoveConfReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* RemoveConfReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.RemoveConfReq.header)
  return _msg;
}
inline void RemoveConfReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.RemoveConfReq.header)
}

// string roomID = 2;
inline void RemoveConfReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& RemoveConfReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RemoveConfReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveConfReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.RemoveConfReq.roomID)
}
inline std::string* RemoveConfReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.RemoveConfReq.roomID)
  return _s;
}
inline const std::string& RemoveConfReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void RemoveConfReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveConfReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveConfReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.RemoveConfReq.roomID)
  return roomid_.Release();
}
inline void RemoveConfReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.RemoveConfReq.roomID)
}

// -------------------------------------------------------------------

// RemoveConfRes

// .ccs_msg.ResultInfo result = 1;
inline bool RemoveConfRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RemoveConfRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& RemoveConfRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& RemoveConfRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RemoveConfRes.result)
  return _internal_result();
}
inline void RemoveConfRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.RemoveConfRes.result)
}
inline ::ccs_msg::ResultInfo* RemoveConfRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* RemoveConfRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.RemoveConfRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* RemoveConfRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* RemoveConfRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.RemoveConfRes.result)
  return _msg;
}
inline void RemoveConfRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.RemoveConfRes.result)
}

// string roomID = 2;
inline void RemoveConfRes::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& RemoveConfRes::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RemoveConfRes.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveConfRes::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.RemoveConfRes.roomID)
}
inline std::string* RemoveConfRes::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.RemoveConfRes.roomID)
  return _s;
}
inline const std::string& RemoveConfRes::_internal_roomid() const {
  return roomid_.Get();
}
inline void RemoveConfRes::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveConfRes::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveConfRes::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.RemoveConfRes.roomID)
  return roomid_.Release();
}
inline void RemoveConfRes::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.RemoveConfRes.roomID)
}

// -------------------------------------------------------------------

// GetVideoLayoutInfoReq

// .ccs_msg.MsgHeader header = 1;
inline bool GetVideoLayoutInfoReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetVideoLayoutInfoReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& GetVideoLayoutInfoReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& GetVideoLayoutInfoReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoReq.header)
  return _internal_header();
}
inline void GetVideoLayoutInfoReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.GetVideoLayoutInfoReq.header)
}
inline ::ccs_msg::MsgHeader* GetVideoLayoutInfoReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* GetVideoLayoutInfoReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetVideoLayoutInfoReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* GetVideoLayoutInfoReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* GetVideoLayoutInfoReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetVideoLayoutInfoReq.header)
  return _msg;
}
inline void GetVideoLayoutInfoReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetVideoLayoutInfoReq.header)
}

// string roomID = 2;
inline void GetVideoLayoutInfoReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& GetVideoLayoutInfoReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVideoLayoutInfoReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.GetVideoLayoutInfoReq.roomID)
}
inline std::string* GetVideoLayoutInfoReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetVideoLayoutInfoReq.roomID)
  return _s;
}
inline const std::string& GetVideoLayoutInfoReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void GetVideoLayoutInfoReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVideoLayoutInfoReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVideoLayoutInfoReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetVideoLayoutInfoReq.roomID)
  return roomid_.Release();
}
inline void GetVideoLayoutInfoReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetVideoLayoutInfoReq.roomID)
}

// uint32 mixerID = 3;
inline void GetVideoLayoutInfoReq::clear_mixerid() {
  mixerid_ = 0u;
}
inline uint32_t GetVideoLayoutInfoReq::_internal_mixerid() const {
  return mixerid_;
}
inline uint32_t GetVideoLayoutInfoReq::mixerid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoReq.mixerID)
  return _internal_mixerid();
}
inline void GetVideoLayoutInfoReq::_internal_set_mixerid(uint32_t value) {
  
  mixerid_ = value;
}
inline void GetVideoLayoutInfoReq::set_mixerid(uint32_t value) {
  _internal_set_mixerid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.GetVideoLayoutInfoReq.mixerID)
}

// -------------------------------------------------------------------

// GetVideoLayoutInfoRes

// .ccs_msg.ResultInfo result = 1;
inline bool GetVideoLayoutInfoRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetVideoLayoutInfoRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& GetVideoLayoutInfoRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& GetVideoLayoutInfoRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoRes.result)
  return _internal_result();
}
inline void GetVideoLayoutInfoRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.GetVideoLayoutInfoRes.result)
}
inline ::ccs_msg::ResultInfo* GetVideoLayoutInfoRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* GetVideoLayoutInfoRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetVideoLayoutInfoRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* GetVideoLayoutInfoRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* GetVideoLayoutInfoRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetVideoLayoutInfoRes.result)
  return _msg;
}
inline void GetVideoLayoutInfoRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetVideoLayoutInfoRes.result)
}

// repeated .ccs_msg.VideoWindow win_list = 2;
inline int GetVideoLayoutInfoRes::_internal_win_list_size() const {
  return win_list_.size();
}
inline int GetVideoLayoutInfoRes::win_list_size() const {
  return _internal_win_list_size();
}
inline void GetVideoLayoutInfoRes::clear_win_list() {
  win_list_.Clear();
}
inline ::ccs_msg::VideoWindow* GetVideoLayoutInfoRes::mutable_win_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetVideoLayoutInfoRes.win_list)
  return win_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >*
GetVideoLayoutInfoRes::mutable_win_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.GetVideoLayoutInfoRes.win_list)
  return &win_list_;
}
inline const ::ccs_msg::VideoWindow& GetVideoLayoutInfoRes::_internal_win_list(int index) const {
  return win_list_.Get(index);
}
inline const ::ccs_msg::VideoWindow& GetVideoLayoutInfoRes::win_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoRes.win_list)
  return _internal_win_list(index);
}
inline ::ccs_msg::VideoWindow* GetVideoLayoutInfoRes::_internal_add_win_list() {
  return win_list_.Add();
}
inline ::ccs_msg::VideoWindow* GetVideoLayoutInfoRes::add_win_list() {
  ::ccs_msg::VideoWindow* _add = _internal_add_win_list();
  // @@protoc_insertion_point(field_add:ccs_msg.GetVideoLayoutInfoRes.win_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::VideoWindow >&
GetVideoLayoutInfoRes::win_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.GetVideoLayoutInfoRes.win_list)
  return win_list_;
}

// uint32 layout_id = 3;
inline void GetVideoLayoutInfoRes::clear_layout_id() {
  layout_id_ = 0u;
}
inline uint32_t GetVideoLayoutInfoRes::_internal_layout_id() const {
  return layout_id_;
}
inline uint32_t GetVideoLayoutInfoRes::layout_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoRes.layout_id)
  return _internal_layout_id();
}
inline void GetVideoLayoutInfoRes::_internal_set_layout_id(uint32_t value) {
  
  layout_id_ = value;
}
inline void GetVideoLayoutInfoRes::set_layout_id(uint32_t value) {
  _internal_set_layout_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.GetVideoLayoutInfoRes.layout_id)
}

// uint32 windows = 4;
inline void GetVideoLayoutInfoRes::clear_windows() {
  windows_ = 0u;
}
inline uint32_t GetVideoLayoutInfoRes::_internal_windows() const {
  return windows_;
}
inline uint32_t GetVideoLayoutInfoRes::windows() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetVideoLayoutInfoRes.windows)
  return _internal_windows();
}
inline void GetVideoLayoutInfoRes::_internal_set_windows(uint32_t value) {
  
  windows_ = value;
}
inline void GetVideoLayoutInfoRes::set_windows(uint32_t value) {
  _internal_set_windows(value);
  // @@protoc_insertion_point(field_set:ccs_msg.GetVideoLayoutInfoRes.windows)
}

// -------------------------------------------------------------------

// SetVideoLayoutReq

// .ccs_msg.MsgHeader header = 1;
inline bool SetVideoLayoutReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetVideoLayoutReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& SetVideoLayoutReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& SetVideoLayoutReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutReq.header)
  return _internal_header();
}
inline void SetVideoLayoutReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.SetVideoLayoutReq.header)
}
inline ::ccs_msg::MsgHeader* SetVideoLayoutReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* SetVideoLayoutReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetVideoLayoutReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* SetVideoLayoutReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* SetVideoLayoutReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetVideoLayoutReq.header)
  return _msg;
}
inline void SetVideoLayoutReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetVideoLayoutReq.header)
}

// string roomID = 2;
inline void SetVideoLayoutReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& SetVideoLayoutReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetVideoLayoutReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.SetVideoLayoutReq.roomID)
}
inline std::string* SetVideoLayoutReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetVideoLayoutReq.roomID)
  return _s;
}
inline const std::string& SetVideoLayoutReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void SetVideoLayoutReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* SetVideoLayoutReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* SetVideoLayoutReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetVideoLayoutReq.roomID)
  return roomid_.Release();
}
inline void SetVideoLayoutReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetVideoLayoutReq.roomID)
}

// uint32 mixerID = 3;
inline void SetVideoLayoutReq::clear_mixerid() {
  mixerid_ = 0u;
}
inline uint32_t SetVideoLayoutReq::_internal_mixerid() const {
  return mixerid_;
}
inline uint32_t SetVideoLayoutReq::mixerid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutReq.mixerID)
  return _internal_mixerid();
}
inline void SetVideoLayoutReq::_internal_set_mixerid(uint32_t value) {
  
  mixerid_ = value;
}
inline void SetVideoLayoutReq::set_mixerid(uint32_t value) {
  _internal_set_mixerid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SetVideoLayoutReq.mixerID)
}

// uint32 layoutID = 4;
inline void SetVideoLayoutReq::clear_layoutid() {
  layoutid_ = 0u;
}
inline uint32_t SetVideoLayoutReq::_internal_layoutid() const {
  return layoutid_;
}
inline uint32_t SetVideoLayoutReq::layoutid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutReq.layoutID)
  return _internal_layoutid();
}
inline void SetVideoLayoutReq::_internal_set_layoutid(uint32_t value) {
  
  layoutid_ = value;
}
inline void SetVideoLayoutReq::set_layoutid(uint32_t value) {
  _internal_set_layoutid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SetVideoLayoutReq.layoutID)
}

// -------------------------------------------------------------------

// SetVideoLayoutRes

// .ccs_msg.ResultInfo result = 1;
inline bool SetVideoLayoutRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetVideoLayoutRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& SetVideoLayoutRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& SetVideoLayoutRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutRes.result)
  return _internal_result();
}
inline void SetVideoLayoutRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.SetVideoLayoutRes.result)
}
inline ::ccs_msg::ResultInfo* SetVideoLayoutRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* SetVideoLayoutRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetVideoLayoutRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* SetVideoLayoutRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* SetVideoLayoutRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetVideoLayoutRes.result)
  return _msg;
}
inline void SetVideoLayoutRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetVideoLayoutRes.result)
}

// string roomID = 2;
inline void SetVideoLayoutRes::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& SetVideoLayoutRes::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutRes.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetVideoLayoutRes::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.SetVideoLayoutRes.roomID)
}
inline std::string* SetVideoLayoutRes::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetVideoLayoutRes.roomID)
  return _s;
}
inline const std::string& SetVideoLayoutRes::_internal_roomid() const {
  return roomid_.Get();
}
inline void SetVideoLayoutRes::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* SetVideoLayoutRes::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* SetVideoLayoutRes::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetVideoLayoutRes.roomID)
  return roomid_.Release();
}
inline void SetVideoLayoutRes::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetVideoLayoutRes.roomID)
}

// uint32 mixerID = 3;
inline void SetVideoLayoutRes::clear_mixerid() {
  mixerid_ = 0u;
}
inline uint32_t SetVideoLayoutRes::_internal_mixerid() const {
  return mixerid_;
}
inline uint32_t SetVideoLayoutRes::mixerid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutRes.mixerID)
  return _internal_mixerid();
}
inline void SetVideoLayoutRes::_internal_set_mixerid(uint32_t value) {
  
  mixerid_ = value;
}
inline void SetVideoLayoutRes::set_mixerid(uint32_t value) {
  _internal_set_mixerid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SetVideoLayoutRes.mixerID)
}

// uint32 layoutID = 4;
inline void SetVideoLayoutRes::clear_layoutid() {
  layoutid_ = 0u;
}
inline uint32_t SetVideoLayoutRes::_internal_layoutid() const {
  return layoutid_;
}
inline uint32_t SetVideoLayoutRes::layoutid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetVideoLayoutRes.layoutID)
  return _internal_layoutid();
}
inline void SetVideoLayoutRes::_internal_set_layoutid(uint32_t value) {
  
  layoutid_ = value;
}
inline void SetVideoLayoutRes::set_layoutid(uint32_t value) {
  _internal_set_layoutid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SetVideoLayoutRes.layoutID)
}

// -------------------------------------------------------------------

// GetMembersInfoReq

// .ccs_msg.MsgHeader header = 1;
inline bool GetMembersInfoReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetMembersInfoReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& GetMembersInfoReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& GetMembersInfoReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetMembersInfoReq.header)
  return _internal_header();
}
inline void GetMembersInfoReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.GetMembersInfoReq.header)
}
inline ::ccs_msg::MsgHeader* GetMembersInfoReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* GetMembersInfoReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetMembersInfoReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* GetMembersInfoReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* GetMembersInfoReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetMembersInfoReq.header)
  return _msg;
}
inline void GetMembersInfoReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetMembersInfoReq.header)
}

// string roomID = 2;
inline void GetMembersInfoReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& GetMembersInfoReq::roomid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetMembersInfoReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMembersInfoReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.GetMembersInfoReq.roomID)
}
inline std::string* GetMembersInfoReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetMembersInfoReq.roomID)
  return _s;
}
inline const std::string& GetMembersInfoReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void GetMembersInfoReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMembersInfoReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMembersInfoReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetMembersInfoReq.roomID)
  return roomid_.Release();
}
inline void GetMembersInfoReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault()) {
    roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetMembersInfoReq.roomID)
}

// uint32 mixerID = 3;
inline void GetMembersInfoReq::clear_mixerid() {
  mixerid_ = 0u;
}
inline uint32_t GetMembersInfoReq::_internal_mixerid() const {
  return mixerid_;
}
inline uint32_t GetMembersInfoReq::mixerid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetMembersInfoReq.mixerID)
  return _internal_mixerid();
}
inline void GetMembersInfoReq::_internal_set_mixerid(uint32_t value) {
  
  mixerid_ = value;
}
inline void GetMembersInfoReq::set_mixerid(uint32_t value) {
  _internal_set_mixerid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.GetMembersInfoReq.mixerID)
}

// -------------------------------------------------------------------

// MemberInfo

// bytes combin_name = 1;
inline void MemberInfo::clear_combin_name() {
  combin_name_.ClearToEmpty();
}
inline const std::string& MemberInfo::combin_name() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.combin_name)
  return _internal_combin_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberInfo::set_combin_name(ArgT0&& arg0, ArgT... args) {
 
 combin_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.combin_name)
}
inline std::string* MemberInfo::mutable_combin_name() {
  std::string* _s = _internal_mutable_combin_name();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MemberInfo.combin_name)
  return _s;
}
inline const std::string& MemberInfo::_internal_combin_name() const {
  return combin_name_.Get();
}
inline void MemberInfo::_internal_set_combin_name(const std::string& value) {
  
  combin_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MemberInfo::_internal_mutable_combin_name() {
  
  return combin_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MemberInfo::release_combin_name() {
  // @@protoc_insertion_point(field_release:ccs_msg.MemberInfo.combin_name)
  return combin_name_.Release();
}
inline void MemberInfo::set_allocated_combin_name(std::string* combin_name) {
  if (combin_name != nullptr) {
    
  } else {
    
  }
  combin_name_.SetAllocated(combin_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combin_name_.IsDefault()) {
    combin_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MemberInfo.combin_name)
}

// uint32 member_id = 2;
inline void MemberInfo::clear_member_id() {
  member_id_ = 0u;
}
inline uint32_t MemberInfo::_internal_member_id() const {
  return member_id_;
}
inline uint32_t MemberInfo::member_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.member_id)
  return _internal_member_id();
}
inline void MemberInfo::_internal_set_member_id(uint32_t value) {
  
  member_id_ = value;
}
inline void MemberInfo::set_member_id(uint32_t value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.member_id)
}

// bool is_active = 3;
inline void MemberInfo::clear_is_active() {
  is_active_ = false;
}
inline bool MemberInfo::_internal_is_active() const {
  return is_active_;
}
inline bool MemberInfo::is_active() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_active)
  return _internal_is_active();
}
inline void MemberInfo::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void MemberInfo::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_active)
}

// .ccs_msg.RoleType role_type = 4;
inline void MemberInfo::clear_role_type() {
  role_type_ = 0;
}
inline ::ccs_msg::RoleType MemberInfo::_internal_role_type() const {
  return static_cast< ::ccs_msg::RoleType >(role_type_);
}
inline ::ccs_msg::RoleType MemberInfo::role_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.role_type)
  return _internal_role_type();
}
inline void MemberInfo::_internal_set_role_type(::ccs_msg::RoleType value) {
  
  role_type_ = value;
}
inline void MemberInfo::set_role_type(::ccs_msg::RoleType value) {
  _internal_set_role_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.role_type)
}

// bool is_sound_receive_mute = 5;
inline void MemberInfo::clear_is_sound_receive_mute() {
  is_sound_receive_mute_ = false;
}
inline bool MemberInfo::_internal_is_sound_receive_mute() const {
  return is_sound_receive_mute_;
}
inline bool MemberInfo::is_sound_receive_mute() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_sound_receive_mute)
  return _internal_is_sound_receive_mute();
}
inline void MemberInfo::_internal_set_is_sound_receive_mute(bool value) {
  
  is_sound_receive_mute_ = value;
}
inline void MemberInfo::set_is_sound_receive_mute(bool value) {
  _internal_set_is_sound_receive_mute(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_sound_receive_mute)
}

// bool is_sound_transmit_mute = 6;
inline void MemberInfo::clear_is_sound_transmit_mute() {
  is_sound_transmit_mute_ = false;
}
inline bool MemberInfo::_internal_is_sound_transmit_mute() const {
  return is_sound_transmit_mute_;
}
inline bool MemberInfo::is_sound_transmit_mute() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_sound_transmit_mute)
  return _internal_is_sound_transmit_mute();
}
inline void MemberInfo::_internal_set_is_sound_transmit_mute(bool value) {
  
  is_sound_transmit_mute_ = value;
}
inline void MemberInfo::set_is_sound_transmit_mute(bool value) {
  _internal_set_is_sound_transmit_mute(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_sound_transmit_mute)
}

// bool is_video_receive_mute = 7;
inline void MemberInfo::clear_is_video_receive_mute() {
  is_video_receive_mute_ = false;
}
inline bool MemberInfo::_internal_is_video_receive_mute() const {
  return is_video_receive_mute_;
}
inline bool MemberInfo::is_video_receive_mute() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_video_receive_mute)
  return _internal_is_video_receive_mute();
}
inline void MemberInfo::_internal_set_is_video_receive_mute(bool value) {
  
  is_video_receive_mute_ = value;
}
inline void MemberInfo::set_is_video_receive_mute(bool value) {
  _internal_set_is_video_receive_mute(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_video_receive_mute)
}

// bool is_video_transmit_mute = 8;
inline void MemberInfo::clear_is_video_transmit_mute() {
  is_video_transmit_mute_ = false;
}
inline bool MemberInfo::_internal_is_video_transmit_mute() const {
  return is_video_transmit_mute_;
}
inline bool MemberInfo::is_video_transmit_mute() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_video_transmit_mute)
  return _internal_is_video_transmit_mute();
}
inline void MemberInfo::_internal_set_is_video_transmit_mute(bool value) {
  
  is_video_transmit_mute_ = value;
}
inline void MemberInfo::set_is_video_transmit_mute(bool value) {
  _internal_set_is_video_transmit_mute(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_video_transmit_mute)
}

// bool enable_vad = 9;
inline void MemberInfo::clear_enable_vad() {
  enable_vad_ = false;
}
inline bool MemberInfo::_internal_enable_vad() const {
  return enable_vad_;
}
inline bool MemberInfo::enable_vad() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.enable_vad)
  return _internal_enable_vad();
}
inline void MemberInfo::_internal_set_enable_vad(bool value) {
  
  enable_vad_ = value;
}
inline void MemberInfo::set_enable_vad(bool value) {
  _internal_set_enable_vad(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.enable_vad)
}

// uint32 audio_level = 10;
inline void MemberInfo::clear_audio_level() {
  audio_level_ = 0u;
}
inline uint32_t MemberInfo::_internal_audio_level() const {
  return audio_level_;
}
inline uint32_t MemberInfo::audio_level() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.audio_level)
  return _internal_audio_level();
}
inline void MemberInfo::_internal_set_audio_level(uint32_t value) {
  
  audio_level_ = value;
}
inline void MemberInfo::set_audio_level(uint32_t value) {
  _internal_set_audio_level(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.audio_level)
}

// uint32 manual_gain_db = 11;
inline void MemberInfo::clear_manual_gain_db() {
  manual_gain_db_ = 0u;
}
inline uint32_t MemberInfo::_internal_manual_gain_db() const {
  return manual_gain_db_;
}
inline uint32_t MemberInfo::manual_gain_db() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.manual_gain_db)
  return _internal_manual_gain_db();
}
inline void MemberInfo::_internal_set_manual_gain_db(uint32_t value) {
  
  manual_gain_db_ = value;
}
inline void MemberInfo::set_manual_gain_db(uint32_t value) {
  _internal_set_manual_gain_db(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.manual_gain_db)
}

// uint32 output_gain_db = 12;
inline void MemberInfo::clear_output_gain_db() {
  output_gain_db_ = 0u;
}
inline uint32_t MemberInfo::_internal_output_gain_db() const {
  return output_gain_db_;
}
inline uint32_t MemberInfo::output_gain_db() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.output_gain_db)
  return _internal_output_gain_db();
}
inline void MemberInfo::_internal_set_output_gain_db(uint32_t value) {
  
  output_gain_db_ = value;
}
inline void MemberInfo::set_output_gain_db(uint32_t value) {
  _internal_set_output_gain_db(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.output_gain_db)
}

// uint32 window_position = 13;
inline void MemberInfo::clear_window_position() {
  window_position_ = 0u;
}
inline uint32_t MemberInfo::_internal_window_position() const {
  return window_position_;
}
inline uint32_t MemberInfo::window_position() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.window_position)
  return _internal_window_position();
}
inline void MemberInfo::_internal_set_window_position(uint32_t value) {
  
  window_position_ = value;
}
inline void MemberInfo::set_window_position(uint32_t value) {
  _internal_set_window_position(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.window_position)
}

// uint32 exwindow_position = 14;
inline void MemberInfo::clear_exwindow_position() {
  exwindow_position_ = 0u;
}
inline uint32_t MemberInfo::_internal_exwindow_position() const {
  return exwindow_position_;
}
inline uint32_t MemberInfo::exwindow_position() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.exwindow_position)
  return _internal_exwindow_position();
}
inline void MemberInfo::_internal_set_exwindow_position(uint32_t value) {
  
  exwindow_position_ = value;
}
inline void MemberInfo::set_exwindow_position(uint32_t value) {
  _internal_set_exwindow_position(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.exwindow_position)
}

// uint32 video_channel_id = 15;
inline void MemberInfo::clear_video_channel_id() {
  video_channel_id_ = 0u;
}
inline uint32_t MemberInfo::_internal_video_channel_id() const {
  return video_channel_id_;
}
inline uint32_t MemberInfo::video_channel_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.video_channel_id)
  return _internal_video_channel_id();
}
inline void MemberInfo::_internal_set_video_channel_id(uint32_t value) {
  
  video_channel_id_ = value;
}
inline void MemberInfo::set_video_channel_id(uint32_t value) {
  _internal_set_video_channel_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.video_channel_id)
}

// bool is_chairman = 16;
inline void MemberInfo::clear_is_chairman() {
  is_chairman_ = false;
}
inline bool MemberInfo::_internal_is_chairman() const {
  return is_chairman_;
}
inline bool MemberInfo::is_chairman() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_chairman)
  return _internal_is_chairman();
}
inline void MemberInfo::_internal_set_is_chairman(bool value) {
  
  is_chairman_ = value;
}
inline void MemberInfo::set_is_chairman(bool value) {
  _internal_set_is_chairman(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_chairman)
}

// bool is_H239_privilege = 17;
inline void MemberInfo::clear_is_h239_privilege() {
  is_h239_privilege_ = false;
}
inline bool MemberInfo::_internal_is_h239_privilege() const {
  return is_h239_privilege_;
}
inline bool MemberInfo::is_h239_privilege() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_H239_privilege)
  return _internal_is_h239_privilege();
}
inline void MemberInfo::_internal_set_is_h239_privilege(bool value) {
  
  is_h239_privilege_ = value;
}
inline void MemberInfo::set_is_h239_privilege(bool value) {
  _internal_set_is_h239_privilege(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_H239_privilege)
}

// bool is_H239_share = 18;
inline void MemberInfo::clear_is_h239_share() {
  is_h239_share_ = false;
}
inline bool MemberInfo::_internal_is_h239_share() const {
  return is_h239_share_;
}
inline bool MemberInfo::is_h239_share() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_H239_share)
  return _internal_is_h239_share();
}
inline void MemberInfo::_internal_set_is_h239_share(bool value) {
  
  is_h239_share_ = value;
}
inline void MemberInfo::set_is_h239_share(bool value) {
  _internal_set_is_h239_share(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_H239_share)
}

// bool is_H239_permission = 19;
inline void MemberInfo::clear_is_h239_permission() {
  is_h239_permission_ = false;
}
inline bool MemberInfo::_internal_is_h239_permission() const {
  return is_h239_permission_;
}
inline bool MemberInfo::is_h239_permission() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_H239_permission)
  return _internal_is_h239_permission();
}
inline void MemberInfo::_internal_set_is_h239_permission(bool value) {
  
  is_h239_permission_ = value;
}
inline void MemberInfo::set_is_h239_permission(bool value) {
  _internal_set_is_h239_permission(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_H239_permission)
}

// bool is_mcu = 20;
inline void MemberInfo::clear_is_mcu() {
  is_mcu_ = false;
}
inline bool MemberInfo::_internal_is_mcu() const {
  return is_mcu_;
}
inline bool MemberInfo::is_mcu() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_mcu)
  return _internal_is_mcu();
}
inline void MemberInfo::_internal_set_is_mcu(bool value) {
  
  is_mcu_ = value;
}
inline void MemberInfo::set_is_mcu(bool value) {
  _internal_set_is_mcu(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_mcu)
}

// bool is_anonymouse = 21;
inline void MemberInfo::clear_is_anonymouse() {
  is_anonymouse_ = false;
}
inline bool MemberInfo::_internal_is_anonymouse() const {
  return is_anonymouse_;
}
inline bool MemberInfo::is_anonymouse() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_anonymouse)
  return _internal_is_anonymouse();
}
inline void MemberInfo::_internal_set_is_anonymouse(bool value) {
  
  is_anonymouse_ = value;
}
inline void MemberInfo::set_is_anonymouse(bool value) {
  _internal_set_is_anonymouse(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_anonymouse)
}

// bool is_in_blacklist = 22;
inline void MemberInfo::clear_is_in_blacklist() {
  is_in_blacklist_ = false;
}
inline bool MemberInfo::_internal_is_in_blacklist() const {
  return is_in_blacklist_;
}
inline bool MemberInfo::is_in_blacklist() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_in_blacklist)
  return _internal_is_in_blacklist();
}
inline void MemberInfo::_internal_set_is_in_blacklist(bool value) {
  
  is_in_blacklist_ = value;
}
inline void MemberInfo::set_is_in_blacklist(bool value) {
  _internal_set_is_in_blacklist(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_in_blacklist)
}

// uint32 video_source_id = 23;
inline void MemberInfo::clear_video_source_id() {
  video_source_id_ = 0u;
}
inline uint32_t MemberInfo::_internal_video_source_id() const {
  return video_source_id_;
}
inline uint32_t MemberInfo::video_source_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.video_source_id)
  return _internal_video_source_id();
}
inline void MemberInfo::_internal_set_video_source_id(uint32_t value) {
  
  video_source_id_ = value;
}
inline void MemberInfo::set_video_source_id(uint32_t value) {
  _internal_set_video_source_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.video_source_id)
}

// .ccs_msg.ConnectionStatus connection_status = 24;
inline void MemberInfo::clear_connection_status() {
  connection_status_ = 0;
}
inline ::ccs_msg::ConnectionStatus MemberInfo::_internal_connection_status() const {
  return static_cast< ::ccs_msg::ConnectionStatus >(connection_status_);
}
inline ::ccs_msg::ConnectionStatus MemberInfo::connection_status() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.connection_status)
  return _internal_connection_status();
}
inline void MemberInfo::_internal_set_connection_status(::ccs_msg::ConnectionStatus value) {
  
  connection_status_ = value;
}
inline void MemberInfo::set_connection_status(::ccs_msg::ConnectionStatus value) {
  _internal_set_connection_status(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.connection_status)
}

// bool is_vcs_user = 25;
inline void MemberInfo::clear_is_vcs_user() {
  is_vcs_user_ = false;
}
inline bool MemberInfo::_internal_is_vcs_user() const {
  return is_vcs_user_;
}
inline bool MemberInfo::is_vcs_user() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_vcs_user)
  return _internal_is_vcs_user();
}
inline void MemberInfo::_internal_set_is_vcs_user(bool value) {
  
  is_vcs_user_ = value;
}
inline void MemberInfo::set_is_vcs_user(bool value) {
  _internal_set_is_vcs_user(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_vcs_user)
}

// string vcs_account = 26;
inline void MemberInfo::clear_vcs_account() {
  vcs_account_.ClearToEmpty();
}
inline const std::string& MemberInfo::vcs_account() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.vcs_account)
  return _internal_vcs_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemberInfo::set_vcs_account(ArgT0&& arg0, ArgT... args) {
 
 vcs_account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.vcs_account)
}
inline std::string* MemberInfo::mutable_vcs_account() {
  std::string* _s = _internal_mutable_vcs_account();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MemberInfo.vcs_account)
  return _s;
}
inline const std::string& MemberInfo::_internal_vcs_account() const {
  return vcs_account_.Get();
}
inline void MemberInfo::_internal_set_vcs_account(const std::string& value) {
  
  vcs_account_.Set(value, GetArenaForAllocation());
}
inline std::string* MemberInfo::_internal_mutable_vcs_account() {
  
  return vcs_account_.Mutable(GetArenaForAllocation());
}
inline std::string* MemberInfo::release_vcs_account() {
  // @@protoc_insertion_point(field_release:ccs_msg.MemberInfo.vcs_account)
  return vcs_account_.Release();
}
inline void MemberInfo::set_allocated_vcs_account(std::string* vcs_account) {
  if (vcs_account != nullptr) {
    
  } else {
    
  }
  vcs_account_.SetAllocated(vcs_account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vcs_account_.IsDefault()) {
    vcs_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MemberInfo.vcs_account)
}

// bool is_recording = 27;
inline void MemberInfo::clear_is_recording() {
  is_recording_ = false;
}
inline bool MemberInfo::_internal_is_recording() const {
  return is_recording_;
}
inline bool MemberInfo::is_recording() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.is_recording)
  return _internal_is_recording();
}
inline void MemberInfo::_internal_set_is_recording(bool value) {
  
  is_recording_ = value;
}
inline void MemberInfo::set_is_recording(bool value) {
  _internal_set_is_recording(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.is_recording)
}

// .ccs_msg.NetworkStatus network_status = 28;
inline void MemberInfo::clear_network_status() {
  network_status_ = 0;
}
inline ::ccs_msg::NetworkStatus MemberInfo::_internal_network_status() const {
  return static_cast< ::ccs_msg::NetworkStatus >(network_status_);
}
inline ::ccs_msg::NetworkStatus MemberInfo::network_status() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.network_status)
  return _internal_network_status();
}
inline void MemberInfo::_internal_set_network_status(::ccs_msg::NetworkStatus value) {
  
  network_status_ = value;
}
inline void MemberInfo::set_network_status(::ccs_msg::NetworkStatus value) {
  _internal_set_network_status(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.network_status)
}

// uint32 audio_source_id = 29;
inline void MemberInfo::clear_audio_source_id() {
  audio_source_id_ = 0u;
}
inline uint32_t MemberInfo::_internal_audio_source_id() const {
  return audio_source_id_;
}
inline uint32_t MemberInfo::audio_source_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MemberInfo.audio_source_id)
  return _internal_audio_source_id();
}
inline void MemberInfo::_internal_set_audio_source_id(uint32_t value) {
  
  audio_source_id_ = value;
}
inline void MemberInfo::set_audio_source_id(uint32_t value) {
  _internal_set_audio_source_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MemberInfo.audio_source_id)
}

// -------------------------------------------------------------------

// GetMembersInfoRes

// .ccs_msg.ResultInfo result = 1;
inline bool GetMembersInfoRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetMembersInfoRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& GetMembersInfoRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& GetMembersInfoRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetMembersInfoRes.result)
  return _internal_result();
}
inline void GetMembersInfoRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.GetMembersInfoRes.result)
}
inline ::ccs_msg::ResultInfo* GetMembersInfoRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* GetMembersInfoRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.GetMembersInfoRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* GetMembersInfoRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* GetMembersInfoRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetMembersInfoRes.result)
  return _msg;
}
inline void GetMembersInfoRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.GetMembersInfoRes.result)
}

// repeated .ccs_msg.MemberInfo member_info_list = 2;
inline int GetMembersInfoRes::_internal_member_info_list_size() const {
  return member_info_list_.size();
}
inline int GetMembersInfoRes::member_info_list_size() const {
  return _internal_member_info_list_size();
}
inline void GetMembersInfoRes::clear_member_info_list() {
  member_info_list_.Clear();
}
inline ::ccs_msg::MemberInfo* GetMembersInfoRes::mutable_member_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.GetMembersInfoRes.member_info_list)
  return member_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MemberInfo >*
GetMembersInfoRes::mutable_member_info_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.GetMembersInfoRes.member_info_list)
  return &member_info_list_;
}
inline const ::ccs_msg::MemberInfo& GetMembersInfoRes::_internal_member_info_list(int index) const {
  return member_info_list_.Get(index);
}
inline const ::ccs_msg::MemberInfo& GetMembersInfoRes::member_info_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.GetMembersInfoRes.member_info_list)
  return _internal_member_info_list(index);
}
inline ::ccs_msg::MemberInfo* GetMembersInfoRes::_internal_add_member_info_list() {
  return member_info_list_.Add();
}
inline ::ccs_msg::MemberInfo* GetMembersInfoRes::add_member_info_list() {
  ::ccs_msg::MemberInfo* _add = _internal_add_member_info_list();
  // @@protoc_insertion_point(field_add:ccs_msg.GetMembersInfoRes.member_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MemberInfo >&
GetMembersInfoRes::member_info_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.GetMembersInfoRes.member_info_list)
  return member_info_list_;
}

// -------------------------------------------------------------------

// RecordReqInfo

// uint32 recorder_video_src_id = 1;
inline void RecordReqInfo::clear_recorder_video_src_id() {
  recorder_video_src_id_ = 0u;
}
inline uint32_t RecordReqInfo::_internal_recorder_video_src_id() const {
  return recorder_video_src_id_;
}
inline uint32_t RecordReqInfo::recorder_video_src_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RecordReqInfo.recorder_video_src_id)
  return _internal_recorder_video_src_id();
}
inline void RecordReqInfo::_internal_set_recorder_video_src_id(uint32_t value) {
  
  recorder_video_src_id_ = value;
}
inline void RecordReqInfo::set_recorder_video_src_id(uint32_t value) {
  _internal_set_recorder_video_src_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.RecordReqInfo.recorder_video_src_id)
}

// uint32 recorder_video_quality_id = 2;
inline void RecordReqInfo::clear_recorder_video_quality_id() {
  recorder_video_quality_id_ = 0u;
}
inline uint32_t RecordReqInfo::_internal_recorder_video_quality_id() const {
  return recorder_video_quality_id_;
}
inline uint32_t RecordReqInfo::recorder_video_quality_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RecordReqInfo.recorder_video_quality_id)
  return _internal_recorder_video_quality_id();
}
inline void RecordReqInfo::_internal_set_recorder_video_quality_id(uint32_t value) {
  
  recorder_video_quality_id_ = value;
}
inline void RecordReqInfo::set_recorder_video_quality_id(uint32_t value) {
  _internal_set_recorder_video_quality_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.RecordReqInfo.recorder_video_quality_id)
}

// -------------------------------------------------------------------

// StartRecordReq

// .ccs_msg.MsgHeader header = 1;
inline bool StartRecordReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StartRecordReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& StartRecordReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& StartRecordReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StartRecordReq.header)
  return _internal_header();
}
inline void StartRecordReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.StartRecordReq.header)
}
inline ::ccs_msg::MsgHeader* StartRecordReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* StartRecordReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.StartRecordReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* StartRecordReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* StartRecordReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.StartRecordReq.header)
  return _msg;
}
inline void StartRecordReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.StartRecordReq.header)
}

// string room_id = 2;
inline void StartRecordReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& StartRecordReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StartRecordReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartRecordReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.StartRecordReq.room_id)
}
inline std::string* StartRecordReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.StartRecordReq.room_id)
  return _s;
}
inline const std::string& StartRecordReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void StartRecordReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StartRecordReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StartRecordReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.StartRecordReq.room_id)
  return room_id_.Release();
}
inline void StartRecordReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.StartRecordReq.room_id)
}

// repeated .ccs_msg.RecordReqInfo record_info_list = 3;
inline int StartRecordReq::_internal_record_info_list_size() const {
  return record_info_list_.size();
}
inline int StartRecordReq::record_info_list_size() const {
  return _internal_record_info_list_size();
}
inline void StartRecordReq::clear_record_info_list() {
  record_info_list_.Clear();
}
inline ::ccs_msg::RecordReqInfo* StartRecordReq::mutable_record_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.StartRecordReq.record_info_list)
  return record_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordReqInfo >*
StartRecordReq::mutable_record_info_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.StartRecordReq.record_info_list)
  return &record_info_list_;
}
inline const ::ccs_msg::RecordReqInfo& StartRecordReq::_internal_record_info_list(int index) const {
  return record_info_list_.Get(index);
}
inline const ::ccs_msg::RecordReqInfo& StartRecordReq::record_info_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.StartRecordReq.record_info_list)
  return _internal_record_info_list(index);
}
inline ::ccs_msg::RecordReqInfo* StartRecordReq::_internal_add_record_info_list() {
  return record_info_list_.Add();
}
inline ::ccs_msg::RecordReqInfo* StartRecordReq::add_record_info_list() {
  ::ccs_msg::RecordReqInfo* _add = _internal_add_record_info_list();
  // @@protoc_insertion_point(field_add:ccs_msg.StartRecordReq.record_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordReqInfo >&
StartRecordReq::record_info_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.StartRecordReq.record_info_list)
  return record_info_list_;
}

// -------------------------------------------------------------------

// RecordResInfo

// uint32 recorder_video_src_id = 1;
inline void RecordResInfo::clear_recorder_video_src_id() {
  recorder_video_src_id_ = 0u;
}
inline uint32_t RecordResInfo::_internal_recorder_video_src_id() const {
  return recorder_video_src_id_;
}
inline uint32_t RecordResInfo::recorder_video_src_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RecordResInfo.recorder_video_src_id)
  return _internal_recorder_video_src_id();
}
inline void RecordResInfo::_internal_set_recorder_video_src_id(uint32_t value) {
  
  recorder_video_src_id_ = value;
}
inline void RecordResInfo::set_recorder_video_src_id(uint32_t value) {
  _internal_set_recorder_video_src_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.RecordResInfo.recorder_video_src_id)
}

// string file_name = 2;
inline void RecordResInfo::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& RecordResInfo::file_name() const {
  // @@protoc_insertion_point(field_get:ccs_msg.RecordResInfo.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordResInfo::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.RecordResInfo.file_name)
}
inline std::string* RecordResInfo::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:ccs_msg.RecordResInfo.file_name)
  return _s;
}
inline const std::string& RecordResInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void RecordResInfo::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordResInfo::_internal_mutable_file_name() {
  
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordResInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:ccs_msg.RecordResInfo.file_name)
  return file_name_.Release();
}
inline void RecordResInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.RecordResInfo.file_name)
}

// -------------------------------------------------------------------

// StartRecordRes

// .ccs_msg.ResultInfo result = 1;
inline bool StartRecordRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StartRecordRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& StartRecordRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& StartRecordRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StartRecordRes.result)
  return _internal_result();
}
inline void StartRecordRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.StartRecordRes.result)
}
inline ::ccs_msg::ResultInfo* StartRecordRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* StartRecordRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.StartRecordRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* StartRecordRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* StartRecordRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.StartRecordRes.result)
  return _msg;
}
inline void StartRecordRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.StartRecordRes.result)
}

// repeated .ccs_msg.RecordResInfo record_info_list = 2;
inline int StartRecordRes::_internal_record_info_list_size() const {
  return record_info_list_.size();
}
inline int StartRecordRes::record_info_list_size() const {
  return _internal_record_info_list_size();
}
inline void StartRecordRes::clear_record_info_list() {
  record_info_list_.Clear();
}
inline ::ccs_msg::RecordResInfo* StartRecordRes::mutable_record_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.StartRecordRes.record_info_list)
  return record_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordResInfo >*
StartRecordRes::mutable_record_info_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.StartRecordRes.record_info_list)
  return &record_info_list_;
}
inline const ::ccs_msg::RecordResInfo& StartRecordRes::_internal_record_info_list(int index) const {
  return record_info_list_.Get(index);
}
inline const ::ccs_msg::RecordResInfo& StartRecordRes::record_info_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.StartRecordRes.record_info_list)
  return _internal_record_info_list(index);
}
inline ::ccs_msg::RecordResInfo* StartRecordRes::_internal_add_record_info_list() {
  return record_info_list_.Add();
}
inline ::ccs_msg::RecordResInfo* StartRecordRes::add_record_info_list() {
  ::ccs_msg::RecordResInfo* _add = _internal_add_record_info_list();
  // @@protoc_insertion_point(field_add:ccs_msg.StartRecordRes.record_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::RecordResInfo >&
StartRecordRes::record_info_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.StartRecordRes.record_info_list)
  return record_info_list_;
}

// -------------------------------------------------------------------

// StopRecordReq

// .ccs_msg.MsgHeader header = 1;
inline bool StopRecordReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StopRecordReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& StopRecordReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& StopRecordReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StopRecordReq.header)
  return _internal_header();
}
inline void StopRecordReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.StopRecordReq.header)
}
inline ::ccs_msg::MsgHeader* StopRecordReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* StopRecordReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.StopRecordReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* StopRecordReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* StopRecordReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.StopRecordReq.header)
  return _msg;
}
inline void StopRecordReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.StopRecordReq.header)
}

// string room_id = 2;
inline void StopRecordReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& StopRecordReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StopRecordReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopRecordReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.StopRecordReq.room_id)
}
inline std::string* StopRecordReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.StopRecordReq.room_id)
  return _s;
}
inline const std::string& StopRecordReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void StopRecordReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StopRecordReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StopRecordReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.StopRecordReq.room_id)
  return room_id_.Release();
}
inline void StopRecordReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.StopRecordReq.room_id)
}

// uint32 recorderVideoSrcId = 3;
inline void StopRecordReq::clear_recordervideosrcid() {
  recordervideosrcid_ = 0u;
}
inline uint32_t StopRecordReq::_internal_recordervideosrcid() const {
  return recordervideosrcid_;
}
inline uint32_t StopRecordReq::recordervideosrcid() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StopRecordReq.recorderVideoSrcId)
  return _internal_recordervideosrcid();
}
inline void StopRecordReq::_internal_set_recordervideosrcid(uint32_t value) {
  
  recordervideosrcid_ = value;
}
inline void StopRecordReq::set_recordervideosrcid(uint32_t value) {
  _internal_set_recordervideosrcid(value);
  // @@protoc_insertion_point(field_set:ccs_msg.StopRecordReq.recorderVideoSrcId)
}

// -------------------------------------------------------------------

// StopRecordRes

// .ccs_msg.ResultInfo result = 1;
inline bool StopRecordRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool StopRecordRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& StopRecordRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& StopRecordRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.StopRecordRes.result)
  return _internal_result();
}
inline void StopRecordRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.StopRecordRes.result)
}
inline ::ccs_msg::ResultInfo* StopRecordRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* StopRecordRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.StopRecordRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* StopRecordRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* StopRecordRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.StopRecordRes.result)
  return _msg;
}
inline void StopRecordRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.StopRecordRes.result)
}

// -------------------------------------------------------------------

// MuteMemberReq

// .ccs_msg.MsgHeader header = 1;
inline bool MuteMemberReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MuteMemberReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& MuteMemberReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& MuteMemberReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteMemberReq.header)
  return _internal_header();
}
inline void MuteMemberReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MuteMemberReq.header)
}
inline ::ccs_msg::MsgHeader* MuteMemberReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* MuteMemberReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.MuteMemberReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* MuteMemberReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* MuteMemberReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MuteMemberReq.header)
  return _msg;
}
inline void MuteMemberReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MuteMemberReq.header)
}

// string room_id = 2;
inline void MuteMemberReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& MuteMemberReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteMemberReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MuteMemberReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MuteMemberReq.room_id)
}
inline std::string* MuteMemberReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MuteMemberReq.room_id)
  return _s;
}
inline const std::string& MuteMemberReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void MuteMemberReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MuteMemberReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MuteMemberReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.MuteMemberReq.room_id)
  return room_id_.Release();
}
inline void MuteMemberReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MuteMemberReq.room_id)
}

// repeated int32 member_id_list = 3;
inline int MuteMemberReq::_internal_member_id_list_size() const {
  return member_id_list_.size();
}
inline int MuteMemberReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void MuteMemberReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline int32_t MuteMemberReq::_internal_member_id_list(int index) const {
  return member_id_list_.Get(index);
}
inline int32_t MuteMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteMemberReq.member_id_list)
  return _internal_member_id_list(index);
}
inline void MuteMemberReq::set_member_id_list(int index, int32_t value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:ccs_msg.MuteMemberReq.member_id_list)
}
inline void MuteMemberReq::_internal_add_member_id_list(int32_t value) {
  member_id_list_.Add(value);
}
inline void MuteMemberReq::add_member_id_list(int32_t value) {
  _internal_add_member_id_list(value);
  // @@protoc_insertion_point(field_add:ccs_msg.MuteMemberReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MuteMemberReq::_internal_member_id_list() const {
  return member_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
MuteMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.MuteMemberReq.member_id_list)
  return _internal_member_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MuteMemberReq::_internal_mutable_member_id_list() {
  return &member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
MuteMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.MuteMemberReq.member_id_list)
  return _internal_mutable_member_id_list();
}

// .ccs_msg.MuteType mute_type = 4;
inline void MuteMemberReq::clear_mute_type() {
  mute_type_ = 0;
}
inline ::ccs_msg::MuteType MuteMemberReq::_internal_mute_type() const {
  return static_cast< ::ccs_msg::MuteType >(mute_type_);
}
inline ::ccs_msg::MuteType MuteMemberReq::mute_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteMemberReq.mute_type)
  return _internal_mute_type();
}
inline void MuteMemberReq::_internal_set_mute_type(::ccs_msg::MuteType value) {
  
  mute_type_ = value;
}
inline void MuteMemberReq::set_mute_type(::ccs_msg::MuteType value) {
  _internal_set_mute_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MuteMemberReq.mute_type)
}

// -------------------------------------------------------------------

// MuteMemberRes

// .ccs_msg.ResultInfo result = 1;
inline bool MuteMemberRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MuteMemberRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& MuteMemberRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& MuteMemberRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteMemberRes.result)
  return _internal_result();
}
inline void MuteMemberRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MuteMemberRes.result)
}
inline ::ccs_msg::ResultInfo* MuteMemberRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* MuteMemberRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.MuteMemberRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* MuteMemberRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* MuteMemberRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MuteMemberRes.result)
  return _msg;
}
inline void MuteMemberRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MuteMemberRes.result)
}

// -------------------------------------------------------------------

// UnmuteMemberReq

// .ccs_msg.MsgHeader header = 1;
inline bool UnmuteMemberReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UnmuteMemberReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& UnmuteMemberReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& UnmuteMemberReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteMemberReq.header)
  return _internal_header();
}
inline void UnmuteMemberReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.UnmuteMemberReq.header)
}
inline ::ccs_msg::MsgHeader* UnmuteMemberReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* UnmuteMemberReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.UnmuteMemberReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* UnmuteMemberReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* UnmuteMemberReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.UnmuteMemberReq.header)
  return _msg;
}
inline void UnmuteMemberReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.UnmuteMemberReq.header)
}

// string room_id = 2;
inline void UnmuteMemberReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& UnmuteMemberReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteMemberReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnmuteMemberReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.UnmuteMemberReq.room_id)
}
inline std::string* UnmuteMemberReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.UnmuteMemberReq.room_id)
  return _s;
}
inline const std::string& UnmuteMemberReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void UnmuteMemberReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnmuteMemberReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnmuteMemberReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.UnmuteMemberReq.room_id)
  return room_id_.Release();
}
inline void UnmuteMemberReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.UnmuteMemberReq.room_id)
}

// repeated int32 member_id_list = 3;
inline int UnmuteMemberReq::_internal_member_id_list_size() const {
  return member_id_list_.size();
}
inline int UnmuteMemberReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void UnmuteMemberReq::clear_member_id_list() {
  member_id_list_.Clear();
}
inline int32_t UnmuteMemberReq::_internal_member_id_list(int index) const {
  return member_id_list_.Get(index);
}
inline int32_t UnmuteMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteMemberReq.member_id_list)
  return _internal_member_id_list(index);
}
inline void UnmuteMemberReq::set_member_id_list(int index, int32_t value) {
  member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:ccs_msg.UnmuteMemberReq.member_id_list)
}
inline void UnmuteMemberReq::_internal_add_member_id_list(int32_t value) {
  member_id_list_.Add(value);
}
inline void UnmuteMemberReq::add_member_id_list(int32_t value) {
  _internal_add_member_id_list(value);
  // @@protoc_insertion_point(field_add:ccs_msg.UnmuteMemberReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UnmuteMemberReq::_internal_member_id_list() const {
  return member_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UnmuteMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.UnmuteMemberReq.member_id_list)
  return _internal_member_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UnmuteMemberReq::_internal_mutable_member_id_list() {
  return &member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UnmuteMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.UnmuteMemberReq.member_id_list)
  return _internal_mutable_member_id_list();
}

// .ccs_msg.MuteType mute_type = 4;
inline void UnmuteMemberReq::clear_mute_type() {
  mute_type_ = 0;
}
inline ::ccs_msg::MuteType UnmuteMemberReq::_internal_mute_type() const {
  return static_cast< ::ccs_msg::MuteType >(mute_type_);
}
inline ::ccs_msg::MuteType UnmuteMemberReq::mute_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteMemberReq.mute_type)
  return _internal_mute_type();
}
inline void UnmuteMemberReq::_internal_set_mute_type(::ccs_msg::MuteType value) {
  
  mute_type_ = value;
}
inline void UnmuteMemberReq::set_mute_type(::ccs_msg::MuteType value) {
  _internal_set_mute_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.UnmuteMemberReq.mute_type)
}

// -------------------------------------------------------------------

// UnmuteMemberRes

// .ccs_msg.ResultInfo result = 1;
inline bool UnmuteMemberRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UnmuteMemberRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& UnmuteMemberRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& UnmuteMemberRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteMemberRes.result)
  return _internal_result();
}
inline void UnmuteMemberRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.UnmuteMemberRes.result)
}
inline ::ccs_msg::ResultInfo* UnmuteMemberRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* UnmuteMemberRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.UnmuteMemberRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* UnmuteMemberRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* UnmuteMemberRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.UnmuteMemberRes.result)
  return _msg;
}
inline void UnmuteMemberRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.UnmuteMemberRes.result)
}

// -------------------------------------------------------------------

// MuteAllMemberReq

// .ccs_msg.MsgHeader header = 1;
inline bool MuteAllMemberReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MuteAllMemberReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& MuteAllMemberReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& MuteAllMemberReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteAllMemberReq.header)
  return _internal_header();
}
inline void MuteAllMemberReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MuteAllMemberReq.header)
}
inline ::ccs_msg::MsgHeader* MuteAllMemberReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* MuteAllMemberReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.MuteAllMemberReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* MuteAllMemberReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* MuteAllMemberReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MuteAllMemberReq.header)
  return _msg;
}
inline void MuteAllMemberReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MuteAllMemberReq.header)
}

// string room_id = 2;
inline void MuteAllMemberReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& MuteAllMemberReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteAllMemberReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MuteAllMemberReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MuteAllMemberReq.room_id)
}
inline std::string* MuteAllMemberReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MuteAllMemberReq.room_id)
  return _s;
}
inline const std::string& MuteAllMemberReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void MuteAllMemberReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MuteAllMemberReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MuteAllMemberReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.MuteAllMemberReq.room_id)
  return room_id_.Release();
}
inline void MuteAllMemberReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MuteAllMemberReq.room_id)
}

// .ccs_msg.MuteType mute_type = 3;
inline void MuteAllMemberReq::clear_mute_type() {
  mute_type_ = 0;
}
inline ::ccs_msg::MuteType MuteAllMemberReq::_internal_mute_type() const {
  return static_cast< ::ccs_msg::MuteType >(mute_type_);
}
inline ::ccs_msg::MuteType MuteAllMemberReq::mute_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteAllMemberReq.mute_type)
  return _internal_mute_type();
}
inline void MuteAllMemberReq::_internal_set_mute_type(::ccs_msg::MuteType value) {
  
  mute_type_ = value;
}
inline void MuteAllMemberReq::set_mute_type(::ccs_msg::MuteType value) {
  _internal_set_mute_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MuteAllMemberReq.mute_type)
}

// -------------------------------------------------------------------

// MuteAllMemberRes

// .ccs_msg.ResultInfo result = 1;
inline bool MuteAllMemberRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MuteAllMemberRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& MuteAllMemberRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& MuteAllMemberRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MuteAllMemberRes.result)
  return _internal_result();
}
inline void MuteAllMemberRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MuteAllMemberRes.result)
}
inline ::ccs_msg::ResultInfo* MuteAllMemberRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* MuteAllMemberRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.MuteAllMemberRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* MuteAllMemberRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* MuteAllMemberRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MuteAllMemberRes.result)
  return _msg;
}
inline void MuteAllMemberRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MuteAllMemberRes.result)
}

// -------------------------------------------------------------------

// UnmuteAllMemberReq

// .ccs_msg.MsgHeader header = 1;
inline bool UnmuteAllMemberReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UnmuteAllMemberReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& UnmuteAllMemberReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& UnmuteAllMemberReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteAllMemberReq.header)
  return _internal_header();
}
inline void UnmuteAllMemberReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.UnmuteAllMemberReq.header)
}
inline ::ccs_msg::MsgHeader* UnmuteAllMemberReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* UnmuteAllMemberReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.UnmuteAllMemberReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* UnmuteAllMemberReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* UnmuteAllMemberReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.UnmuteAllMemberReq.header)
  return _msg;
}
inline void UnmuteAllMemberReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.UnmuteAllMemberReq.header)
}

// string room_id = 2;
inline void UnmuteAllMemberReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& UnmuteAllMemberReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteAllMemberReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnmuteAllMemberReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.UnmuteAllMemberReq.room_id)
}
inline std::string* UnmuteAllMemberReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.UnmuteAllMemberReq.room_id)
  return _s;
}
inline const std::string& UnmuteAllMemberReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void UnmuteAllMemberReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnmuteAllMemberReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnmuteAllMemberReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.UnmuteAllMemberReq.room_id)
  return room_id_.Release();
}
inline void UnmuteAllMemberReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.UnmuteAllMemberReq.room_id)
}

// .ccs_msg.MuteType mute_type = 3;
inline void UnmuteAllMemberReq::clear_mute_type() {
  mute_type_ = 0;
}
inline ::ccs_msg::MuteType UnmuteAllMemberReq::_internal_mute_type() const {
  return static_cast< ::ccs_msg::MuteType >(mute_type_);
}
inline ::ccs_msg::MuteType UnmuteAllMemberReq::mute_type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteAllMemberReq.mute_type)
  return _internal_mute_type();
}
inline void UnmuteAllMemberReq::_internal_set_mute_type(::ccs_msg::MuteType value) {
  
  mute_type_ = value;
}
inline void UnmuteAllMemberReq::set_mute_type(::ccs_msg::MuteType value) {
  _internal_set_mute_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.UnmuteAllMemberReq.mute_type)
}

// -------------------------------------------------------------------

// UnmuteAllMemberRes

// .ccs_msg.ResultInfo result = 1;
inline bool UnmuteAllMemberRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UnmuteAllMemberRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& UnmuteAllMemberRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& UnmuteAllMemberRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.UnmuteAllMemberRes.result)
  return _internal_result();
}
inline void UnmuteAllMemberRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.UnmuteAllMemberRes.result)
}
inline ::ccs_msg::ResultInfo* UnmuteAllMemberRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* UnmuteAllMemberRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.UnmuteAllMemberRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* UnmuteAllMemberRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* UnmuteAllMemberRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.UnmuteAllMemberRes.result)
  return _msg;
}
inline void UnmuteAllMemberRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.UnmuteAllMemberRes.result)
}

// -------------------------------------------------------------------

// AssignChairmanReq

// .ccs_msg.MsgHeader header = 1;
inline bool AssignChairmanReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AssignChairmanReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& AssignChairmanReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& AssignChairmanReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.AssignChairmanReq.header)
  return _internal_header();
}
inline void AssignChairmanReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.AssignChairmanReq.header)
}
inline ::ccs_msg::MsgHeader* AssignChairmanReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* AssignChairmanReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.AssignChairmanReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* AssignChairmanReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* AssignChairmanReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.AssignChairmanReq.header)
  return _msg;
}
inline void AssignChairmanReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.AssignChairmanReq.header)
}

// string room_id = 2;
inline void AssignChairmanReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& AssignChairmanReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.AssignChairmanReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssignChairmanReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.AssignChairmanReq.room_id)
}
inline std::string* AssignChairmanReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.AssignChairmanReq.room_id)
  return _s;
}
inline const std::string& AssignChairmanReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void AssignChairmanReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AssignChairmanReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AssignChairmanReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.AssignChairmanReq.room_id)
  return room_id_.Release();
}
inline void AssignChairmanReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.AssignChairmanReq.room_id)
}

// int32 member_id = 3;
inline void AssignChairmanReq::clear_member_id() {
  member_id_ = 0;
}
inline int32_t AssignChairmanReq::_internal_member_id() const {
  return member_id_;
}
inline int32_t AssignChairmanReq::member_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.AssignChairmanReq.member_id)
  return _internal_member_id();
}
inline void AssignChairmanReq::_internal_set_member_id(int32_t value) {
  
  member_id_ = value;
}
inline void AssignChairmanReq::set_member_id(int32_t value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.AssignChairmanReq.member_id)
}

// -------------------------------------------------------------------

// AssignChairmanRes

// .ccs_msg.ResultInfo result = 1;
inline bool AssignChairmanRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AssignChairmanRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& AssignChairmanRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& AssignChairmanRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.AssignChairmanRes.result)
  return _internal_result();
}
inline void AssignChairmanRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.AssignChairmanRes.result)
}
inline ::ccs_msg::ResultInfo* AssignChairmanRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* AssignChairmanRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.AssignChairmanRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* AssignChairmanRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* AssignChairmanRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.AssignChairmanRes.result)
  return _msg;
}
inline void AssignChairmanRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.AssignChairmanRes.result)
}

// -------------------------------------------------------------------

// TakePhotoReq

// .ccs_msg.MsgHeader header = 1;
inline bool TakePhotoReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TakePhotoReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& TakePhotoReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& TakePhotoReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.TakePhotoReq.header)
  return _internal_header();
}
inline void TakePhotoReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.TakePhotoReq.header)
}
inline ::ccs_msg::MsgHeader* TakePhotoReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* TakePhotoReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.TakePhotoReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* TakePhotoReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* TakePhotoReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.TakePhotoReq.header)
  return _msg;
}
inline void TakePhotoReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.TakePhotoReq.header)
}

// string room_id = 2;
inline void TakePhotoReq::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& TakePhotoReq::room_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.TakePhotoReq.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TakePhotoReq::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.TakePhotoReq.room_id)
}
inline std::string* TakePhotoReq::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.TakePhotoReq.room_id)
  return _s;
}
inline const std::string& TakePhotoReq::_internal_room_id() const {
  return room_id_.Get();
}
inline void TakePhotoReq::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TakePhotoReq::_internal_mutable_room_id() {
  
  return room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TakePhotoReq::release_room_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.TakePhotoReq.room_id)
  return room_id_.Release();
}
inline void TakePhotoReq::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_id_.IsDefault()) {
    room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.TakePhotoReq.room_id)
}

// uint32 mixer_id = 3;
inline void TakePhotoReq::clear_mixer_id() {
  mixer_id_ = 0u;
}
inline uint32_t TakePhotoReq::_internal_mixer_id() const {
  return mixer_id_;
}
inline uint32_t TakePhotoReq::mixer_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.TakePhotoReq.mixer_id)
  return _internal_mixer_id();
}
inline void TakePhotoReq::_internal_set_mixer_id(uint32_t value) {
  
  mixer_id_ = value;
}
inline void TakePhotoReq::set_mixer_id(uint32_t value) {
  _internal_set_mixer_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.TakePhotoReq.mixer_id)
}

// uint32 window_id = 4;
inline void TakePhotoReq::clear_window_id() {
  window_id_ = 0u;
}
inline uint32_t TakePhotoReq::_internal_window_id() const {
  return window_id_;
}
inline uint32_t TakePhotoReq::window_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.TakePhotoReq.window_id)
  return _internal_window_id();
}
inline void TakePhotoReq::_internal_set_window_id(uint32_t value) {
  
  window_id_ = value;
}
inline void TakePhotoReq::set_window_id(uint32_t value) {
  _internal_set_window_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.TakePhotoReq.window_id)
}

// -------------------------------------------------------------------

// TakePhotoRes

// .ccs_msg.ResultInfo result = 1;
inline bool TakePhotoRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool TakePhotoRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& TakePhotoRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& TakePhotoRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.TakePhotoRes.result)
  return _internal_result();
}
inline void TakePhotoRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.TakePhotoRes.result)
}
inline ::ccs_msg::ResultInfo* TakePhotoRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* TakePhotoRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.TakePhotoRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* TakePhotoRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* TakePhotoRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.TakePhotoRes.result)
  return _msg;
}
inline void TakePhotoRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.TakePhotoRes.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccs_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ccs_msg::WinMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::WinMode>() {
  return ::ccs_msg::WinMode_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::BitrateControlAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::BitrateControlAlgorithm>() {
  return ::ccs_msg::BitrateControlAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::ConfControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::ConfControlMode>() {
  return ::ccs_msg::ConfControlMode_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::ProtoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::ProtoType>() {
  return ::ccs_msg::ProtoType_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::InviteMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::InviteMode>() {
  return ::ccs_msg::InviteMode_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::ConferenceMediaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::ConferenceMediaType>() {
  return ::ccs_msg::ConferenceMediaType_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::ConnectionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::ConnectionStatus>() {
  return ::ccs_msg::ConnectionStatus_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::RoleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::RoleType>() {
  return ::ccs_msg::RoleType_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::NetworkStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::NetworkStatus>() {
  return ::ccs_msg::NetworkStatus_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::MuteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::MuteType>() {
  return ::ccs_msg::MuteType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ccs_5fconference_5fmessage_2eproto
