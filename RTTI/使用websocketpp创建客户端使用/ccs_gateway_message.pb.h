// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccs_gateway_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ccs_5fgateway_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ccs_5fgateway_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ccs_common_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ccs_5fgateway_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ccs_5fgateway_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ccs_5fgateway_5fmessage_2eproto;
namespace ccs_msg {
class CollectMonitorReq;
struct CollectMonitorReqDefaultTypeInternal;
extern CollectMonitorReqDefaultTypeInternal _CollectMonitorReq_default_instance_;
class CollectMonitorRes;
struct CollectMonitorResDefaultTypeInternal;
extern CollectMonitorResDefaultTypeInternal _CollectMonitorRes_default_instance_;
class MonitorDeviceInfo;
struct MonitorDeviceInfoDefaultTypeInternal;
extern MonitorDeviceInfoDefaultTypeInternal _MonitorDeviceInfo_default_instance_;
class MonitorLayoutReq;
struct MonitorLayoutReqDefaultTypeInternal;
extern MonitorLayoutReqDefaultTypeInternal _MonitorLayoutReq_default_instance_;
class MonitorLayoutRes;
struct MonitorLayoutResDefaultTypeInternal;
extern MonitorLayoutResDefaultTypeInternal _MonitorLayoutRes_default_instance_;
class MonitorListReq;
struct MonitorListReqDefaultTypeInternal;
extern MonitorListReqDefaultTypeInternal _MonitorListReq_default_instance_;
class MonitorListRes;
struct MonitorListResDefaultTypeInternal;
extern MonitorListResDefaultTypeInternal _MonitorListRes_default_instance_;
class MonitorStreamInfo;
struct MonitorStreamInfoDefaultTypeInternal;
extern MonitorStreamInfoDefaultTypeInternal _MonitorStreamInfo_default_instance_;
class MonitorStreamInfoReq;
struct MonitorStreamInfoReqDefaultTypeInternal;
extern MonitorStreamInfoReqDefaultTypeInternal _MonitorStreamInfoReq_default_instance_;
class MonitorStreamInfoRes;
struct MonitorStreamInfoResDefaultTypeInternal;
extern MonitorStreamInfoResDefaultTypeInternal _MonitorStreamInfoRes_default_instance_;
class MonitorWindow;
struct MonitorWindowDefaultTypeInternal;
extern MonitorWindowDefaultTypeInternal _MonitorWindow_default_instance_;
class PtzControlInfo;
struct PtzControlInfoDefaultTypeInternal;
extern PtzControlInfoDefaultTypeInternal _PtzControlInfo_default_instance_;
class PtzControlReq;
struct PtzControlReqDefaultTypeInternal;
extern PtzControlReqDefaultTypeInternal _PtzControlReq_default_instance_;
class PtzControlRes;
struct PtzControlResDefaultTypeInternal;
extern PtzControlResDefaultTypeInternal _PtzControlRes_default_instance_;
class SetMonitorLayoutReq;
struct SetMonitorLayoutReqDefaultTypeInternal;
extern SetMonitorLayoutReqDefaultTypeInternal _SetMonitorLayoutReq_default_instance_;
class SetMonitorLayoutRes;
struct SetMonitorLayoutResDefaultTypeInternal;
extern SetMonitorLayoutResDefaultTypeInternal _SetMonitorLayoutRes_default_instance_;
class SwitchMonitorLayoutReq;
struct SwitchMonitorLayoutReqDefaultTypeInternal;
extern SwitchMonitorLayoutReqDefaultTypeInternal _SwitchMonitorLayoutReq_default_instance_;
class SwtichMonitorLayoutRes;
struct SwtichMonitorLayoutResDefaultTypeInternal;
extern SwtichMonitorLayoutResDefaultTypeInternal _SwtichMonitorLayoutRes_default_instance_;
}  // namespace ccs_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::ccs_msg::CollectMonitorReq* Arena::CreateMaybeMessage<::ccs_msg::CollectMonitorReq>(Arena*);
template<> ::ccs_msg::CollectMonitorRes* Arena::CreateMaybeMessage<::ccs_msg::CollectMonitorRes>(Arena*);
template<> ::ccs_msg::MonitorDeviceInfo* Arena::CreateMaybeMessage<::ccs_msg::MonitorDeviceInfo>(Arena*);
template<> ::ccs_msg::MonitorLayoutReq* Arena::CreateMaybeMessage<::ccs_msg::MonitorLayoutReq>(Arena*);
template<> ::ccs_msg::MonitorLayoutRes* Arena::CreateMaybeMessage<::ccs_msg::MonitorLayoutRes>(Arena*);
template<> ::ccs_msg::MonitorListReq* Arena::CreateMaybeMessage<::ccs_msg::MonitorListReq>(Arena*);
template<> ::ccs_msg::MonitorListRes* Arena::CreateMaybeMessage<::ccs_msg::MonitorListRes>(Arena*);
template<> ::ccs_msg::MonitorStreamInfo* Arena::CreateMaybeMessage<::ccs_msg::MonitorStreamInfo>(Arena*);
template<> ::ccs_msg::MonitorStreamInfoReq* Arena::CreateMaybeMessage<::ccs_msg::MonitorStreamInfoReq>(Arena*);
template<> ::ccs_msg::MonitorStreamInfoRes* Arena::CreateMaybeMessage<::ccs_msg::MonitorStreamInfoRes>(Arena*);
template<> ::ccs_msg::MonitorWindow* Arena::CreateMaybeMessage<::ccs_msg::MonitorWindow>(Arena*);
template<> ::ccs_msg::PtzControlInfo* Arena::CreateMaybeMessage<::ccs_msg::PtzControlInfo>(Arena*);
template<> ::ccs_msg::PtzControlReq* Arena::CreateMaybeMessage<::ccs_msg::PtzControlReq>(Arena*);
template<> ::ccs_msg::PtzControlRes* Arena::CreateMaybeMessage<::ccs_msg::PtzControlRes>(Arena*);
template<> ::ccs_msg::SetMonitorLayoutReq* Arena::CreateMaybeMessage<::ccs_msg::SetMonitorLayoutReq>(Arena*);
template<> ::ccs_msg::SetMonitorLayoutRes* Arena::CreateMaybeMessage<::ccs_msg::SetMonitorLayoutRes>(Arena*);
template<> ::ccs_msg::SwitchMonitorLayoutReq* Arena::CreateMaybeMessage<::ccs_msg::SwitchMonitorLayoutReq>(Arena*);
template<> ::ccs_msg::SwtichMonitorLayoutRes* Arena::CreateMaybeMessage<::ccs_msg::SwtichMonitorLayoutRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ccs_msg {

enum MonitorListType : int {
  e_MonitorListType_All = 0,
  e_MonitorListType_Collect = 1,
  MonitorListType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonitorListType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonitorListType_IsValid(int value);
constexpr MonitorListType MonitorListType_MIN = e_MonitorListType_All;
constexpr MonitorListType MonitorListType_MAX = e_MonitorListType_Collect;
constexpr int MonitorListType_ARRAYSIZE = MonitorListType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonitorListType_descriptor();
template<typename T>
inline const std::string& MonitorListType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonitorListType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonitorListType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonitorListType_descriptor(), enum_t_value);
}
inline bool MonitorListType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonitorListType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonitorListType>(
    MonitorListType_descriptor(), name, value);
}
enum PtzControlCmd : int {
  e_GOTO_HOME = 0,
  e_TURN_LEFT = 1,
  e_TURN_RIGHT = 2,
  e_TURN_UP = 3,
  e_TURN_DOWN = 4,
  e_TURN_UP_LEFT = 5,
  e_TURN_UP_RIGHT = 6,
  e_TURN_DOWN_LEFT = 7,
  e_TURN_DOWN_RIGHT = 8,
  e_ZOOM_IN = 9,
  e_ZOOM_OUT = 10,
  e_FOCUS_FAR = 11,
  e_FOCUS_NEAR = 12,
  PtzControlCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PtzControlCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PtzControlCmd_IsValid(int value);
constexpr PtzControlCmd PtzControlCmd_MIN = e_GOTO_HOME;
constexpr PtzControlCmd PtzControlCmd_MAX = e_FOCUS_NEAR;
constexpr int PtzControlCmd_ARRAYSIZE = PtzControlCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PtzControlCmd_descriptor();
template<typename T>
inline const std::string& PtzControlCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PtzControlCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PtzControlCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PtzControlCmd_descriptor(), enum_t_value);
}
inline bool PtzControlCmd_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PtzControlCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PtzControlCmd>(
    PtzControlCmd_descriptor(), name, value);
}
// ===================================================================

class MonitorListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorListReq) */ {
 public:
  inline MonitorListReq() : MonitorListReq(nullptr) {}
  ~MonitorListReq() override;
  explicit PROTOBUF_CONSTEXPR MonitorListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorListReq(const MonitorListReq& from);
  MonitorListReq(MonitorListReq&& from) noexcept
    : MonitorListReq() {
    *this = ::std::move(from);
  }

  inline MonitorListReq& operator=(const MonitorListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorListReq& operator=(MonitorListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorListReq* internal_default_instance() {
    return reinterpret_cast<const MonitorListReq*>(
               &_MonitorListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MonitorListReq& a, MonitorListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorListReq";
  }
  protected:
  explicit MonitorListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.MonitorListType type = 2;
  void clear_type();
  ::ccs_msg::MonitorListType type() const;
  void set_type(::ccs_msg::MonitorListType value);
  private:
  ::ccs_msg::MonitorListType _internal_type() const;
  void _internal_set_type(::ccs_msg::MonitorListType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::MsgHeader* header_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorStreamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorStreamInfo) */ {
 public:
  inline MonitorStreamInfo() : MonitorStreamInfo(nullptr) {}
  ~MonitorStreamInfo() override;
  explicit PROTOBUF_CONSTEXPR MonitorStreamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorStreamInfo(const MonitorStreamInfo& from);
  MonitorStreamInfo(MonitorStreamInfo&& from) noexcept
    : MonitorStreamInfo() {
    *this = ::std::move(from);
  }

  inline MonitorStreamInfo& operator=(const MonitorStreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorStreamInfo& operator=(MonitorStreamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorStreamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorStreamInfo* internal_default_instance() {
    return reinterpret_cast<const MonitorStreamInfo*>(
               &_MonitorStreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonitorStreamInfo& a, MonitorStreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorStreamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorStreamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorStreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorStreamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorStreamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorStreamInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorStreamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorStreamInfo";
  }
  protected:
  explicit MonitorStreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kFrameFieldNumber = 3,
  };
  // string url = 4;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // uint32 width = 1;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 frame = 3;
  void clear_frame();
  uint32_t frame() const;
  void set_frame(uint32_t value);
  private:
  uint32_t _internal_frame() const;
  void _internal_set_frame(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorStreamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t width_;
  uint32_t height_;
  uint32_t frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorDeviceInfo) */ {
 public:
  inline MonitorDeviceInfo() : MonitorDeviceInfo(nullptr) {}
  ~MonitorDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR MonitorDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorDeviceInfo(const MonitorDeviceInfo& from);
  MonitorDeviceInfo(MonitorDeviceInfo&& from) noexcept
    : MonitorDeviceInfo() {
    *this = ::std::move(from);
  }

  inline MonitorDeviceInfo& operator=(const MonitorDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorDeviceInfo& operator=(MonitorDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const MonitorDeviceInfo*>(
               &_MonitorDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MonitorDeviceInfo& a, MonitorDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorDeviceInfo";
  }
  protected:
  explicit MonitorDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kDeviceAliaFieldNumber = 2,
    kStreamInfoFieldNumber = 6,
    kIsCollectFieldNumber = 3,
    kIsOnlineFieldNumber = 4,
    kIsSupportPtzFieldNumber = 5,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string device_alia = 2;
  void clear_device_alia();
  const std::string& device_alia() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_alia(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_alia();
  PROTOBUF_NODISCARD std::string* release_device_alia();
  void set_allocated_device_alia(std::string* device_alia);
  private:
  const std::string& _internal_device_alia() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_alia(const std::string& value);
  std::string* _internal_mutable_device_alia();
  public:

  // .ccs_msg.MonitorStreamInfo stream_info = 6;
  bool has_stream_info() const;
  private:
  bool _internal_has_stream_info() const;
  public:
  void clear_stream_info();
  const ::ccs_msg::MonitorStreamInfo& stream_info() const;
  PROTOBUF_NODISCARD ::ccs_msg::MonitorStreamInfo* release_stream_info();
  ::ccs_msg::MonitorStreamInfo* mutable_stream_info();
  void set_allocated_stream_info(::ccs_msg::MonitorStreamInfo* stream_info);
  private:
  const ::ccs_msg::MonitorStreamInfo& _internal_stream_info() const;
  ::ccs_msg::MonitorStreamInfo* _internal_mutable_stream_info();
  public:
  void unsafe_arena_set_allocated_stream_info(
      ::ccs_msg::MonitorStreamInfo* stream_info);
  ::ccs_msg::MonitorStreamInfo* unsafe_arena_release_stream_info();

  // bool is_collect = 3;
  void clear_is_collect();
  bool is_collect() const;
  void set_is_collect(bool value);
  private:
  bool _internal_is_collect() const;
  void _internal_set_is_collect(bool value);
  public:

  // bool is_online = 4;
  void clear_is_online();
  bool is_online() const;
  void set_is_online(bool value);
  private:
  bool _internal_is_online() const;
  void _internal_set_is_online(bool value);
  public:

  // bool is_support_ptz = 5;
  void clear_is_support_ptz();
  bool is_support_ptz() const;
  void set_is_support_ptz(bool value);
  private:
  bool _internal_is_support_ptz() const;
  void _internal_set_is_support_ptz(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_alia_;
  ::ccs_msg::MonitorStreamInfo* stream_info_;
  bool is_collect_;
  bool is_online_;
  bool is_support_ptz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorListRes) */ {
 public:
  inline MonitorListRes() : MonitorListRes(nullptr) {}
  ~MonitorListRes() override;
  explicit PROTOBUF_CONSTEXPR MonitorListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorListRes(const MonitorListRes& from);
  MonitorListRes(MonitorListRes&& from) noexcept
    : MonitorListRes() {
    *this = ::std::move(from);
  }

  inline MonitorListRes& operator=(const MonitorListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorListRes& operator=(MonitorListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorListRes* internal_default_instance() {
    return reinterpret_cast<const MonitorListRes*>(
               &_MonitorListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MonitorListRes& a, MonitorListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorListRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorListRes";
  }
  protected:
  explicit MonitorListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceListFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .ccs_msg.MonitorDeviceInfo device_list = 2;
  int device_list_size() const;
  private:
  int _internal_device_list_size() const;
  public:
  void clear_device_list();
  ::ccs_msg::MonitorDeviceInfo* mutable_device_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorDeviceInfo >*
      mutable_device_list();
  private:
  const ::ccs_msg::MonitorDeviceInfo& _internal_device_list(int index) const;
  ::ccs_msg::MonitorDeviceInfo* _internal_add_device_list();
  public:
  const ::ccs_msg::MonitorDeviceInfo& device_list(int index) const;
  ::ccs_msg::MonitorDeviceInfo* add_device_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorDeviceInfo >&
      device_list() const;

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorDeviceInfo > device_list_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CollectMonitorReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.CollectMonitorReq) */ {
 public:
  inline CollectMonitorReq() : CollectMonitorReq(nullptr) {}
  ~CollectMonitorReq() override;
  explicit PROTOBUF_CONSTEXPR CollectMonitorReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectMonitorReq(const CollectMonitorReq& from);
  CollectMonitorReq(CollectMonitorReq&& from) noexcept
    : CollectMonitorReq() {
    *this = ::std::move(from);
  }

  inline CollectMonitorReq& operator=(const CollectMonitorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectMonitorReq& operator=(CollectMonitorReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectMonitorReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectMonitorReq* internal_default_instance() {
    return reinterpret_cast<const CollectMonitorReq*>(
               &_CollectMonitorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CollectMonitorReq& a, CollectMonitorReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectMonitorReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectMonitorReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectMonitorReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectMonitorReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectMonitorReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CollectMonitorReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectMonitorReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.CollectMonitorReq";
  }
  protected:
  explicit CollectMonitorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kIsCollectFieldNumber = 3,
  };
  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // bool is_collect = 3;
  void clear_is_collect();
  bool is_collect() const;
  void set_is_collect(bool value);
  private:
  bool _internal_is_collect() const;
  void _internal_set_is_collect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.CollectMonitorReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::MsgHeader* header_;
  bool is_collect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CollectMonitorRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.CollectMonitorRes) */ {
 public:
  inline CollectMonitorRes() : CollectMonitorRes(nullptr) {}
  ~CollectMonitorRes() override;
  explicit PROTOBUF_CONSTEXPR CollectMonitorRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectMonitorRes(const CollectMonitorRes& from);
  CollectMonitorRes(CollectMonitorRes&& from) noexcept
    : CollectMonitorRes() {
    *this = ::std::move(from);
  }

  inline CollectMonitorRes& operator=(const CollectMonitorRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectMonitorRes& operator=(CollectMonitorRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectMonitorRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectMonitorRes* internal_default_instance() {
    return reinterpret_cast<const CollectMonitorRes*>(
               &_CollectMonitorRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CollectMonitorRes& a, CollectMonitorRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectMonitorRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectMonitorRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectMonitorRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectMonitorRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectMonitorRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CollectMonitorRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectMonitorRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.CollectMonitorRes";
  }
  protected:
  explicit CollectMonitorRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kResultFieldNumber = 1,
    kIsCollectFieldNumber = 3,
  };
  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // bool is_collect = 3;
  void clear_is_collect();
  bool is_collect() const;
  void set_is_collect(bool value);
  private:
  bool _internal_is_collect() const;
  void _internal_set_is_collect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.CollectMonitorRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::ResultInfo* result_;
  bool is_collect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorStreamInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorStreamInfoReq) */ {
 public:
  inline MonitorStreamInfoReq() : MonitorStreamInfoReq(nullptr) {}
  ~MonitorStreamInfoReq() override;
  explicit PROTOBUF_CONSTEXPR MonitorStreamInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorStreamInfoReq(const MonitorStreamInfoReq& from);
  MonitorStreamInfoReq(MonitorStreamInfoReq&& from) noexcept
    : MonitorStreamInfoReq() {
    *this = ::std::move(from);
  }

  inline MonitorStreamInfoReq& operator=(const MonitorStreamInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorStreamInfoReq& operator=(MonitorStreamInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorStreamInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorStreamInfoReq* internal_default_instance() {
    return reinterpret_cast<const MonitorStreamInfoReq*>(
               &_MonitorStreamInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MonitorStreamInfoReq& a, MonitorStreamInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorStreamInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorStreamInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorStreamInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorStreamInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorStreamInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorStreamInfoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorStreamInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorStreamInfoReq";
  }
  protected:
  explicit MonitorStreamInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorStreamInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::MsgHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorStreamInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorStreamInfoRes) */ {
 public:
  inline MonitorStreamInfoRes() : MonitorStreamInfoRes(nullptr) {}
  ~MonitorStreamInfoRes() override;
  explicit PROTOBUF_CONSTEXPR MonitorStreamInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorStreamInfoRes(const MonitorStreamInfoRes& from);
  MonitorStreamInfoRes(MonitorStreamInfoRes&& from) noexcept
    : MonitorStreamInfoRes() {
    *this = ::std::move(from);
  }

  inline MonitorStreamInfoRes& operator=(const MonitorStreamInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorStreamInfoRes& operator=(MonitorStreamInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorStreamInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorStreamInfoRes* internal_default_instance() {
    return reinterpret_cast<const MonitorStreamInfoRes*>(
               &_MonitorStreamInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MonitorStreamInfoRes& a, MonitorStreamInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorStreamInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorStreamInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorStreamInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorStreamInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorStreamInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorStreamInfoRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorStreamInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorStreamInfoRes";
  }
  protected:
  explicit MonitorStreamInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kMonitorDeviceInfoFieldNumber = 2,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // .ccs_msg.MonitorDeviceInfo monitor_device_info = 2;
  bool has_monitor_device_info() const;
  private:
  bool _internal_has_monitor_device_info() const;
  public:
  void clear_monitor_device_info();
  const ::ccs_msg::MonitorDeviceInfo& monitor_device_info() const;
  PROTOBUF_NODISCARD ::ccs_msg::MonitorDeviceInfo* release_monitor_device_info();
  ::ccs_msg::MonitorDeviceInfo* mutable_monitor_device_info();
  void set_allocated_monitor_device_info(::ccs_msg::MonitorDeviceInfo* monitor_device_info);
  private:
  const ::ccs_msg::MonitorDeviceInfo& _internal_monitor_device_info() const;
  ::ccs_msg::MonitorDeviceInfo* _internal_mutable_monitor_device_info();
  public:
  void unsafe_arena_set_allocated_monitor_device_info(
      ::ccs_msg::MonitorDeviceInfo* monitor_device_info);
  ::ccs_msg::MonitorDeviceInfo* unsafe_arena_release_monitor_device_info();

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorStreamInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  ::ccs_msg::MonitorDeviceInfo* monitor_device_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PtzControlInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.PtzControlInfo) */ {
 public:
  inline PtzControlInfo() : PtzControlInfo(nullptr) {}
  ~PtzControlInfo() override;
  explicit PROTOBUF_CONSTEXPR PtzControlInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PtzControlInfo(const PtzControlInfo& from);
  PtzControlInfo(PtzControlInfo&& from) noexcept
    : PtzControlInfo() {
    *this = ::std::move(from);
  }

  inline PtzControlInfo& operator=(const PtzControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzControlInfo& operator=(PtzControlInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PtzControlInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PtzControlInfo* internal_default_instance() {
    return reinterpret_cast<const PtzControlInfo*>(
               &_PtzControlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PtzControlInfo& a, PtzControlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzControlInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzControlInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PtzControlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PtzControlInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PtzControlInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PtzControlInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzControlInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.PtzControlInfo";
  }
  protected:
  explicit PtzControlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsStartFieldNumber = 1,
    kHorSpeedFieldNumber = 2,
    kVerSpeedFieldNumber = 3,
    kZoomSpeedFieldNumber = 4,
    kFocusSpeedFieldNumber = 5,
    kCmdFieldNumber = 6,
  };
  // bool is_start = 1;
  void clear_is_start();
  bool is_start() const;
  void set_is_start(bool value);
  private:
  bool _internal_is_start() const;
  void _internal_set_is_start(bool value);
  public:

  // uint32 hor_speed = 2;
  void clear_hor_speed();
  uint32_t hor_speed() const;
  void set_hor_speed(uint32_t value);
  private:
  uint32_t _internal_hor_speed() const;
  void _internal_set_hor_speed(uint32_t value);
  public:

  // uint32 ver_speed = 3;
  void clear_ver_speed();
  uint32_t ver_speed() const;
  void set_ver_speed(uint32_t value);
  private:
  uint32_t _internal_ver_speed() const;
  void _internal_set_ver_speed(uint32_t value);
  public:

  // uint32 zoom_speed = 4;
  void clear_zoom_speed();
  uint32_t zoom_speed() const;
  void set_zoom_speed(uint32_t value);
  private:
  uint32_t _internal_zoom_speed() const;
  void _internal_set_zoom_speed(uint32_t value);
  public:

  // uint32 focus_speed = 5;
  void clear_focus_speed();
  uint32_t focus_speed() const;
  void set_focus_speed(uint32_t value);
  private:
  uint32_t _internal_focus_speed() const;
  void _internal_set_focus_speed(uint32_t value);
  public:

  // .ccs_msg.PtzControlCmd cmd = 6;
  void clear_cmd();
  ::ccs_msg::PtzControlCmd cmd() const;
  void set_cmd(::ccs_msg::PtzControlCmd value);
  private:
  ::ccs_msg::PtzControlCmd _internal_cmd() const;
  void _internal_set_cmd(::ccs_msg::PtzControlCmd value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.PtzControlInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_start_;
  uint32_t hor_speed_;
  uint32_t ver_speed_;
  uint32_t zoom_speed_;
  uint32_t focus_speed_;
  int cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PtzControlReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.PtzControlReq) */ {
 public:
  inline PtzControlReq() : PtzControlReq(nullptr) {}
  ~PtzControlReq() override;
  explicit PROTOBUF_CONSTEXPR PtzControlReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PtzControlReq(const PtzControlReq& from);
  PtzControlReq(PtzControlReq&& from) noexcept
    : PtzControlReq() {
    *this = ::std::move(from);
  }

  inline PtzControlReq& operator=(const PtzControlReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzControlReq& operator=(PtzControlReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PtzControlReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PtzControlReq* internal_default_instance() {
    return reinterpret_cast<const PtzControlReq*>(
               &_PtzControlReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PtzControlReq& a, PtzControlReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzControlReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzControlReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PtzControlReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PtzControlReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PtzControlReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PtzControlReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzControlReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.PtzControlReq";
  }
  protected:
  explicit PtzControlReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPtControlInfoFieldNumber = 3,
  };
  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.PtzControlInfo pt_control_info = 3;
  bool has_pt_control_info() const;
  private:
  bool _internal_has_pt_control_info() const;
  public:
  void clear_pt_control_info();
  const ::ccs_msg::PtzControlInfo& pt_control_info() const;
  PROTOBUF_NODISCARD ::ccs_msg::PtzControlInfo* release_pt_control_info();
  ::ccs_msg::PtzControlInfo* mutable_pt_control_info();
  void set_allocated_pt_control_info(::ccs_msg::PtzControlInfo* pt_control_info);
  private:
  const ::ccs_msg::PtzControlInfo& _internal_pt_control_info() const;
  ::ccs_msg::PtzControlInfo* _internal_mutable_pt_control_info();
  public:
  void unsafe_arena_set_allocated_pt_control_info(
      ::ccs_msg::PtzControlInfo* pt_control_info);
  ::ccs_msg::PtzControlInfo* unsafe_arena_release_pt_control_info();

  // @@protoc_insertion_point(class_scope:ccs_msg.PtzControlReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::MsgHeader* header_;
  ::ccs_msg::PtzControlInfo* pt_control_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PtzControlRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.PtzControlRes) */ {
 public:
  inline PtzControlRes() : PtzControlRes(nullptr) {}
  ~PtzControlRes() override;
  explicit PROTOBUF_CONSTEXPR PtzControlRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PtzControlRes(const PtzControlRes& from);
  PtzControlRes(PtzControlRes&& from) noexcept
    : PtzControlRes() {
    *this = ::std::move(from);
  }

  inline PtzControlRes& operator=(const PtzControlRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzControlRes& operator=(PtzControlRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PtzControlRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PtzControlRes* internal_default_instance() {
    return reinterpret_cast<const PtzControlRes*>(
               &_PtzControlRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PtzControlRes& a, PtzControlRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzControlRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzControlRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PtzControlRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PtzControlRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PtzControlRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PtzControlRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzControlRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.PtzControlRes";
  }
  protected:
  explicit PtzControlRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:ccs_msg.PtzControlRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorLayoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorLayoutReq) */ {
 public:
  inline MonitorLayoutReq() : MonitorLayoutReq(nullptr) {}
  ~MonitorLayoutReq() override;
  explicit PROTOBUF_CONSTEXPR MonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorLayoutReq(const MonitorLayoutReq& from);
  MonitorLayoutReq(MonitorLayoutReq&& from) noexcept
    : MonitorLayoutReq() {
    *this = ::std::move(from);
  }

  inline MonitorLayoutReq& operator=(const MonitorLayoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorLayoutReq& operator=(MonitorLayoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorLayoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorLayoutReq* internal_default_instance() {
    return reinterpret_cast<const MonitorLayoutReq*>(
               &_MonitorLayoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MonitorLayoutReq& a, MonitorLayoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorLayoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorLayoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorLayoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorLayoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorLayoutReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorLayoutReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorLayoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorLayoutReq";
  }
  protected:
  explicit MonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorLayoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::MsgHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorWindow) */ {
 public:
  inline MonitorWindow() : MonitorWindow(nullptr) {}
  ~MonitorWindow() override;
  explicit PROTOBUF_CONSTEXPR MonitorWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorWindow(const MonitorWindow& from);
  MonitorWindow(MonitorWindow&& from) noexcept
    : MonitorWindow() {
    *this = ::std::move(from);
  }

  inline MonitorWindow& operator=(const MonitorWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorWindow& operator=(MonitorWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorWindow* internal_default_instance() {
    return reinterpret_cast<const MonitorWindow*>(
               &_MonitorWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MonitorWindow& a, MonitorWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorWindow";
  }
  protected:
  explicit MonitorWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kDeviceAliaFieldNumber = 3,
    kStreamInfoFieldNumber = 4,
    kWindowIdFieldNumber = 1,
  };
  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string device_alia = 3;
  void clear_device_alia();
  const std::string& device_alia() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_alia(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_alia();
  PROTOBUF_NODISCARD std::string* release_device_alia();
  void set_allocated_device_alia(std::string* device_alia);
  private:
  const std::string& _internal_device_alia() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_alia(const std::string& value);
  std::string* _internal_mutable_device_alia();
  public:

  // .ccs_msg.MonitorStreamInfo stream_info = 4;
  bool has_stream_info() const;
  private:
  bool _internal_has_stream_info() const;
  public:
  void clear_stream_info();
  const ::ccs_msg::MonitorStreamInfo& stream_info() const;
  PROTOBUF_NODISCARD ::ccs_msg::MonitorStreamInfo* release_stream_info();
  ::ccs_msg::MonitorStreamInfo* mutable_stream_info();
  void set_allocated_stream_info(::ccs_msg::MonitorStreamInfo* stream_info);
  private:
  const ::ccs_msg::MonitorStreamInfo& _internal_stream_info() const;
  ::ccs_msg::MonitorStreamInfo* _internal_mutable_stream_info();
  public:
  void unsafe_arena_set_allocated_stream_info(
      ::ccs_msg::MonitorStreamInfo* stream_info);
  ::ccs_msg::MonitorStreamInfo* unsafe_arena_release_stream_info();

  // uint32 window_id = 1;
  void clear_window_id();
  uint32_t window_id() const;
  void set_window_id(uint32_t value);
  private:
  uint32_t _internal_window_id() const;
  void _internal_set_window_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_alia_;
  ::ccs_msg::MonitorStreamInfo* stream_info_;
  uint32_t window_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MonitorLayoutRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MonitorLayoutRes) */ {
 public:
  inline MonitorLayoutRes() : MonitorLayoutRes(nullptr) {}
  ~MonitorLayoutRes() override;
  explicit PROTOBUF_CONSTEXPR MonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorLayoutRes(const MonitorLayoutRes& from);
  MonitorLayoutRes(MonitorLayoutRes&& from) noexcept
    : MonitorLayoutRes() {
    *this = ::std::move(from);
  }

  inline MonitorLayoutRes& operator=(const MonitorLayoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorLayoutRes& operator=(MonitorLayoutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorLayoutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorLayoutRes* internal_default_instance() {
    return reinterpret_cast<const MonitorLayoutRes*>(
               &_MonitorLayoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MonitorLayoutRes& a, MonitorLayoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorLayoutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorLayoutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorLayoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorLayoutRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorLayoutRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorLayoutRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorLayoutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MonitorLayoutRes";
  }
  protected:
  explicit MonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorWindowListFieldNumber = 3,
    kResultFieldNumber = 1,
    kLayoutIdFieldNumber = 2,
  };
  // repeated .ccs_msg.MonitorWindow monitor_window_list = 3;
  int monitor_window_list_size() const;
  private:
  int _internal_monitor_window_list_size() const;
  public:
  void clear_monitor_window_list();
  ::ccs_msg::MonitorWindow* mutable_monitor_window_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorWindow >*
      mutable_monitor_window_list();
  private:
  const ::ccs_msg::MonitorWindow& _internal_monitor_window_list(int index) const;
  ::ccs_msg::MonitorWindow* _internal_add_monitor_window_list();
  public:
  const ::ccs_msg::MonitorWindow& monitor_window_list(int index) const;
  ::ccs_msg::MonitorWindow* add_monitor_window_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorWindow >&
      monitor_window_list() const;

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  void clear_layout_id();
  ::ccs_msg::ITCVideoLayoutType layout_id() const;
  void set_layout_id(::ccs_msg::ITCVideoLayoutType value);
  private:
  ::ccs_msg::ITCVideoLayoutType _internal_layout_id() const;
  void _internal_set_layout_id(::ccs_msg::ITCVideoLayoutType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MonitorLayoutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorWindow > monitor_window_list_;
  ::ccs_msg::ResultInfo* result_;
  int layout_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SetMonitorLayoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.SetMonitorLayoutReq) */ {
 public:
  inline SetMonitorLayoutReq() : SetMonitorLayoutReq(nullptr) {}
  ~SetMonitorLayoutReq() override;
  explicit PROTOBUF_CONSTEXPR SetMonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMonitorLayoutReq(const SetMonitorLayoutReq& from);
  SetMonitorLayoutReq(SetMonitorLayoutReq&& from) noexcept
    : SetMonitorLayoutReq() {
    *this = ::std::move(from);
  }

  inline SetMonitorLayoutReq& operator=(const SetMonitorLayoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMonitorLayoutReq& operator=(SetMonitorLayoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMonitorLayoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMonitorLayoutReq* internal_default_instance() {
    return reinterpret_cast<const SetMonitorLayoutReq*>(
               &_SetMonitorLayoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetMonitorLayoutReq& a, SetMonitorLayoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMonitorLayoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMonitorLayoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMonitorLayoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMonitorLayoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMonitorLayoutReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMonitorLayoutReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMonitorLayoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.SetMonitorLayoutReq";
  }
  protected:
  explicit SetMonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kWindowIdFieldNumber = 2,
  };
  // string device_id = 3;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // uint32 window_id = 2;
  void clear_window_id();
  uint32_t window_id() const;
  void set_window_id(uint32_t value);
  private:
  uint32_t _internal_window_id() const;
  void _internal_set_window_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.SetMonitorLayoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::MsgHeader* header_;
  uint32_t window_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SetMonitorLayoutRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.SetMonitorLayoutRes) */ {
 public:
  inline SetMonitorLayoutRes() : SetMonitorLayoutRes(nullptr) {}
  ~SetMonitorLayoutRes() override;
  explicit PROTOBUF_CONSTEXPR SetMonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMonitorLayoutRes(const SetMonitorLayoutRes& from);
  SetMonitorLayoutRes(SetMonitorLayoutRes&& from) noexcept
    : SetMonitorLayoutRes() {
    *this = ::std::move(from);
  }

  inline SetMonitorLayoutRes& operator=(const SetMonitorLayoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMonitorLayoutRes& operator=(SetMonitorLayoutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMonitorLayoutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMonitorLayoutRes* internal_default_instance() {
    return reinterpret_cast<const SetMonitorLayoutRes*>(
               &_SetMonitorLayoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetMonitorLayoutRes& a, SetMonitorLayoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMonitorLayoutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMonitorLayoutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMonitorLayoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMonitorLayoutRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMonitorLayoutRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMonitorLayoutRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMonitorLayoutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.SetMonitorLayoutRes";
  }
  protected:
  explicit SetMonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 3,
    kResultFieldNumber = 1,
    kWindowIdFieldNumber = 2,
  };
  // string device_id = 3;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // uint32 window_id = 2;
  void clear_window_id();
  uint32_t window_id() const;
  void set_window_id(uint32_t value);
  private:
  uint32_t _internal_window_id() const;
  void _internal_set_window_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.SetMonitorLayoutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::ccs_msg::ResultInfo* result_;
  uint32_t window_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SwitchMonitorLayoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.SwitchMonitorLayoutReq) */ {
 public:
  inline SwitchMonitorLayoutReq() : SwitchMonitorLayoutReq(nullptr) {}
  ~SwitchMonitorLayoutReq() override;
  explicit PROTOBUF_CONSTEXPR SwitchMonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchMonitorLayoutReq(const SwitchMonitorLayoutReq& from);
  SwitchMonitorLayoutReq(SwitchMonitorLayoutReq&& from) noexcept
    : SwitchMonitorLayoutReq() {
    *this = ::std::move(from);
  }

  inline SwitchMonitorLayoutReq& operator=(const SwitchMonitorLayoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchMonitorLayoutReq& operator=(SwitchMonitorLayoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwitchMonitorLayoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchMonitorLayoutReq* internal_default_instance() {
    return reinterpret_cast<const SwitchMonitorLayoutReq*>(
               &_SwitchMonitorLayoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SwitchMonitorLayoutReq& a, SwitchMonitorLayoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchMonitorLayoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchMonitorLayoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchMonitorLayoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchMonitorLayoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwitchMonitorLayoutReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwitchMonitorLayoutReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchMonitorLayoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.SwitchMonitorLayoutReq";
  }
  protected:
  explicit SwitchMonitorLayoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLayoutIdFieldNumber = 2,
  };
  // .ccs_msg.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ccs_msg::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::ccs_msg::MsgHeader* release_header();
  ::ccs_msg::MsgHeader* mutable_header();
  void set_allocated_header(::ccs_msg::MsgHeader* header);
  private:
  const ::ccs_msg::MsgHeader& _internal_header() const;
  ::ccs_msg::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ccs_msg::MsgHeader* header);
  ::ccs_msg::MsgHeader* unsafe_arena_release_header();

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  void clear_layout_id();
  ::ccs_msg::ITCVideoLayoutType layout_id() const;
  void set_layout_id(::ccs_msg::ITCVideoLayoutType value);
  private:
  ::ccs_msg::ITCVideoLayoutType _internal_layout_id() const;
  void _internal_set_layout_id(::ccs_msg::ITCVideoLayoutType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.SwitchMonitorLayoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::MsgHeader* header_;
  int layout_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SwtichMonitorLayoutRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.SwtichMonitorLayoutRes) */ {
 public:
  inline SwtichMonitorLayoutRes() : SwtichMonitorLayoutRes(nullptr) {}
  ~SwtichMonitorLayoutRes() override;
  explicit PROTOBUF_CONSTEXPR SwtichMonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwtichMonitorLayoutRes(const SwtichMonitorLayoutRes& from);
  SwtichMonitorLayoutRes(SwtichMonitorLayoutRes&& from) noexcept
    : SwtichMonitorLayoutRes() {
    *this = ::std::move(from);
  }

  inline SwtichMonitorLayoutRes& operator=(const SwtichMonitorLayoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwtichMonitorLayoutRes& operator=(SwtichMonitorLayoutRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwtichMonitorLayoutRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwtichMonitorLayoutRes* internal_default_instance() {
    return reinterpret_cast<const SwtichMonitorLayoutRes*>(
               &_SwtichMonitorLayoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SwtichMonitorLayoutRes& a, SwtichMonitorLayoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SwtichMonitorLayoutRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwtichMonitorLayoutRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwtichMonitorLayoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwtichMonitorLayoutRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwtichMonitorLayoutRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwtichMonitorLayoutRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwtichMonitorLayoutRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.SwtichMonitorLayoutRes";
  }
  protected:
  explicit SwtichMonitorLayoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kLayoutIdFieldNumber = 2,
  };
  // .ccs_msg.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ccs_msg::ResultInfo& result() const;
  PROTOBUF_NODISCARD ::ccs_msg::ResultInfo* release_result();
  ::ccs_msg::ResultInfo* mutable_result();
  void set_allocated_result(::ccs_msg::ResultInfo* result);
  private:
  const ::ccs_msg::ResultInfo& _internal_result() const;
  ::ccs_msg::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ccs_msg::ResultInfo* result);
  ::ccs_msg::ResultInfo* unsafe_arena_release_result();

  // .ccs_msg.ITCVideoLayoutType layout_id = 2;
  void clear_layout_id();
  ::ccs_msg::ITCVideoLayoutType layout_id() const;
  void set_layout_id(::ccs_msg::ITCVideoLayoutType value);
  private:
  ::ccs_msg::ITCVideoLayoutType _internal_layout_id() const;
  void _internal_set_layout_id(::ccs_msg::ITCVideoLayoutType value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.SwtichMonitorLayoutRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ccs_msg::ResultInfo* result_;
  int layout_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fgateway_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonitorListReq

// .ccs_msg.MsgHeader header = 1;
inline bool MonitorListReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MonitorListReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& MonitorListReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& MonitorListReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorListReq.header)
  return _internal_header();
}
inline void MonitorListReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorListReq.header)
}
inline ::ccs_msg::MsgHeader* MonitorListReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* MonitorListReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorListReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* MonitorListReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* MonitorListReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorListReq.header)
  return _msg;
}
inline void MonitorListReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorListReq.header)
}

// .ccs_msg.MonitorListType type = 2;
inline void MonitorListReq::clear_type() {
  type_ = 0;
}
inline ::ccs_msg::MonitorListType MonitorListReq::_internal_type() const {
  return static_cast< ::ccs_msg::MonitorListType >(type_);
}
inline ::ccs_msg::MonitorListType MonitorListReq::type() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorListReq.type)
  return _internal_type();
}
inline void MonitorListReq::_internal_set_type(::ccs_msg::MonitorListType value) {
  
  type_ = value;
}
inline void MonitorListReq::set_type(::ccs_msg::MonitorListType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorListReq.type)
}

// -------------------------------------------------------------------

// MonitorStreamInfo

// uint32 width = 1;
inline void MonitorStreamInfo::clear_width() {
  width_ = 0u;
}
inline uint32_t MonitorStreamInfo::_internal_width() const {
  return width_;
}
inline uint32_t MonitorStreamInfo::width() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfo.width)
  return _internal_width();
}
inline void MonitorStreamInfo::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void MonitorStreamInfo::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorStreamInfo.width)
}

// uint32 height = 2;
inline void MonitorStreamInfo::clear_height() {
  height_ = 0u;
}
inline uint32_t MonitorStreamInfo::_internal_height() const {
  return height_;
}
inline uint32_t MonitorStreamInfo::height() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfo.height)
  return _internal_height();
}
inline void MonitorStreamInfo::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void MonitorStreamInfo::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorStreamInfo.height)
}

// uint32 frame = 3;
inline void MonitorStreamInfo::clear_frame() {
  frame_ = 0u;
}
inline uint32_t MonitorStreamInfo::_internal_frame() const {
  return frame_;
}
inline uint32_t MonitorStreamInfo::frame() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfo.frame)
  return _internal_frame();
}
inline void MonitorStreamInfo::_internal_set_frame(uint32_t value) {
  
  frame_ = value;
}
inline void MonitorStreamInfo::set_frame(uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorStreamInfo.frame)
}

// string url = 4;
inline void MonitorStreamInfo::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& MonitorStreamInfo::url() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorStreamInfo::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorStreamInfo.url)
}
inline std::string* MonitorStreamInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorStreamInfo.url)
  return _s;
}
inline const std::string& MonitorStreamInfo::_internal_url() const {
  return url_.Get();
}
inline void MonitorStreamInfo::_internal_set_url(const std::string& value) {
  
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorStreamInfo::_internal_mutable_url() {
  
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorStreamInfo::release_url() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorStreamInfo.url)
  return url_.Release();
}
inline void MonitorStreamInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorStreamInfo.url)
}

// -------------------------------------------------------------------

// MonitorDeviceInfo

// string device_id = 1;
inline void MonitorDeviceInfo::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& MonitorDeviceInfo::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorDeviceInfo.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorDeviceInfo::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorDeviceInfo.device_id)
}
inline std::string* MonitorDeviceInfo::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorDeviceInfo.device_id)
  return _s;
}
inline const std::string& MonitorDeviceInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void MonitorDeviceInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorDeviceInfo::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorDeviceInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorDeviceInfo.device_id)
  return device_id_.Release();
}
inline void MonitorDeviceInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorDeviceInfo.device_id)
}

// string device_alia = 2;
inline void MonitorDeviceInfo::clear_device_alia() {
  device_alia_.ClearToEmpty();
}
inline const std::string& MonitorDeviceInfo::device_alia() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorDeviceInfo.device_alia)
  return _internal_device_alia();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorDeviceInfo::set_device_alia(ArgT0&& arg0, ArgT... args) {
 
 device_alia_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorDeviceInfo.device_alia)
}
inline std::string* MonitorDeviceInfo::mutable_device_alia() {
  std::string* _s = _internal_mutable_device_alia();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorDeviceInfo.device_alia)
  return _s;
}
inline const std::string& MonitorDeviceInfo::_internal_device_alia() const {
  return device_alia_.Get();
}
inline void MonitorDeviceInfo::_internal_set_device_alia(const std::string& value) {
  
  device_alia_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorDeviceInfo::_internal_mutable_device_alia() {
  
  return device_alia_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorDeviceInfo::release_device_alia() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorDeviceInfo.device_alia)
  return device_alia_.Release();
}
inline void MonitorDeviceInfo::set_allocated_device_alia(std::string* device_alia) {
  if (device_alia != nullptr) {
    
  } else {
    
  }
  device_alia_.SetAllocated(device_alia, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_alia_.IsDefault()) {
    device_alia_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorDeviceInfo.device_alia)
}

// bool is_collect = 3;
inline void MonitorDeviceInfo::clear_is_collect() {
  is_collect_ = false;
}
inline bool MonitorDeviceInfo::_internal_is_collect() const {
  return is_collect_;
}
inline bool MonitorDeviceInfo::is_collect() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorDeviceInfo.is_collect)
  return _internal_is_collect();
}
inline void MonitorDeviceInfo::_internal_set_is_collect(bool value) {
  
  is_collect_ = value;
}
inline void MonitorDeviceInfo::set_is_collect(bool value) {
  _internal_set_is_collect(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorDeviceInfo.is_collect)
}

// bool is_online = 4;
inline void MonitorDeviceInfo::clear_is_online() {
  is_online_ = false;
}
inline bool MonitorDeviceInfo::_internal_is_online() const {
  return is_online_;
}
inline bool MonitorDeviceInfo::is_online() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorDeviceInfo.is_online)
  return _internal_is_online();
}
inline void MonitorDeviceInfo::_internal_set_is_online(bool value) {
  
  is_online_ = value;
}
inline void MonitorDeviceInfo::set_is_online(bool value) {
  _internal_set_is_online(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorDeviceInfo.is_online)
}

// bool is_support_ptz = 5;
inline void MonitorDeviceInfo::clear_is_support_ptz() {
  is_support_ptz_ = false;
}
inline bool MonitorDeviceInfo::_internal_is_support_ptz() const {
  return is_support_ptz_;
}
inline bool MonitorDeviceInfo::is_support_ptz() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorDeviceInfo.is_support_ptz)
  return _internal_is_support_ptz();
}
inline void MonitorDeviceInfo::_internal_set_is_support_ptz(bool value) {
  
  is_support_ptz_ = value;
}
inline void MonitorDeviceInfo::set_is_support_ptz(bool value) {
  _internal_set_is_support_ptz(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorDeviceInfo.is_support_ptz)
}

// .ccs_msg.MonitorStreamInfo stream_info = 6;
inline bool MonitorDeviceInfo::_internal_has_stream_info() const {
  return this != internal_default_instance() && stream_info_ != nullptr;
}
inline bool MonitorDeviceInfo::has_stream_info() const {
  return _internal_has_stream_info();
}
inline void MonitorDeviceInfo::clear_stream_info() {
  if (GetArenaForAllocation() == nullptr && stream_info_ != nullptr) {
    delete stream_info_;
  }
  stream_info_ = nullptr;
}
inline const ::ccs_msg::MonitorStreamInfo& MonitorDeviceInfo::_internal_stream_info() const {
  const ::ccs_msg::MonitorStreamInfo* p = stream_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MonitorStreamInfo&>(
      ::ccs_msg::_MonitorStreamInfo_default_instance_);
}
inline const ::ccs_msg::MonitorStreamInfo& MonitorDeviceInfo::stream_info() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorDeviceInfo.stream_info)
  return _internal_stream_info();
}
inline void MonitorDeviceInfo::unsafe_arena_set_allocated_stream_info(
    ::ccs_msg::MonitorStreamInfo* stream_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_info_);
  }
  stream_info_ = stream_info;
  if (stream_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorDeviceInfo.stream_info)
}
inline ::ccs_msg::MonitorStreamInfo* MonitorDeviceInfo::release_stream_info() {
  
  ::ccs_msg::MonitorStreamInfo* temp = stream_info_;
  stream_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MonitorStreamInfo* MonitorDeviceInfo::unsafe_arena_release_stream_info() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorDeviceInfo.stream_info)
  
  ::ccs_msg::MonitorStreamInfo* temp = stream_info_;
  stream_info_ = nullptr;
  return temp;
}
inline ::ccs_msg::MonitorStreamInfo* MonitorDeviceInfo::_internal_mutable_stream_info() {
  
  if (stream_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MonitorStreamInfo>(GetArenaForAllocation());
    stream_info_ = p;
  }
  return stream_info_;
}
inline ::ccs_msg::MonitorStreamInfo* MonitorDeviceInfo::mutable_stream_info() {
  ::ccs_msg::MonitorStreamInfo* _msg = _internal_mutable_stream_info();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorDeviceInfo.stream_info)
  return _msg;
}
inline void MonitorDeviceInfo::set_allocated_stream_info(::ccs_msg::MonitorStreamInfo* stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stream_info_;
  }
  if (stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_info);
    if (message_arena != submessage_arena) {
      stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_info, submessage_arena);
    }
    
  } else {
    
  }
  stream_info_ = stream_info;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorDeviceInfo.stream_info)
}

// -------------------------------------------------------------------

// MonitorListRes

// .ccs_msg.ResultInfo result = 1;
inline bool MonitorListRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MonitorListRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& MonitorListRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& MonitorListRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorListRes.result)
  return _internal_result();
}
inline void MonitorListRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorListRes.result)
}
inline ::ccs_msg::ResultInfo* MonitorListRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* MonitorListRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorListRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* MonitorListRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* MonitorListRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorListRes.result)
  return _msg;
}
inline void MonitorListRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorListRes.result)
}

// repeated .ccs_msg.MonitorDeviceInfo device_list = 2;
inline int MonitorListRes::_internal_device_list_size() const {
  return device_list_.size();
}
inline int MonitorListRes::device_list_size() const {
  return _internal_device_list_size();
}
inline void MonitorListRes::clear_device_list() {
  device_list_.Clear();
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorListRes::mutable_device_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorListRes.device_list)
  return device_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorDeviceInfo >*
MonitorListRes::mutable_device_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.MonitorListRes.device_list)
  return &device_list_;
}
inline const ::ccs_msg::MonitorDeviceInfo& MonitorListRes::_internal_device_list(int index) const {
  return device_list_.Get(index);
}
inline const ::ccs_msg::MonitorDeviceInfo& MonitorListRes::device_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorListRes.device_list)
  return _internal_device_list(index);
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorListRes::_internal_add_device_list() {
  return device_list_.Add();
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorListRes::add_device_list() {
  ::ccs_msg::MonitorDeviceInfo* _add = _internal_add_device_list();
  // @@protoc_insertion_point(field_add:ccs_msg.MonitorListRes.device_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorDeviceInfo >&
MonitorListRes::device_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.MonitorListRes.device_list)
  return device_list_;
}

// -------------------------------------------------------------------

// CollectMonitorReq

// .ccs_msg.MsgHeader header = 1;
inline bool CollectMonitorReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CollectMonitorReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& CollectMonitorReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& CollectMonitorReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CollectMonitorReq.header)
  return _internal_header();
}
inline void CollectMonitorReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CollectMonitorReq.header)
}
inline ::ccs_msg::MsgHeader* CollectMonitorReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* CollectMonitorReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.CollectMonitorReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* CollectMonitorReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* CollectMonitorReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CollectMonitorReq.header)
  return _msg;
}
inline void CollectMonitorReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CollectMonitorReq.header)
}

// string device_id = 2;
inline void CollectMonitorReq::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& CollectMonitorReq::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CollectMonitorReq.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectMonitorReq::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CollectMonitorReq.device_id)
}
inline std::string* CollectMonitorReq::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CollectMonitorReq.device_id)
  return _s;
}
inline const std::string& CollectMonitorReq::_internal_device_id() const {
  return device_id_.Get();
}
inline void CollectMonitorReq::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CollectMonitorReq::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CollectMonitorReq::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.CollectMonitorReq.device_id)
  return device_id_.Release();
}
inline void CollectMonitorReq::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CollectMonitorReq.device_id)
}

// bool is_collect = 3;
inline void CollectMonitorReq::clear_is_collect() {
  is_collect_ = false;
}
inline bool CollectMonitorReq::_internal_is_collect() const {
  return is_collect_;
}
inline bool CollectMonitorReq::is_collect() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CollectMonitorReq.is_collect)
  return _internal_is_collect();
}
inline void CollectMonitorReq::_internal_set_is_collect(bool value) {
  
  is_collect_ = value;
}
inline void CollectMonitorReq::set_is_collect(bool value) {
  _internal_set_is_collect(value);
  // @@protoc_insertion_point(field_set:ccs_msg.CollectMonitorReq.is_collect)
}

// -------------------------------------------------------------------

// CollectMonitorRes

// .ccs_msg.ResultInfo result = 1;
inline bool CollectMonitorRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CollectMonitorRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& CollectMonitorRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& CollectMonitorRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CollectMonitorRes.result)
  return _internal_result();
}
inline void CollectMonitorRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.CollectMonitorRes.result)
}
inline ::ccs_msg::ResultInfo* CollectMonitorRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* CollectMonitorRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.CollectMonitorRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* CollectMonitorRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* CollectMonitorRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CollectMonitorRes.result)
  return _msg;
}
inline void CollectMonitorRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CollectMonitorRes.result)
}

// string device_id = 2;
inline void CollectMonitorRes::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& CollectMonitorRes::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CollectMonitorRes.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectMonitorRes::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.CollectMonitorRes.device_id)
}
inline std::string* CollectMonitorRes::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.CollectMonitorRes.device_id)
  return _s;
}
inline const std::string& CollectMonitorRes::_internal_device_id() const {
  return device_id_.Get();
}
inline void CollectMonitorRes::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CollectMonitorRes::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CollectMonitorRes::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.CollectMonitorRes.device_id)
  return device_id_.Release();
}
inline void CollectMonitorRes::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.CollectMonitorRes.device_id)
}

// bool is_collect = 3;
inline void CollectMonitorRes::clear_is_collect() {
  is_collect_ = false;
}
inline bool CollectMonitorRes::_internal_is_collect() const {
  return is_collect_;
}
inline bool CollectMonitorRes::is_collect() const {
  // @@protoc_insertion_point(field_get:ccs_msg.CollectMonitorRes.is_collect)
  return _internal_is_collect();
}
inline void CollectMonitorRes::_internal_set_is_collect(bool value) {
  
  is_collect_ = value;
}
inline void CollectMonitorRes::set_is_collect(bool value) {
  _internal_set_is_collect(value);
  // @@protoc_insertion_point(field_set:ccs_msg.CollectMonitorRes.is_collect)
}

// -------------------------------------------------------------------

// MonitorStreamInfoReq

// .ccs_msg.MsgHeader header = 1;
inline bool MonitorStreamInfoReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MonitorStreamInfoReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& MonitorStreamInfoReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& MonitorStreamInfoReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfoReq.header)
  return _internal_header();
}
inline void MonitorStreamInfoReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorStreamInfoReq.header)
}
inline ::ccs_msg::MsgHeader* MonitorStreamInfoReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* MonitorStreamInfoReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorStreamInfoReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* MonitorStreamInfoReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* MonitorStreamInfoReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorStreamInfoReq.header)
  return _msg;
}
inline void MonitorStreamInfoReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorStreamInfoReq.header)
}

// string device_id = 2;
inline void MonitorStreamInfoReq::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& MonitorStreamInfoReq::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfoReq.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorStreamInfoReq::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorStreamInfoReq.device_id)
}
inline std::string* MonitorStreamInfoReq::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorStreamInfoReq.device_id)
  return _s;
}
inline const std::string& MonitorStreamInfoReq::_internal_device_id() const {
  return device_id_.Get();
}
inline void MonitorStreamInfoReq::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorStreamInfoReq::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorStreamInfoReq::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorStreamInfoReq.device_id)
  return device_id_.Release();
}
inline void MonitorStreamInfoReq::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorStreamInfoReq.device_id)
}

// -------------------------------------------------------------------

// MonitorStreamInfoRes

// .ccs_msg.ResultInfo result = 1;
inline bool MonitorStreamInfoRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MonitorStreamInfoRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& MonitorStreamInfoRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& MonitorStreamInfoRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfoRes.result)
  return _internal_result();
}
inline void MonitorStreamInfoRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorStreamInfoRes.result)
}
inline ::ccs_msg::ResultInfo* MonitorStreamInfoRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* MonitorStreamInfoRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorStreamInfoRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* MonitorStreamInfoRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* MonitorStreamInfoRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorStreamInfoRes.result)
  return _msg;
}
inline void MonitorStreamInfoRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorStreamInfoRes.result)
}

// .ccs_msg.MonitorDeviceInfo monitor_device_info = 2;
inline bool MonitorStreamInfoRes::_internal_has_monitor_device_info() const {
  return this != internal_default_instance() && monitor_device_info_ != nullptr;
}
inline bool MonitorStreamInfoRes::has_monitor_device_info() const {
  return _internal_has_monitor_device_info();
}
inline void MonitorStreamInfoRes::clear_monitor_device_info() {
  if (GetArenaForAllocation() == nullptr && monitor_device_info_ != nullptr) {
    delete monitor_device_info_;
  }
  monitor_device_info_ = nullptr;
}
inline const ::ccs_msg::MonitorDeviceInfo& MonitorStreamInfoRes::_internal_monitor_device_info() const {
  const ::ccs_msg::MonitorDeviceInfo* p = monitor_device_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MonitorDeviceInfo&>(
      ::ccs_msg::_MonitorDeviceInfo_default_instance_);
}
inline const ::ccs_msg::MonitorDeviceInfo& MonitorStreamInfoRes::monitor_device_info() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorStreamInfoRes.monitor_device_info)
  return _internal_monitor_device_info();
}
inline void MonitorStreamInfoRes::unsafe_arena_set_allocated_monitor_device_info(
    ::ccs_msg::MonitorDeviceInfo* monitor_device_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_device_info_);
  }
  monitor_device_info_ = monitor_device_info;
  if (monitor_device_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorStreamInfoRes.monitor_device_info)
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorStreamInfoRes::release_monitor_device_info() {
  
  ::ccs_msg::MonitorDeviceInfo* temp = monitor_device_info_;
  monitor_device_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorStreamInfoRes::unsafe_arena_release_monitor_device_info() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorStreamInfoRes.monitor_device_info)
  
  ::ccs_msg::MonitorDeviceInfo* temp = monitor_device_info_;
  monitor_device_info_ = nullptr;
  return temp;
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorStreamInfoRes::_internal_mutable_monitor_device_info() {
  
  if (monitor_device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MonitorDeviceInfo>(GetArenaForAllocation());
    monitor_device_info_ = p;
  }
  return monitor_device_info_;
}
inline ::ccs_msg::MonitorDeviceInfo* MonitorStreamInfoRes::mutable_monitor_device_info() {
  ::ccs_msg::MonitorDeviceInfo* _msg = _internal_mutable_monitor_device_info();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorStreamInfoRes.monitor_device_info)
  return _msg;
}
inline void MonitorStreamInfoRes::set_allocated_monitor_device_info(::ccs_msg::MonitorDeviceInfo* monitor_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete monitor_device_info_;
  }
  if (monitor_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monitor_device_info);
    if (message_arena != submessage_arena) {
      monitor_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor_device_info, submessage_arena);
    }
    
  } else {
    
  }
  monitor_device_info_ = monitor_device_info;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorStreamInfoRes.monitor_device_info)
}

// -------------------------------------------------------------------

// PtzControlInfo

// bool is_start = 1;
inline void PtzControlInfo::clear_is_start() {
  is_start_ = false;
}
inline bool PtzControlInfo::_internal_is_start() const {
  return is_start_;
}
inline bool PtzControlInfo::is_start() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlInfo.is_start)
  return _internal_is_start();
}
inline void PtzControlInfo::_internal_set_is_start(bool value) {
  
  is_start_ = value;
}
inline void PtzControlInfo::set_is_start(bool value) {
  _internal_set_is_start(value);
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlInfo.is_start)
}

// uint32 hor_speed = 2;
inline void PtzControlInfo::clear_hor_speed() {
  hor_speed_ = 0u;
}
inline uint32_t PtzControlInfo::_internal_hor_speed() const {
  return hor_speed_;
}
inline uint32_t PtzControlInfo::hor_speed() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlInfo.hor_speed)
  return _internal_hor_speed();
}
inline void PtzControlInfo::_internal_set_hor_speed(uint32_t value) {
  
  hor_speed_ = value;
}
inline void PtzControlInfo::set_hor_speed(uint32_t value) {
  _internal_set_hor_speed(value);
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlInfo.hor_speed)
}

// uint32 ver_speed = 3;
inline void PtzControlInfo::clear_ver_speed() {
  ver_speed_ = 0u;
}
inline uint32_t PtzControlInfo::_internal_ver_speed() const {
  return ver_speed_;
}
inline uint32_t PtzControlInfo::ver_speed() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlInfo.ver_speed)
  return _internal_ver_speed();
}
inline void PtzControlInfo::_internal_set_ver_speed(uint32_t value) {
  
  ver_speed_ = value;
}
inline void PtzControlInfo::set_ver_speed(uint32_t value) {
  _internal_set_ver_speed(value);
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlInfo.ver_speed)
}

// uint32 zoom_speed = 4;
inline void PtzControlInfo::clear_zoom_speed() {
  zoom_speed_ = 0u;
}
inline uint32_t PtzControlInfo::_internal_zoom_speed() const {
  return zoom_speed_;
}
inline uint32_t PtzControlInfo::zoom_speed() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlInfo.zoom_speed)
  return _internal_zoom_speed();
}
inline void PtzControlInfo::_internal_set_zoom_speed(uint32_t value) {
  
  zoom_speed_ = value;
}
inline void PtzControlInfo::set_zoom_speed(uint32_t value) {
  _internal_set_zoom_speed(value);
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlInfo.zoom_speed)
}

// uint32 focus_speed = 5;
inline void PtzControlInfo::clear_focus_speed() {
  focus_speed_ = 0u;
}
inline uint32_t PtzControlInfo::_internal_focus_speed() const {
  return focus_speed_;
}
inline uint32_t PtzControlInfo::focus_speed() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlInfo.focus_speed)
  return _internal_focus_speed();
}
inline void PtzControlInfo::_internal_set_focus_speed(uint32_t value) {
  
  focus_speed_ = value;
}
inline void PtzControlInfo::set_focus_speed(uint32_t value) {
  _internal_set_focus_speed(value);
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlInfo.focus_speed)
}

// .ccs_msg.PtzControlCmd cmd = 6;
inline void PtzControlInfo::clear_cmd() {
  cmd_ = 0;
}
inline ::ccs_msg::PtzControlCmd PtzControlInfo::_internal_cmd() const {
  return static_cast< ::ccs_msg::PtzControlCmd >(cmd_);
}
inline ::ccs_msg::PtzControlCmd PtzControlInfo::cmd() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlInfo.cmd)
  return _internal_cmd();
}
inline void PtzControlInfo::_internal_set_cmd(::ccs_msg::PtzControlCmd value) {
  
  cmd_ = value;
}
inline void PtzControlInfo::set_cmd(::ccs_msg::PtzControlCmd value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlInfo.cmd)
}

// -------------------------------------------------------------------

// PtzControlReq

// .ccs_msg.MsgHeader header = 1;
inline bool PtzControlReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PtzControlReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& PtzControlReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& PtzControlReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlReq.header)
  return _internal_header();
}
inline void PtzControlReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.PtzControlReq.header)
}
inline ::ccs_msg::MsgHeader* PtzControlReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* PtzControlReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.PtzControlReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* PtzControlReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* PtzControlReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.PtzControlReq.header)
  return _msg;
}
inline void PtzControlReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.PtzControlReq.header)
}

// string device_id = 2;
inline void PtzControlReq::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& PtzControlReq::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlReq.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PtzControlReq::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlReq.device_id)
}
inline std::string* PtzControlReq::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.PtzControlReq.device_id)
  return _s;
}
inline const std::string& PtzControlReq::_internal_device_id() const {
  return device_id_.Get();
}
inline void PtzControlReq::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PtzControlReq::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PtzControlReq::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.PtzControlReq.device_id)
  return device_id_.Release();
}
inline void PtzControlReq::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.PtzControlReq.device_id)
}

// .ccs_msg.PtzControlInfo pt_control_info = 3;
inline bool PtzControlReq::_internal_has_pt_control_info() const {
  return this != internal_default_instance() && pt_control_info_ != nullptr;
}
inline bool PtzControlReq::has_pt_control_info() const {
  return _internal_has_pt_control_info();
}
inline void PtzControlReq::clear_pt_control_info() {
  if (GetArenaForAllocation() == nullptr && pt_control_info_ != nullptr) {
    delete pt_control_info_;
  }
  pt_control_info_ = nullptr;
}
inline const ::ccs_msg::PtzControlInfo& PtzControlReq::_internal_pt_control_info() const {
  const ::ccs_msg::PtzControlInfo* p = pt_control_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::PtzControlInfo&>(
      ::ccs_msg::_PtzControlInfo_default_instance_);
}
inline const ::ccs_msg::PtzControlInfo& PtzControlReq::pt_control_info() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlReq.pt_control_info)
  return _internal_pt_control_info();
}
inline void PtzControlReq::unsafe_arena_set_allocated_pt_control_info(
    ::ccs_msg::PtzControlInfo* pt_control_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pt_control_info_);
  }
  pt_control_info_ = pt_control_info;
  if (pt_control_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.PtzControlReq.pt_control_info)
}
inline ::ccs_msg::PtzControlInfo* PtzControlReq::release_pt_control_info() {
  
  ::ccs_msg::PtzControlInfo* temp = pt_control_info_;
  pt_control_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::PtzControlInfo* PtzControlReq::unsafe_arena_release_pt_control_info() {
  // @@protoc_insertion_point(field_release:ccs_msg.PtzControlReq.pt_control_info)
  
  ::ccs_msg::PtzControlInfo* temp = pt_control_info_;
  pt_control_info_ = nullptr;
  return temp;
}
inline ::ccs_msg::PtzControlInfo* PtzControlReq::_internal_mutable_pt_control_info() {
  
  if (pt_control_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::PtzControlInfo>(GetArenaForAllocation());
    pt_control_info_ = p;
  }
  return pt_control_info_;
}
inline ::ccs_msg::PtzControlInfo* PtzControlReq::mutable_pt_control_info() {
  ::ccs_msg::PtzControlInfo* _msg = _internal_mutable_pt_control_info();
  // @@protoc_insertion_point(field_mutable:ccs_msg.PtzControlReq.pt_control_info)
  return _msg;
}
inline void PtzControlReq::set_allocated_pt_control_info(::ccs_msg::PtzControlInfo* pt_control_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pt_control_info_;
  }
  if (pt_control_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pt_control_info);
    if (message_arena != submessage_arena) {
      pt_control_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pt_control_info, submessage_arena);
    }
    
  } else {
    
  }
  pt_control_info_ = pt_control_info;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.PtzControlReq.pt_control_info)
}

// -------------------------------------------------------------------

// PtzControlRes

// .ccs_msg.ResultInfo result = 1;
inline bool PtzControlRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool PtzControlRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& PtzControlRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& PtzControlRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlRes.result)
  return _internal_result();
}
inline void PtzControlRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.PtzControlRes.result)
}
inline ::ccs_msg::ResultInfo* PtzControlRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* PtzControlRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.PtzControlRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* PtzControlRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* PtzControlRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.PtzControlRes.result)
  return _msg;
}
inline void PtzControlRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.PtzControlRes.result)
}

// string device_id = 2;
inline void PtzControlRes::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& PtzControlRes::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.PtzControlRes.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PtzControlRes::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.PtzControlRes.device_id)
}
inline std::string* PtzControlRes::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.PtzControlRes.device_id)
  return _s;
}
inline const std::string& PtzControlRes::_internal_device_id() const {
  return device_id_.Get();
}
inline void PtzControlRes::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PtzControlRes::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PtzControlRes::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.PtzControlRes.device_id)
  return device_id_.Release();
}
inline void PtzControlRes::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.PtzControlRes.device_id)
}

// -------------------------------------------------------------------

// MonitorLayoutReq

// .ccs_msg.MsgHeader header = 1;
inline bool MonitorLayoutReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MonitorLayoutReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& MonitorLayoutReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& MonitorLayoutReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorLayoutReq.header)
  return _internal_header();
}
inline void MonitorLayoutReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorLayoutReq.header)
}
inline ::ccs_msg::MsgHeader* MonitorLayoutReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* MonitorLayoutReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorLayoutReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* MonitorLayoutReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* MonitorLayoutReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorLayoutReq.header)
  return _msg;
}
inline void MonitorLayoutReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorLayoutReq.header)
}

// -------------------------------------------------------------------

// MonitorWindow

// uint32 window_id = 1;
inline void MonitorWindow::clear_window_id() {
  window_id_ = 0u;
}
inline uint32_t MonitorWindow::_internal_window_id() const {
  return window_id_;
}
inline uint32_t MonitorWindow::window_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorWindow.window_id)
  return _internal_window_id();
}
inline void MonitorWindow::_internal_set_window_id(uint32_t value) {
  
  window_id_ = value;
}
inline void MonitorWindow::set_window_id(uint32_t value) {
  _internal_set_window_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorWindow.window_id)
}

// string device_id = 2;
inline void MonitorWindow::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& MonitorWindow::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorWindow.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorWindow::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorWindow.device_id)
}
inline std::string* MonitorWindow::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorWindow.device_id)
  return _s;
}
inline const std::string& MonitorWindow::_internal_device_id() const {
  return device_id_.Get();
}
inline void MonitorWindow::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorWindow::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorWindow::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorWindow.device_id)
  return device_id_.Release();
}
inline void MonitorWindow::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorWindow.device_id)
}

// string device_alia = 3;
inline void MonitorWindow::clear_device_alia() {
  device_alia_.ClearToEmpty();
}
inline const std::string& MonitorWindow::device_alia() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorWindow.device_alia)
  return _internal_device_alia();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorWindow::set_device_alia(ArgT0&& arg0, ArgT... args) {
 
 device_alia_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorWindow.device_alia)
}
inline std::string* MonitorWindow::mutable_device_alia() {
  std::string* _s = _internal_mutable_device_alia();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorWindow.device_alia)
  return _s;
}
inline const std::string& MonitorWindow::_internal_device_alia() const {
  return device_alia_.Get();
}
inline void MonitorWindow::_internal_set_device_alia(const std::string& value) {
  
  device_alia_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorWindow::_internal_mutable_device_alia() {
  
  return device_alia_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorWindow::release_device_alia() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorWindow.device_alia)
  return device_alia_.Release();
}
inline void MonitorWindow::set_allocated_device_alia(std::string* device_alia) {
  if (device_alia != nullptr) {
    
  } else {
    
  }
  device_alia_.SetAllocated(device_alia, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_alia_.IsDefault()) {
    device_alia_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorWindow.device_alia)
}

// .ccs_msg.MonitorStreamInfo stream_info = 4;
inline bool MonitorWindow::_internal_has_stream_info() const {
  return this != internal_default_instance() && stream_info_ != nullptr;
}
inline bool MonitorWindow::has_stream_info() const {
  return _internal_has_stream_info();
}
inline void MonitorWindow::clear_stream_info() {
  if (GetArenaForAllocation() == nullptr && stream_info_ != nullptr) {
    delete stream_info_;
  }
  stream_info_ = nullptr;
}
inline const ::ccs_msg::MonitorStreamInfo& MonitorWindow::_internal_stream_info() const {
  const ::ccs_msg::MonitorStreamInfo* p = stream_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MonitorStreamInfo&>(
      ::ccs_msg::_MonitorStreamInfo_default_instance_);
}
inline const ::ccs_msg::MonitorStreamInfo& MonitorWindow::stream_info() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorWindow.stream_info)
  return _internal_stream_info();
}
inline void MonitorWindow::unsafe_arena_set_allocated_stream_info(
    ::ccs_msg::MonitorStreamInfo* stream_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_info_);
  }
  stream_info_ = stream_info;
  if (stream_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorWindow.stream_info)
}
inline ::ccs_msg::MonitorStreamInfo* MonitorWindow::release_stream_info() {
  
  ::ccs_msg::MonitorStreamInfo* temp = stream_info_;
  stream_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MonitorStreamInfo* MonitorWindow::unsafe_arena_release_stream_info() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorWindow.stream_info)
  
  ::ccs_msg::MonitorStreamInfo* temp = stream_info_;
  stream_info_ = nullptr;
  return temp;
}
inline ::ccs_msg::MonitorStreamInfo* MonitorWindow::_internal_mutable_stream_info() {
  
  if (stream_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MonitorStreamInfo>(GetArenaForAllocation());
    stream_info_ = p;
  }
  return stream_info_;
}
inline ::ccs_msg::MonitorStreamInfo* MonitorWindow::mutable_stream_info() {
  ::ccs_msg::MonitorStreamInfo* _msg = _internal_mutable_stream_info();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorWindow.stream_info)
  return _msg;
}
inline void MonitorWindow::set_allocated_stream_info(::ccs_msg::MonitorStreamInfo* stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stream_info_;
  }
  if (stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream_info);
    if (message_arena != submessage_arena) {
      stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_info, submessage_arena);
    }
    
  } else {
    
  }
  stream_info_ = stream_info;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorWindow.stream_info)
}

// -------------------------------------------------------------------

// MonitorLayoutRes

// .ccs_msg.ResultInfo result = 1;
inline bool MonitorLayoutRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool MonitorLayoutRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& MonitorLayoutRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& MonitorLayoutRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorLayoutRes.result)
  return _internal_result();
}
inline void MonitorLayoutRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.MonitorLayoutRes.result)
}
inline ::ccs_msg::ResultInfo* MonitorLayoutRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* MonitorLayoutRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.MonitorLayoutRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* MonitorLayoutRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* MonitorLayoutRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorLayoutRes.result)
  return _msg;
}
inline void MonitorLayoutRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.MonitorLayoutRes.result)
}

// .ccs_msg.ITCVideoLayoutType layout_id = 2;
inline void MonitorLayoutRes::clear_layout_id() {
  layout_id_ = 0;
}
inline ::ccs_msg::ITCVideoLayoutType MonitorLayoutRes::_internal_layout_id() const {
  return static_cast< ::ccs_msg::ITCVideoLayoutType >(layout_id_);
}
inline ::ccs_msg::ITCVideoLayoutType MonitorLayoutRes::layout_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorLayoutRes.layout_id)
  return _internal_layout_id();
}
inline void MonitorLayoutRes::_internal_set_layout_id(::ccs_msg::ITCVideoLayoutType value) {
  
  layout_id_ = value;
}
inline void MonitorLayoutRes::set_layout_id(::ccs_msg::ITCVideoLayoutType value) {
  _internal_set_layout_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MonitorLayoutRes.layout_id)
}

// repeated .ccs_msg.MonitorWindow monitor_window_list = 3;
inline int MonitorLayoutRes::_internal_monitor_window_list_size() const {
  return monitor_window_list_.size();
}
inline int MonitorLayoutRes::monitor_window_list_size() const {
  return _internal_monitor_window_list_size();
}
inline void MonitorLayoutRes::clear_monitor_window_list() {
  monitor_window_list_.Clear();
}
inline ::ccs_msg::MonitorWindow* MonitorLayoutRes::mutable_monitor_window_list(int index) {
  // @@protoc_insertion_point(field_mutable:ccs_msg.MonitorLayoutRes.monitor_window_list)
  return monitor_window_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorWindow >*
MonitorLayoutRes::mutable_monitor_window_list() {
  // @@protoc_insertion_point(field_mutable_list:ccs_msg.MonitorLayoutRes.monitor_window_list)
  return &monitor_window_list_;
}
inline const ::ccs_msg::MonitorWindow& MonitorLayoutRes::_internal_monitor_window_list(int index) const {
  return monitor_window_list_.Get(index);
}
inline const ::ccs_msg::MonitorWindow& MonitorLayoutRes::monitor_window_list(int index) const {
  // @@protoc_insertion_point(field_get:ccs_msg.MonitorLayoutRes.monitor_window_list)
  return _internal_monitor_window_list(index);
}
inline ::ccs_msg::MonitorWindow* MonitorLayoutRes::_internal_add_monitor_window_list() {
  return monitor_window_list_.Add();
}
inline ::ccs_msg::MonitorWindow* MonitorLayoutRes::add_monitor_window_list() {
  ::ccs_msg::MonitorWindow* _add = _internal_add_monitor_window_list();
  // @@protoc_insertion_point(field_add:ccs_msg.MonitorLayoutRes.monitor_window_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ccs_msg::MonitorWindow >&
MonitorLayoutRes::monitor_window_list() const {
  // @@protoc_insertion_point(field_list:ccs_msg.MonitorLayoutRes.monitor_window_list)
  return monitor_window_list_;
}

// -------------------------------------------------------------------

// SetMonitorLayoutReq

// .ccs_msg.MsgHeader header = 1;
inline bool SetMonitorLayoutReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetMonitorLayoutReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& SetMonitorLayoutReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& SetMonitorLayoutReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetMonitorLayoutReq.header)
  return _internal_header();
}
inline void SetMonitorLayoutReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.SetMonitorLayoutReq.header)
}
inline ::ccs_msg::MsgHeader* SetMonitorLayoutReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* SetMonitorLayoutReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetMonitorLayoutReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* SetMonitorLayoutReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* SetMonitorLayoutReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetMonitorLayoutReq.header)
  return _msg;
}
inline void SetMonitorLayoutReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetMonitorLayoutReq.header)
}

// uint32 window_id = 2;
inline void SetMonitorLayoutReq::clear_window_id() {
  window_id_ = 0u;
}
inline uint32_t SetMonitorLayoutReq::_internal_window_id() const {
  return window_id_;
}
inline uint32_t SetMonitorLayoutReq::window_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetMonitorLayoutReq.window_id)
  return _internal_window_id();
}
inline void SetMonitorLayoutReq::_internal_set_window_id(uint32_t value) {
  
  window_id_ = value;
}
inline void SetMonitorLayoutReq::set_window_id(uint32_t value) {
  _internal_set_window_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SetMonitorLayoutReq.window_id)
}

// string device_id = 3;
inline void SetMonitorLayoutReq::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& SetMonitorLayoutReq::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetMonitorLayoutReq.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetMonitorLayoutReq::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.SetMonitorLayoutReq.device_id)
}
inline std::string* SetMonitorLayoutReq::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetMonitorLayoutReq.device_id)
  return _s;
}
inline const std::string& SetMonitorLayoutReq::_internal_device_id() const {
  return device_id_.Get();
}
inline void SetMonitorLayoutReq::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMonitorLayoutReq::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SetMonitorLayoutReq::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetMonitorLayoutReq.device_id)
  return device_id_.Release();
}
inline void SetMonitorLayoutReq::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetMonitorLayoutReq.device_id)
}

// -------------------------------------------------------------------

// SetMonitorLayoutRes

// .ccs_msg.ResultInfo result = 1;
inline bool SetMonitorLayoutRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SetMonitorLayoutRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& SetMonitorLayoutRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& SetMonitorLayoutRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetMonitorLayoutRes.result)
  return _internal_result();
}
inline void SetMonitorLayoutRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.SetMonitorLayoutRes.result)
}
inline ::ccs_msg::ResultInfo* SetMonitorLayoutRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* SetMonitorLayoutRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetMonitorLayoutRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* SetMonitorLayoutRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* SetMonitorLayoutRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetMonitorLayoutRes.result)
  return _msg;
}
inline void SetMonitorLayoutRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetMonitorLayoutRes.result)
}

// uint32 window_id = 2;
inline void SetMonitorLayoutRes::clear_window_id() {
  window_id_ = 0u;
}
inline uint32_t SetMonitorLayoutRes::_internal_window_id() const {
  return window_id_;
}
inline uint32_t SetMonitorLayoutRes::window_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetMonitorLayoutRes.window_id)
  return _internal_window_id();
}
inline void SetMonitorLayoutRes::_internal_set_window_id(uint32_t value) {
  
  window_id_ = value;
}
inline void SetMonitorLayoutRes::set_window_id(uint32_t value) {
  _internal_set_window_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SetMonitorLayoutRes.window_id)
}

// string device_id = 3;
inline void SetMonitorLayoutRes::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& SetMonitorLayoutRes::device_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SetMonitorLayoutRes.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetMonitorLayoutRes::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.SetMonitorLayoutRes.device_id)
}
inline std::string* SetMonitorLayoutRes::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SetMonitorLayoutRes.device_id)
  return _s;
}
inline const std::string& SetMonitorLayoutRes::_internal_device_id() const {
  return device_id_.Get();
}
inline void SetMonitorLayoutRes::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SetMonitorLayoutRes::_internal_mutable_device_id() {
  
  return device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SetMonitorLayoutRes::release_device_id() {
  // @@protoc_insertion_point(field_release:ccs_msg.SetMonitorLayoutRes.device_id)
  return device_id_.Release();
}
inline void SetMonitorLayoutRes::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault()) {
    device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SetMonitorLayoutRes.device_id)
}

// -------------------------------------------------------------------

// SwitchMonitorLayoutReq

// .ccs_msg.MsgHeader header = 1;
inline bool SwitchMonitorLayoutReq::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SwitchMonitorLayoutReq::has_header() const {
  return _internal_has_header();
}
inline const ::ccs_msg::MsgHeader& SwitchMonitorLayoutReq::_internal_header() const {
  const ::ccs_msg::MsgHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::MsgHeader&>(
      ::ccs_msg::_MsgHeader_default_instance_);
}
inline const ::ccs_msg::MsgHeader& SwitchMonitorLayoutReq::header() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SwitchMonitorLayoutReq.header)
  return _internal_header();
}
inline void SwitchMonitorLayoutReq::unsafe_arena_set_allocated_header(
    ::ccs_msg::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.SwitchMonitorLayoutReq.header)
}
inline ::ccs_msg::MsgHeader* SwitchMonitorLayoutReq::release_header() {
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::MsgHeader* SwitchMonitorLayoutReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ccs_msg.SwitchMonitorLayoutReq.header)
  
  ::ccs_msg::MsgHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ccs_msg::MsgHeader* SwitchMonitorLayoutReq::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::MsgHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ccs_msg::MsgHeader* SwitchMonitorLayoutReq::mutable_header() {
  ::ccs_msg::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SwitchMonitorLayoutReq.header)
  return _msg;
}
inline void SwitchMonitorLayoutReq::set_allocated_header(::ccs_msg::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SwitchMonitorLayoutReq.header)
}

// .ccs_msg.ITCVideoLayoutType layout_id = 2;
inline void SwitchMonitorLayoutReq::clear_layout_id() {
  layout_id_ = 0;
}
inline ::ccs_msg::ITCVideoLayoutType SwitchMonitorLayoutReq::_internal_layout_id() const {
  return static_cast< ::ccs_msg::ITCVideoLayoutType >(layout_id_);
}
inline ::ccs_msg::ITCVideoLayoutType SwitchMonitorLayoutReq::layout_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SwitchMonitorLayoutReq.layout_id)
  return _internal_layout_id();
}
inline void SwitchMonitorLayoutReq::_internal_set_layout_id(::ccs_msg::ITCVideoLayoutType value) {
  
  layout_id_ = value;
}
inline void SwitchMonitorLayoutReq::set_layout_id(::ccs_msg::ITCVideoLayoutType value) {
  _internal_set_layout_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SwitchMonitorLayoutReq.layout_id)
}

// -------------------------------------------------------------------

// SwtichMonitorLayoutRes

// .ccs_msg.ResultInfo result = 1;
inline bool SwtichMonitorLayoutRes::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SwtichMonitorLayoutRes::has_result() const {
  return _internal_has_result();
}
inline const ::ccs_msg::ResultInfo& SwtichMonitorLayoutRes::_internal_result() const {
  const ::ccs_msg::ResultInfo* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::ccs_msg::ResultInfo&>(
      ::ccs_msg::_ResultInfo_default_instance_);
}
inline const ::ccs_msg::ResultInfo& SwtichMonitorLayoutRes::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SwtichMonitorLayoutRes.result)
  return _internal_result();
}
inline void SwtichMonitorLayoutRes::unsafe_arena_set_allocated_result(
    ::ccs_msg::ResultInfo* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ccs_msg.SwtichMonitorLayoutRes.result)
}
inline ::ccs_msg::ResultInfo* SwtichMonitorLayoutRes::release_result() {
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ccs_msg::ResultInfo* SwtichMonitorLayoutRes::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:ccs_msg.SwtichMonitorLayoutRes.result)
  
  ::ccs_msg::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ccs_msg::ResultInfo* SwtichMonitorLayoutRes::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ccs_msg::ResultInfo>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::ccs_msg::ResultInfo* SwtichMonitorLayoutRes::mutable_result() {
  ::ccs_msg::ResultInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ccs_msg.SwtichMonitorLayoutRes.result)
  return _msg;
}
inline void SwtichMonitorLayoutRes::set_allocated_result(::ccs_msg::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.SwtichMonitorLayoutRes.result)
}

// .ccs_msg.ITCVideoLayoutType layout_id = 2;
inline void SwtichMonitorLayoutRes::clear_layout_id() {
  layout_id_ = 0;
}
inline ::ccs_msg::ITCVideoLayoutType SwtichMonitorLayoutRes::_internal_layout_id() const {
  return static_cast< ::ccs_msg::ITCVideoLayoutType >(layout_id_);
}
inline ::ccs_msg::ITCVideoLayoutType SwtichMonitorLayoutRes::layout_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.SwtichMonitorLayoutRes.layout_id)
  return _internal_layout_id();
}
inline void SwtichMonitorLayoutRes::_internal_set_layout_id(::ccs_msg::ITCVideoLayoutType value) {
  
  layout_id_ = value;
}
inline void SwtichMonitorLayoutRes::set_layout_id(::ccs_msg::ITCVideoLayoutType value) {
  _internal_set_layout_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.SwtichMonitorLayoutRes.layout_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccs_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ccs_msg::MonitorListType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::MonitorListType>() {
  return ::ccs_msg::MonitorListType_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::PtzControlCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::PtzControlCmd>() {
  return ::ccs_msg::PtzControlCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ccs_5fgateway_5fmessage_2eproto
