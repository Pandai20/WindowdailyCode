// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccs_common_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ccs_5fcommon_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ccs_5fcommon_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ccs_5fcommon_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ccs_5fcommon_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ccs_5fcommon_5fmessage_2eproto;
namespace ccs_msg {
class KeepAliveReq;
struct KeepAliveReqDefaultTypeInternal;
extern KeepAliveReqDefaultTypeInternal _KeepAliveReq_default_instance_;
class KeepAliveRes;
struct KeepAliveResDefaultTypeInternal;
extern KeepAliveResDefaultTypeInternal _KeepAliveRes_default_instance_;
class MsgHeader;
struct MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class ResultInfo;
struct ResultInfoDefaultTypeInternal;
extern ResultInfoDefaultTypeInternal _ResultInfo_default_instance_;
}  // namespace ccs_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::ccs_msg::KeepAliveReq* Arena::CreateMaybeMessage<::ccs_msg::KeepAliveReq>(Arena*);
template<> ::ccs_msg::KeepAliveRes* Arena::CreateMaybeMessage<::ccs_msg::KeepAliveRes>(Arena*);
template<> ::ccs_msg::MsgHeader* Arena::CreateMaybeMessage<::ccs_msg::MsgHeader>(Arena*);
template<> ::ccs_msg::ResultInfo* Arena::CreateMaybeMessage<::ccs_msg::ResultInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ccs_msg {

enum ErrCode : int {
  e_ErrNone = 0,
  e_ErrUnspecified = 1,
  e_ErrEndedByRemoteUser = 2,
  e_ErrEndedByCallerAbort = 3,
  e_ErrEndedByRefusal = 4,
  e_ErrEndedByNoAnswer = 5,
  e_ErrEndedByTransportFail = 6,
  e_ErrEndedByCapabilityExchange = 7,
  e_ErrEndedByNoAccept = 8,
  e_ErrEndedByAnswerDenied = 9,
  e_ErrEndedByNoUser = 10,
  e_ErrEndedByNoBandwidth = 11,
  e_ErrEndedByUnreachable = 12,
  e_ErrEndedByHostOffline = 13,
  e_ErrEndedByNoEndPoint = 14,
  e_ErrEndedByConnectFail = 15,
  e_ErrEndedByCallCompleted = 16,
  e_ErrInvalidParameters = 17,
  e_ErrServerInternalError = 18,
  e_ErrAccountAlreadyLoggeg = 19,
  e_ErrAccountExpired = 20,
  e_ErrAccountNotExist = 21,
  e_ErrUnspecifiedPlatform = 22,
  e_ErrIncorrectUsernameOrPassword = 23,
  e_ErrConfIsNotVCS = 24,
  e_ErrChairmanIsNotExsit = 25,
  e_ErrConfNotExsit = 26,
  e_ErrConfLocked = 27,
  e_ErrBeyondConfMaxMbrcount = 28,
  e_ErrBeyondMCUMaxMbrCount = 29,
  e_ErrBeyondEnterpriseMaxMbrCount = 30,
  e_ErrBeyondPlatformMaxMbrCount = 31,
  e_ErrConfIsNotLive = 32,
  e_ErrBeyondLiveMbrCount = 33,
  e_ActiveRefusedByChairman = 34,
  e_ErrBeyondEnterprisePlatformMaxMbrCount = 35,
  e_ErrBeyongSystemLicens = 36,
  e_ErrMeetingIDNotMatchRoomID = 37,
  e_BeyondConfsCount = 38,
  e_StartVideoEngineFail = 39,
  e_NotEnoughMP = 40,
  e_NotConnected = 41,
  e_NotEnoughMCUResource = 42,
  e_ErrIncorrectMPVideoParams = 43,
  e_ErrNotFindDeviceId = 44,
  e_ErrStartMonitor = 45,
  e_ErrSetMonitorLayout = 46,
  ErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrCode_IsValid(int value);
constexpr ErrCode ErrCode_MIN = e_ErrNone;
constexpr ErrCode ErrCode_MAX = e_ErrSetMonitorLayout;
constexpr int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrCode_descriptor();
template<typename T>
inline const std::string& ErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrCode_descriptor(), enum_t_value);
}
inline bool ErrCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
enum ITCVideoLayoutType : int {
  e_1P = 0,
  e_1P_EX = 1,
  e_2P = 2,
  e_3P = 3,
  e_4P = 4,
  e_1_4P = 5,
  e_1_5P = 6,
  e_1_7P = 7,
  e_2_2_4P = 8,
  e_9P = 9,
  e_10P = 10,
  e_1_10P = 11,
  e_1_12P = 12,
  e_16P = 13,
  e_1_21P = 14,
  e_25P = 15,
  e_36P = 16,
  e_49P = 17,
  e_64P = 18,
  ITCVideoLayoutType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITCVideoLayoutType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITCVideoLayoutType_IsValid(int value);
constexpr ITCVideoLayoutType ITCVideoLayoutType_MIN = e_1P;
constexpr ITCVideoLayoutType ITCVideoLayoutType_MAX = e_64P;
constexpr int ITCVideoLayoutType_ARRAYSIZE = ITCVideoLayoutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITCVideoLayoutType_descriptor();
template<typename T>
inline const std::string& ITCVideoLayoutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITCVideoLayoutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITCVideoLayoutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITCVideoLayoutType_descriptor(), enum_t_value);
}
inline bool ITCVideoLayoutType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITCVideoLayoutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITCVideoLayoutType>(
    ITCVideoLayoutType_descriptor(), name, value);
}
// ===================================================================

class MsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  ~MsgHeader() override;
  explicit PROTOBUF_CONSTEXPR MsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHeader(const MsgHeader& from);
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.MsgHeader";
  }
  protected:
  explicit MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderIdFieldNumber = 1,
  };
  // int32 header_id = 1;
  void clear_header_id();
  int32_t header_id() const;
  void set_header_id(int32_t value);
  private:
  int32_t _internal_header_id() const;
  void _internal_set_header_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.MsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t header_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fcommon_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ResultInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ccs_msg.ResultInfo) */ {
 public:
  inline ResultInfo() : ResultInfo(nullptr) {}
  ~ResultInfo() override;
  explicit PROTOBUF_CONSTEXPR ResultInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultInfo(const ResultInfo& from);
  ResultInfo(ResultInfo&& from) noexcept
    : ResultInfo() {
    *this = ::std::move(from);
  }

  inline ResultInfo& operator=(const ResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultInfo& operator=(ResultInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultInfo* internal_default_instance() {
    return reinterpret_cast<const ResultInfo*>(
               &_ResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultInfo& a, ResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResultInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.ResultInfo";
  }
  protected:
  explicit ResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescriptionFieldNumber = 3,
    kResultFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
    kHeaderIdFieldNumber = 4,
  };
  // string error_description = 3;
  void clear_error_description();
  const std::string& error_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_description();
  PROTOBUF_NODISCARD std::string* release_error_description();
  void set_allocated_error_description(std::string* error_description);
  private:
  const std::string& _internal_error_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_description(const std::string& value);
  std::string* _internal_mutable_error_description();
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // .ccs_msg.ErrCode error_code = 2;
  void clear_error_code();
  ::ccs_msg::ErrCode error_code() const;
  void set_error_code(::ccs_msg::ErrCode value);
  private:
  ::ccs_msg::ErrCode _internal_error_code() const;
  void _internal_set_error_code(::ccs_msg::ErrCode value);
  public:

  // int32 header_id = 4;
  void clear_header_id();
  int32_t header_id() const;
  void set_header_id(int32_t value);
  private:
  int32_t _internal_header_id() const;
  void _internal_set_header_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ccs_msg.ResultInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_description_;
  bool result_;
  int error_code_;
  int32_t header_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccs_5fcommon_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ccs_msg.KeepAliveReq) */ {
 public:
  inline KeepAliveReq() : KeepAliveReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR KeepAliveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveReq(const KeepAliveReq& from);
  KeepAliveReq(KeepAliveReq&& from) noexcept
    : KeepAliveReq() {
    *this = ::std::move(from);
  }

  inline KeepAliveReq& operator=(const KeepAliveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveReq& operator=(KeepAliveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveReq* internal_default_instance() {
    return reinterpret_cast<const KeepAliveReq*>(
               &_KeepAliveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeepAliveReq& a, KeepAliveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KeepAliveReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KeepAliveReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.KeepAliveReq";
  }
  protected:
  explicit KeepAliveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ccs_msg.KeepAliveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_ccs_5fcommon_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class KeepAliveRes final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ccs_msg.KeepAliveRes) */ {
 public:
  inline KeepAliveRes() : KeepAliveRes(nullptr) {}
  explicit PROTOBUF_CONSTEXPR KeepAliveRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAliveRes(const KeepAliveRes& from);
  KeepAliveRes(KeepAliveRes&& from) noexcept
    : KeepAliveRes() {
    *this = ::std::move(from);
  }

  inline KeepAliveRes& operator=(const KeepAliveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAliveRes& operator=(KeepAliveRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepAliveRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAliveRes* internal_default_instance() {
    return reinterpret_cast<const KeepAliveRes*>(
               &_KeepAliveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeepAliveRes& a, KeepAliveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAliveRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAliveRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepAliveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeepAliveRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KeepAliveRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KeepAliveRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ccs_msg.KeepAliveRes";
  }
  protected:
  explicit KeepAliveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ccs_msg.KeepAliveRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_ccs_5fcommon_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHeader

// int32 header_id = 1;
inline void MsgHeader::clear_header_id() {
  header_id_ = 0;
}
inline int32_t MsgHeader::_internal_header_id() const {
  return header_id_;
}
inline int32_t MsgHeader::header_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.MsgHeader.header_id)
  return _internal_header_id();
}
inline void MsgHeader::_internal_set_header_id(int32_t value) {
  
  header_id_ = value;
}
inline void MsgHeader::set_header_id(int32_t value) {
  _internal_set_header_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.MsgHeader.header_id)
}

// -------------------------------------------------------------------

// ResultInfo

// bool result = 1;
inline void ResultInfo::clear_result() {
  result_ = false;
}
inline bool ResultInfo::_internal_result() const {
  return result_;
}
inline bool ResultInfo::result() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ResultInfo.result)
  return _internal_result();
}
inline void ResultInfo::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ResultInfo::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ResultInfo.result)
}

// .ccs_msg.ErrCode error_code = 2;
inline void ResultInfo::clear_error_code() {
  error_code_ = 0;
}
inline ::ccs_msg::ErrCode ResultInfo::_internal_error_code() const {
  return static_cast< ::ccs_msg::ErrCode >(error_code_);
}
inline ::ccs_msg::ErrCode ResultInfo::error_code() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ResultInfo.error_code)
  return _internal_error_code();
}
inline void ResultInfo::_internal_set_error_code(::ccs_msg::ErrCode value) {
  
  error_code_ = value;
}
inline void ResultInfo::set_error_code(::ccs_msg::ErrCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ResultInfo.error_code)
}

// string error_description = 3;
inline void ResultInfo::clear_error_description() {
  error_description_.ClearToEmpty();
}
inline const std::string& ResultInfo::error_description() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ResultInfo.error_description)
  return _internal_error_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultInfo::set_error_description(ArgT0&& arg0, ArgT... args) {
 
 error_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ccs_msg.ResultInfo.error_description)
}
inline std::string* ResultInfo::mutable_error_description() {
  std::string* _s = _internal_mutable_error_description();
  // @@protoc_insertion_point(field_mutable:ccs_msg.ResultInfo.error_description)
  return _s;
}
inline const std::string& ResultInfo::_internal_error_description() const {
  return error_description_.Get();
}
inline void ResultInfo::_internal_set_error_description(const std::string& value) {
  
  error_description_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultInfo::_internal_mutable_error_description() {
  
  return error_description_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultInfo::release_error_description() {
  // @@protoc_insertion_point(field_release:ccs_msg.ResultInfo.error_description)
  return error_description_.Release();
}
inline void ResultInfo::set_allocated_error_description(std::string* error_description) {
  if (error_description != nullptr) {
    
  } else {
    
  }
  error_description_.SetAllocated(error_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_description_.IsDefault()) {
    error_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ccs_msg.ResultInfo.error_description)
}

// int32 header_id = 4;
inline void ResultInfo::clear_header_id() {
  header_id_ = 0;
}
inline int32_t ResultInfo::_internal_header_id() const {
  return header_id_;
}
inline int32_t ResultInfo::header_id() const {
  // @@protoc_insertion_point(field_get:ccs_msg.ResultInfo.header_id)
  return _internal_header_id();
}
inline void ResultInfo::_internal_set_header_id(int32_t value) {
  
  header_id_ = value;
}
inline void ResultInfo::set_header_id(int32_t value) {
  _internal_set_header_id(value);
  // @@protoc_insertion_point(field_set:ccs_msg.ResultInfo.header_id)
}

// -------------------------------------------------------------------

// KeepAliveReq

// -------------------------------------------------------------------

// KeepAliveRes

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccs_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ccs_msg::ErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::ErrCode>() {
  return ::ccs_msg::ErrCode_descriptor();
}
template <> struct is_proto_enum< ::ccs_msg::ITCVideoLayoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ccs_msg::ITCVideoLayoutType>() {
  return ::ccs_msg::ITCVideoLayoutType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ccs_5fcommon_5fmessage_2eproto
